<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Brielley</title>
  
  
  <link href="https://brielley.github.io/atom.xml" rel="self"/>
  
  <link href="https://brielley.github.io/"/>
  <updated>2021-04-09T12:34:53.543Z</updated>
  <id>https://brielley.github.io/</id>
  
  <author>
    <name>Brielley</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A Stray&#39;s Tale v1.1.2 Major Update</title>
    <link href="https://brielley.github.io/2021/04/09/tech-project-a-strays-tale-alpha-v1.1.2/"/>
    <id>https://brielley.github.io/2021/04/09/tech-project-a-strays-tale-alpha-v1.1.2/</id>
    <published>2021-04-09T09:59:53.176Z</published>
    <updated>2021-04-09T12:34:53.543Z</updated>
    
    <content type="html"><![CDATA[<iframe framborder="0" src="https://itch.io/embed/977117" width="552" height="167"><a href="https://brielley.itch.io/a-strays-tale" target="_blank" rel="noopener">A Stray's Tale by Brie Y. R.</a></iframe><h5 id="Major-Update"><a href="#Major-Update" class="headerlink" title="Major Update:"></a>Major Update:</h5><p>这是一次主更新，比之<a href="https://brielley.github.io/2021/04/03/tech-project-a-strays-tale-alpha-v1.0.0/">之前的版本</a>，新增的玩法与功能主要有：</p><p><strong>玩法相关</strong>：</p><ul><li><p>疾病系统。现在狗狗可能会生病了。淋雨半小时以上会感冒，感冒后狗狗对食物的吸收能力下降，吃同样的食物只能回复更少的能量；吃到过期食品会腹泻，腹泻会导致狗狗一次性大量失水，如果狗狗原本正处于缺水状态，腹泻也可能会使狗狗丧命；短期内喝大量咖啡、奶茶、汽水等含糖量高的饮料，会使狗狗患上糖尿病，不同于会在次日痊愈的感冒和腹泻，糖尿病无法治愈，会使狗狗终身都需要饮用更多的水来维持生命。</p></li><li><p>消防栓解谜。现在狗狗可以尝试从消防栓一次性喝水到饱了。狗狗靠近消防栓时，会触发消防栓上的红外感应，从而激活一个交互屏幕，如果选择了正确的选项，并且输入了正确的密码（别问我正确的密码是什么，我也不知道，它会在每次游戏新开始时随机生成），那么狗狗将随时可以在城市的任何一个消防栓喝到无穷无尽的水。但同时，错误的选项或会导致密码重置前功尽弃，或是引来不必要的关注被送入shelter游戏结束。</p></li></ul><p><strong>功能相关</strong>：</p><ul><li><p>自动保存。当前版本的游戏新增自动保存功能，在每天结束时，游戏会自动保存，并可以在之后读取。如果你的狗狗在第10天BE，你可以读档回到第10天早晨5点再试一次。读档也会让天气、垃圾袋里刷新的食物等每日随机事件全部重置，如果你在某一天翻到了太多的巧克力甜甜圈和葡萄三明治，可以考虑在当天结束前读档试试运气。</p></li><li><p>暂停。当前版本的游戏支持暂停了，暂停键是Esc，在暂停状态下，时间流逝与能量水份的消耗都会暂停，直到你再次按下Esc键退出暂停状态。不过，不要妄图通过在马路中间暂停来避开横冲直撞的车辆！暂停菜单目前仅支持退出游戏和调整屏幕，随着以后功能的增加，暂停菜单内会显示更多的内容比如狗狗的详细状态、npc好感值、已触发事件、已解锁物品一览等等。</p></li><li><p>屏幕调整。目前可以在暂停菜单中进行屏幕调整，选择全屏模式或窗口模式。全屏模式默认为1080p，窗口模式默认为720p，但你可以在窗口模式下，通过拖拽边框，来让窗口大小完全符合你的个人偏好。</p></li></ul><p><strong>细节优化</strong>：</p><ul><li>目前翻找垃圾刷新食物会有一个重力掉落的过程，而不是直接刷新在地面上。</li><li>脚步声等多个音效优化。</li><li>触发BE时会显示如何避免此类BE的提示。</li></ul><h5 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h5><p>下载上面链接里的<code>.zip</code>文件，解压后双击<code>A Stray&#39;s Tale.exe</code>开始游戏。</p><h5 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h5><p><strong>W A S D</strong>： 行走<br><strong>左Shift + W A S D</strong>： 冲刺     （注：冲刺会消耗耐力，耐力耗尽会自动切换为行走，需松开shift才能恢复耐力）<br><strong>ESC</strong>：暂停</p><h5 id="这个游戏目前处在prototype阶段的中期，核心功能持续更新中。预计下次主更新将会包括的功能有："><a href="#这个游戏目前处在prototype阶段的中期，核心功能持续更新中。预计下次主更新将会包括的功能有：" class="headerlink" title="这个游戏目前处在prototype阶段的中期，核心功能持续更新中。预计下次主更新将会包括的功能有："></a>这个游戏目前处在prototype阶段的中期，核心功能持续更新中。预计下次主更新将会包括的功能有：</h5><ul><li>信念系统。和饥饿与干渴一样，信念也会每天自然消耗，并且在归零的时候结束游戏。在生存模式下，狗狗初次在地图中触发到特定事件时会增长信念，此后，狗狗可以随时到达之前触发事件的地图所在，通过消耗能量回复信念。</li><li>NPC事件之Anna。Anna是狗狗几次在公园里碰到的小姑娘，在一次只有在特定天气才能解锁的事件后，如果选择正确，狗狗会获得放在公园角落的一个水碗，这样以后的每个雨天就都有额外的水喝了。</li><li>饥饿与干渴redo。重做后的饥饿与干渴系统会与信念系统一起形成一个相互转换与制约的生存系统。食用食物会增长能量的同时消耗水；如果是雨天，选择将食物在雨中淋一段时间则不会消耗水，但会消耗时间；消耗能量和时间能增长信念；信念低于一定数值时，狗狗会发生不受控行为并大量消耗时间和能量。</li></ul><p><strong>作为一个尚在开发早期，核心功能仍在不断迭代中的游戏，你的反馈将很大可能影响到这个游戏最终的模样。如果你在玩的过程中遇到任何问题，或者有任何想法和建议，请一定一定告诉我！在这篇博文下留言，或是<a href="https://brielley.itch.io/a-strays-tale" target="_blank" rel="noopener">在itch.io留言</a>，或者<a href="mailto:brieyr@outlook.com" target="_blank" rel="noopener">发我邮件</a>都可。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe framborder=&quot;0&quot; src=&quot;https://itch.io/embed/977117&quot; width=&quot;552&quot; height=&quot;167&quot;&gt;&lt;a href=&quot;https://brielley.itch.io/a-strays-tale&quot; target=&quot;</summary>
      
    
    
    
    <category term="Tech" scheme="https://brielley.github.io/categories/Tech/"/>
    
    <category term="Project" scheme="https://brielley.github.io/categories/Tech/Project/"/>
    
    
    <category term="Game Dev" scheme="https://brielley.github.io/tags/Game-Dev/"/>
    
    <category term="Unity" scheme="https://brielley.github.io/tags/Unity/"/>
    
    <category term="A Stray&#39;s Tale" scheme="https://brielley.github.io/tags/A-Stray-s-Tale/"/>
    
    <category term="Prototype" scheme="https://brielley.github.io/tags/Prototype/"/>
    
    <category term="My Indie Game" scheme="https://brielley.github.io/tags/My-Indie-Game/"/>
    
  </entry>
  
  <entry>
    <title>流浪狗狗生存模拟器A Stray&#39;s Tale原型版出炉啦！</title>
    <link href="https://brielley.github.io/2021/04/03/tech-project-a-strays-tale-alpha-v1.0.0/"/>
    <id>https://brielley.github.io/2021/04/03/tech-project-a-strays-tale-alpha-v1.0.0/</id>
    <published>2021-04-03T09:18:56.138Z</published>
    <updated>2021-04-09T10:00:52.796Z</updated>
    
    <content type="html"><![CDATA[<iframe framborder="0" src="https://itch.io/embed/977117" width="552" height="167"><a href="https://brielley.itch.io/a-strays-tale" target="_blank" rel="noopener">A Stray's Tale by Brie Y. R.</a></iframe><h5 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h5><p>下载上面链接里的<code>.zip</code>文件，解压后双击<code>A Stray&#39;s Tale.exe</code>开始游戏。</p><h5 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h5><p><strong>W A S D</strong>： 行走<br><strong>左Shift + W A S D</strong>： 冲刺     （注：冲刺会消耗耐力，耐力耗尽会自动切换为行走，需松开shift才能恢复耐力）</p><h5 id="这个游戏目前处在prototype阶段的中期，核心功能持续更新中。"><a href="#这个游戏目前处在prototype阶段的中期，核心功能持续更新中。" class="headerlink" title="这个游戏目前处在prototype阶段的中期，核心功能持续更新中。"></a>这个游戏目前处在prototype阶段的中期，核心功能持续更新中。</h5><p><strong>当前版本已有的功能主要包括</strong>：</p><ul><li>探索城市，翻找垃圾袋并获得随机的食物和饮水满足一天所需，如果食物或者饮水中任何一样耗尽都会结束游戏。</li><li>时间系统。可以在城市内探索的时间仅限于早上5-7点，在屏幕右下方会看到计时器，如果没有在7点前离开城市，会被社工带到流浪动物救助站，游戏结束。</li><li>天气系统。每天的天气是随机的，当天的天气除了影响音效以外，还会与其它系统产生联动，比如目前版本已经有的与干渴系统的联动（晴天需要的饮水量是阴雨天的两倍）。在之后更新其它功能后还会有与疾病系统的联动（雨天会更容易感冒）、与npc互动的联动（不同天气能解锁特定的npc互动事件），以及和解谜玩法的联动（不同天气有特殊解谜玩法）。</li><li>生存危机。城市中的危险无处不在，比如绝不减速的汽车，如果被撞几无几率生还；比如高高的堤岸，一旦掉到海里将没法再游上岸；比如看起来很诱人，但对狗狗来说致命的含有巧克力或葡萄的食物……</li></ul><p><strong>开发中的功能还有</strong>：</p><ul><li>疾病系统。包括吃坏了肚子和淋了雨感冒这样的短期可自愈疾病，和喝太多汽水得糖尿病或喝太多咖啡得心脏病这样会一直持续影响的慢性疾病。</li><li>信念系统。和饥饿与干渴一样，信念也会每天自然消耗，并且在归零的时候结束游戏。在车站等待一直没有回家的主人会增长信念，在与npc的互动中感觉到连结也会增长信念。</li><li>npc事件与好感系统。与npc互动除了增长信念以外，还会增长与这个npc的好感值。好感值达到一定数字以上会解锁一些让生存更容易的新互动，比如流浪汉会帮你去拿那些高高的盖着盖子或者口子特别窄的垃圾箱里的食物，比如有小姑娘会帮你在公园的角落放个水碗这样雨天就都有水喝了，甚至之前必死的被车撞，如果发生时正好有好感度高的npc走过，会被救治，虽然之后一段时间会有一个受伤的debuff，但伤口会随着时间消失痊愈。</li><li>解谜系统。比较确定会做的主要是一些怎么更好地生存相关的解谜，主要包括怎么够到那些特别高的垃圾桶，怎么打开金属罐头，怎么解开消防栓的密码锁喝水等等。另外，有在考虑要不要做一些侦探类解谜，包括去追寻主人失踪的原因，甚至救回主人，以及几个npc的侦探解谜线。但这部分我还没想好，也许后面有可能决定不做，因为我还是更想把这个游戏做成一个生存游戏，虽然会有一些随机事件，但不太想里面有太多叙事线，尤其是会与生存主线起冲突的那些。也许会等生存相关功能都完成开发以后，考虑做个独立于生存模式的侦探解谜相关的故事模式。</li><li>捏狗系统。在游戏最前面可以捏狗……准确的说是半捏狗，没有拉杆，只可以选狗狗的品种、大小、毛色这样。然后主要是不同的狗狗能力会有一些区别，有的跑得更快，但耐力少；有的跑得不快，但耐力强；有的不擅长跑但擅长跳；有的跑跳都普通但咬合力强可以空口咬开铝罐头；有的跑跳咬都平平但吃得少；有的特别萌跟npc互动好感涨得更快但信念值也掉得更快等等</li></ul><p><strong>作为一个处在开发早期的游戏，亟需各种反馈来改进后续阶段的开发。如果你在玩的过程中遇到任何问题，或者有任何想法和建议，或是发现任何bug，请一定一定告诉我！在这篇博文下留言，或是<a href="https://brielley.itch.io/a-strays-tale" target="_blank" rel="noopener">在itch.io留言</a>，或者<a href="mailto:brieyr@outlook.com" target="_blank" rel="noopener">发我邮件</a>都可。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe framborder=&quot;0&quot; src=&quot;https://itch.io/embed/977117&quot; width=&quot;552&quot; height=&quot;167&quot;&gt;&lt;a href=&quot;https://brielley.itch.io/a-strays-tale&quot; target=&quot;</summary>
      
    
    
    
    <category term="Tech" scheme="https://brielley.github.io/categories/Tech/"/>
    
    <category term="Project" scheme="https://brielley.github.io/categories/Tech/Project/"/>
    
    
    <category term="Game Dev" scheme="https://brielley.github.io/tags/Game-Dev/"/>
    
    <category term="Unity" scheme="https://brielley.github.io/tags/Unity/"/>
    
    <category term="A Stray&#39;s Tale" scheme="https://brielley.github.io/tags/A-Stray-s-Tale/"/>
    
    <category term="Prototype" scheme="https://brielley.github.io/tags/Prototype/"/>
    
    <category term="My Indie Game" scheme="https://brielley.github.io/tags/My-Indie-Game/"/>
    
  </entry>
  
  <entry>
    <title>第一人称冒险游戏Judas&#39; Trial试玩版出炉啦！</title>
    <link href="https://brielley.github.io/2021/03/26/tech-project-judas-trial-beta-v.1.0.0/"/>
    <id>https://brielley.github.io/2021/03/26/tech-project-judas-trial-beta-v.1.0.0/</id>
    <published>2021-03-25T17:06:25.000Z</published>
    <updated>2021-04-09T09:54:13.120Z</updated>
    
    <content type="html"><![CDATA[<iframe framborder="0" src="https://itch.io/embed/935785" width="552" height="167"><a href="https://brielley.itch.io/judastrial" target="_blank" rel="noopener">Judas'Trial by Brie Y. R.</a></iframe><h5 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h5><p>下载上面链接里的<code>.zip</code>文件，解压后双击<code>Judas&#39;Trial.exe</code>开始游戏。</p><h5 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h5><p><strong>W A S D</strong>： 移动<br><strong>左Shift + W A S D</strong>： 奔跑<br><strong>空格</strong>： 跳跃<br><strong>Tab</strong>：地图<br><strong>回车/鼠标左键</strong>：继续对话<br><strong>Esc</strong>：暂停菜单</p><h5 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h5><p>1）窗口模式下可以拖拽窗口边框自定义游戏尺寸，但更建议在默认的1080p全屏模式下玩。不建议把窗口开太小，或者对屏幕长宽比进行太大的调整，它们可能会导致UI无法完整显示，如果发生了这种情况，把窗口拖大一点或者切换成全屏模式就好。<br>2）游戏中有些小怪是只要你在它的视线内就会主动攻击，上方有血条，如果血条空了就会从头来过，多从头来几次可能会直接BE。时刻关注血条，如果血条比较危险了，可以靠近大脑或者吃耶稣血来回血，但都有副作用，最好是注意规避伤害，尤其是在跟npc对话或暂停前，尽可能找个安全的地方，比如掩体后面。<br>3）大体来说有两种通关方式，文通是跑完剧情做对绝大部分选择题，武通是把小怪全撞出去，文通武通没有绝对的路线选择，完全可以随缘各做一些，只要在时限内让理智回到100%以上就能HE。时限是3000秒，游戏内有机制可以获得更多时间，剧情通关时长大约1小时，武通视操(运)作(气)一般在20分钟以内。</p><h5 id="Feedback-needed"><a href="#Feedback-needed" class="headerlink" title="Feedback needed!"></a>Feedback needed!</h5><p><strong>如果玩的过程中有任何问题任何想法任何建议，或是发现任何bug，请一定一定告诉我！在这篇博文下留言，或是<a href="https://brielley.itch.io/judastria" target="_blank" rel="noopener">在itch.io留言</a>，或者<a href="mailto:brieyr@outlook.com" target="_blank" rel="noopener">发我邮件</a>都可。</strong></p><hr><h5 id="Inspirations："><a href="#Inspirations：" class="headerlink" title="Inspirations："></a>Inspirations：</h5><p>最早萌生出做这个游戏的念头是在2018年初，当时沉迷音乐剧Jesus Christ Superstar，像每个对BE耿耿于怀的人一样，我有一种强烈地想要有机会扭转结局的urge，记得当时在lofter上开过各种天马行空不切实际的脑洞。去年年初，我在unity asset store看到了这套素材，包括low-poly风格的人的身体内部、心、胃、脑、血细胞、绿色的怪物……一个游戏开始在我脑子里成型——在犹大疯狂天人交战的最后晚餐，他进入了自己的身体，不是物理上的身体，而是他灵魂的投射，他穿行在自己的身体里，像个局外人一样，从身体所呈现的一个个意向中，从他在这里遇到的一个个难题面临的一个个选择中，去更深入地了解自己，去重新审视自己那些存在已久但从未验证的观点，去重新思考自己的理想重新定位未来的方向，包括那个需要在最后晚餐上做出决定的关键抉择。</p><p>一开始的时候，我只希望把这个游戏设计得尽可能有可玩性就好，在unity里做了几种不同玩法的prototype后，我选择了自己机缘巧合撞出来却体感最好的撞撞撞机制，那是去年4月份。但在不久之后的5月，我玩到了一个也许改变了我整个游戏开发思路的独立游戏Disco Elysium，它让我开始思考和探索用游戏来更直接地表达抽象主题的可能。从此我的开发重心开始转移，重做了整个叙事系统，从JCS00的象征表现手法中汲取灵感，把游戏的整个过程做成了一场犹大与自我、以及与他心中的耶稣的对话，并尝试探讨utilitarianism与Kantianism，means与ends，love与trust，arrogant与insecure。虽然因为能力所限，这些尝试在实现时许多未能如我所想，但我很开心自己开始了这段尝试的旅程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe framborder=&quot;0&quot; src=&quot;https://itch.io/embed/935785&quot; width=&quot;552&quot; height=&quot;167&quot;&gt;&lt;a href=&quot;https://brielley.itch.io/judastrial&quot; target=&quot;_bl</summary>
      
    
    
    
    <category term="Tech" scheme="https://brielley.github.io/categories/Tech/"/>
    
    <category term="Project" scheme="https://brielley.github.io/categories/Tech/Project/"/>
    
    
    <category term="Game Dev" scheme="https://brielley.github.io/tags/Game-Dev/"/>
    
    <category term="Unity" scheme="https://brielley.github.io/tags/Unity/"/>
    
    <category term="My Indie Game" scheme="https://brielley.github.io/tags/My-Indie-Game/"/>
    
    <category term="Judas&#39;Trial" scheme="https://brielley.github.io/tags/Judas-Trial/"/>
    
    <category term="Early Access" scheme="https://brielley.github.io/tags/Early-Access/"/>
    
  </entry>
  
  <entry>
    <title>分享一个新搭的温登堡小房子</title>
    <link href="https://brielley.github.io/2021/03/04/game-sims-4-sharing-lots-havisham/"/>
    <id>https://brielley.github.io/2021/03/04/game-sims-4-sharing-lots-havisham/</id>
    <published>2021-03-04T14:55:55.000Z</published>
    <updated>2021-03-25T18:15:25.378Z</updated>
    
    <content type="html"><![CDATA[<p>平层无需上下楼，前店后居结构，支持同时开咖啡店、酒吧、零售店。有预设好的咖啡店设备、酒吧设备、放蛋糕的陈列架、放画的长廊墙壁。</p><p>仅使用本体+同欢共乐dlc，无CC，放置前需先<code>bb.moveobjects on</code>。已生活模式测试，所有功能均可正常使用。</p><p>位置在温登堡老城区（Olde Platz）左上角的20x20用地，用地原名<code>Havisham House</code>，最好是把房子放在这里啦，如果放在其它地方可能会与周围环境冲突。</p><p><img src="/images/wdb01.webp" alt="正面"></p><p><img src="/images/wdb02.webp" alt="侧面"></p><p><img src="/images/wdb03.webp" alt="前院，小人可以在阳光下画画和写书"></p><p><img src="/images/wdb04.webp" alt="门厅，户外小沙发原本是给客人等位用的，但如果家有狗子会发现这里日常被狗子占据打盹"></p><p><img src="/images/wdb05.webp" alt="自营咖啡店营业中"></p><p><img src="/images/wdb06.webp" alt="打烊后的咖啡厅"></p><p><img src="/images/wdb07.webp" alt="自营酒吧营业中"></p><p><img src="/images/wdb08.webp" alt="打烊后的酒吧"></p><p><img src="/images/wdb09.webp" alt="小人在家开蛋糕店的烘培品陈列台，最多可以放27个蛋糕"></p><p><img src="/images/wdb10.webp" alt="连接营业区与居住区的走廊，一侧的墙壁是小人在家开画廊的画作陈列墙"></p><p><img src="/images/wdb11.webp" alt="平面图"></p><p>以上图片均使用游戏内置截图，除平面图有增加文字说明外，无后期处理。</p><p>房屋所有设施都在生活模式下测试过，可放心使用。主卧的浴缸摆放位置可以给大型犬洗澡，后院种的火龙果和死神花可以刚好被房檐遮挡，四季可收获，也可以通过在家开店售卖。</p><p><strong>下载与安装</strong></p><p><a href="http://www.simfileshare.net/download/2422278/" target="_blank" rel="noopener">下载zip文件</a> ，解压后放入<code>文档/Electronic Arts/The Sims 4/Tray</code>文件夹下，注意需把解压后的7个文件直接放入<code>Tray</code>夹，不能在外嵌套文件夹，不然游戏程序识别不了。</p><p><strong>或</strong> 工坊搜索id：<code>brielleyea</code>，在Showcase中找到<code>Havisham House</code>下载到Library。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;平层无需上下楼，前店后居结构，支持同时开咖啡店、酒吧、零售店。有预设好的咖啡店设备、酒吧设备、放蛋糕的陈列架、放画的长廊墙壁。&lt;/p&gt;
&lt;p&gt;仅使用本体+同欢共乐dlc，无CC，放置前需先&lt;code&gt;bb.moveobjects on&lt;/code&gt;。已生活模式测试，所有功能</summary>
      
    
    
    
    <category term="Game" scheme="https://brielley.github.io/categories/Game/"/>
    
    <category term="Sims" scheme="https://brielley.github.io/categories/Game/Sims/"/>
    
    
    <category term="Gamer" scheme="https://brielley.github.io/tags/Gamer/"/>
    
    <category term="The Sims 4" scheme="https://brielley.github.io/tags/The-Sims-4/"/>
    
  </entry>
  
  <entry>
    <title>推荐一些The Sims 4的魔法相关Mod</title>
    <link href="https://brielley.github.io/2021/02/24/game-sims-4-cc-recommend-magic/"/>
    <id>https://brielley.github.io/2021/02/24/game-sims-4-cc-recommend-magic/</id>
    <published>2021-02-24T13:55:28.000Z</published>
    <updated>2021-03-25T10:55:23.762Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个哈利波特迷，我一直很喜欢魔法相关的玩法，从M3开始也一直非常喜欢用HP里的人物开展剧情，但M4的魔法dlc完成度比较差强人意，虽然有很多很有意思的设定，但魔法世界的玩法本身并不大完整，在小人学会所有咒语和魔药配方后就不知道该干啥了，如果去过非巫师的M4生活会感觉咒语的作用太过于imba，而如果去过巫师的生活，游戏本身又并没有提供太多这方面的玩法内容，然后就越来越无聊最后去开新档了。直到我发现了Ilkavelle的一系列魔法主题的模组，拯救了我的这些存档，她的这些模组涵盖从魔法学校到各种魔法职业，有很多模组附带以及一些新增的互动，构成了一个相对完整的巫师生活。</p><h5 id="魔法学校"><a href="#魔法学校" class="headerlink" title="魔法学校"></a>魔法学校</h5><p>简介：<a href="https://ilkavelle.wixsite.com/simsquest/post/magic-school" target="_blank" rel="noopener">https://ilkavelle.wixsite.com/simsquest/post/magic-school</a></p><p>下载：<a href="https://www.simfileshare.net/download/2168644/" target="_blank" rel="noopener">https://www.simfileshare.net/download/2168644/</a></p><p>这个魔法学校是只有青少年巫师可以从职业列表中看到的。提供兔子洞和WFH两种参加方式，因为兔子洞时间和普通高中冲突，所以如果小人选择同时完成普通高中和魔法学校，那么小人只能白天上兔子洞普通高中，晚上通过WFH系统去跟随上魔法学校。如果小人选择只上魔法学校，作为普通高中的替代，那么需要退掉高中，这样就可以每天根据需要选择去兔子洞还是WFH去魔法学校学习。m4本身没有退掉高中的选项，需要mod来实现，我试过作者推荐的Triplis的这一款（<a href="https://triplis.github.io/mods/school-quit-rejoin.html" target="_blank" rel="noopener">https://triplis.github.io/mods/school-quit-rejoin.html</a>) 在当前的1.70版本下运行没问题，你也可以选择任何一款能实现类似功能的mod，让小巫师退出普通高中注册魔法学校而不被社工领走。</p><p>小巫师在这个魔法学校会分成五个阶段，经测除了第一个阶段只需要一天以外，第二个阶段开始需要至少两天才能进入到下一个阶段，所以可以假想第一个阶段是魔法学校一年级，第二个阶段是二三年级，第三个阶段是四五年级，第四个阶段是六七年级，第五个阶段是延毕（因为第四阶段可以参加终极巫师考试，是这个考试的成绩而非完成到第几阶段，决定小巫师在毕业后选择职业的起始职级和薪酬，所以考完试就可以吹蜡烛了，并不必须完成魔法学校的第五个阶段）。</p><p>每个阶段有进入下一个阶段的阶段任务，主要包括达到某个魔法等阶，会多少个咒语，以及写论文。论文是一个注册魔法学校后会自动放到小巫师随身清单的类似家庭作业的本子，小巫师在点它以后会有一个写论文的选项，根据年级不同，可以写的论文方向也不同，早期就只有魔药和魔咒，中后期方向会增多，加入草药占星麻瓜研究等等，只需要选其一完成就可以了，完成更多并不会增加学校表现，但可能增加技能，比如写魔药课论文可能学到新的魔药配方。但不同于普通中学的作业，论文并不是需要每天课后完成的，只需要每个阶段完成一份就可以了，需要每天完成的只有每天的课程。</p><p>如前面所说过的那样，每天的课程有两种实现方式：如果选择上课的方式是兔子洞，那么和写论文类似，可以选上哪门课，上魔药课可能学到配方，上魔咒课可能学到咒语，上占星课会提升逻辑技能等等；如果选择WFH，这样上课的方式是相对开放可控的，我个人强烈推荐第二种。</p><p>小巫师无论在哪个学校阶段，每天的WFH任务都是完成当天的课程事件，这个课程事件是一个类似于生日派对或者约会一样的需要在手机里发起的活动，选择小巫师，花100块学费发起活动后，小巫师会被传送到魔法学校去开始一天的课程，mod会自动把世界中的青少年巫师设定成魔法学校的同学，并随机选出世界中的几位成年巫师和老年巫师设定成教授，让他们和主控小巫师一起出现在魔法学校用地。如果想玩哈利波特剧情，那么最好先去工坊下载好所有的哈利波特角色放在世界中，并且分配好正确的年龄（比如如果你希望当教授的角色完全符合剧情，那么最好把卢修斯纳西莎贝拉小天狼星莫莉亚瑟等人设定为青年人，而把理论上应该和他们同龄但你希望被系统分配为教授的卢平斯内普等人设定为成年人），同时把m4自带的年龄可能被分配成同学或教授的npc们改成其它年龄（比如青年或者幼儿），这样你比较能在魔法课堂上见到正确的同学和正确的教授。</p><p>每次发起课程事件，需要完成的内容有部分是固定的，有部分是随机的。固定的部分主要包括问教授问题和跟同学互动，随机的部分主要是学习的具体内容，比如练习魔咒照顾草药制作魔药观星看书等等。为了完成课程的内容，最好修改一下系统自带的魔法学校建筑（需要输入秘籍<code>bb.enablefreebuild</code>修改），保证这里有足够的坩埚、望远镜、书架、魔法植物、冰箱这些设备，来完成相应的课程内容。</p><p>像所有的系统自带事件一样，这个每日课程事件会有铜/银/金三种评级，结束课程事件后如果有评级会得到随机的魔药材料作为奖励。不过我个人感觉这个奖励有些过于随机，似乎和评级高低并不怎么挂钩，我在铜牌拿到过火龙果和死神花，在银牌拿到过苹果。而且评级高低也和成绩表现不挂钩，无论拿到铜还是金，进入下一个学习阶段的进度条是一样的，总之，小巫师上课的时候可以不用像上系统的大学那么沉迷学习，多看看德拉科和罗恩决斗（在我的存档里他俩好容易自主开始决斗，明明我没有设置过他们之间的关系），多听听邓布利讲笑话，在魔法学校度过一个轻松愉快的童年。</p><p>真正需要刷金牌的是小巫师在魔法学校第四阶段的时候可以参加的终极巫师等级考试。这次考试也是以事件的方式把小巫师传送到魔法学校进行，内容包括在规定时间内制作出一份成功的魔药、成功施放两个指定咒语、以及赢得一场魔法决斗。如果没有拿到铜牌，那么需要重考直到至少铜牌才能毕业，如果拿到了铜牌及以上，那么成绩就固定了不能再刷分。铜牌在毕业后没有额外奖励，银牌的奖励是薪酬会高一些，金牌除了薪酬比银牌更高以外，还能一毕业就从更高职级开始。参加完考试后，小巫师理论上就可以吹蜡烛进入青年了，但如果不急于毕业，可以继续往下读，在魔法学校的第五个阶段的时候，如果到魔法学校，跟导师（是m4自带的导师，不是魔法学校mod的教授）的互动会多一个询问职业方向的建议，不过这个建议并不是定制化的，只是粗略告诉小人选哪个巫师职业会需要哪些方面的技能。</p><p>不同于大学是修满学分自动毕业，魔法学校的小巫师无论学习情况如何，都会在结束青少年进入青年时自动毕业，毕业后小巫师可以选择安装过mod的任何一种巫师职业，开始他们之后的巫师生活。</p><h5 id="战斗巫师"><a href="#战斗巫师" class="headerlink" title="战斗巫师"></a>战斗巫师</h5><p>介绍：<a href="https://ilkavelle.wixsite.com/simsquest/post/master-duelist-career" target="_blank" rel="noopener">https://ilkavelle.wixsite.com/simsquest/post/master-duelist-career</a></p><p>下载：<a href="https://www.simfileshare.net/download/2093509/" target="_blank" rel="noopener">https://www.simfileshare.net/download/2093509/</a></p><p>战斗巫师这个职业其实应该是四个职业，只是因为它们都与战斗有关，所以被放在了一个职业下，升到高职级的时候，会分为四个方向，分别是：黑巫师、奥罗、黑魔法防御术教授、赏金猎人。</p><p>选教授这个方向后，每日的WFH任务除了决斗以外，还会包括指导他人魔法，有魔法学校教授职级和魔法学校校长职级，很适合结合魔法学校mod玩剧情。</p><p>另外三个职业方向会仍然主要集中在决斗，但方向上有区别，这个mod新增了两个关于决斗的互动，一个是决斗至死，在发起魔法决斗后，失败的一方会魔法过载死亡，一个很适合黑巫师分支的决斗方式。另一个是赏金决斗，在发起决斗后，失败的一方会损失金钱，胜利的一方会获得金钱，一个很适合赏金猎人分支的决斗方式。</p><p>除此之外我想推荐另一位作者Zero的模组HeatedDuelsConsequences（<a href="https://www.patreon.com/posts/rom-consequences-40911630" target="_blank" rel="noopener">https://www.patreon.com/posts/rom-consequences-40911630</a>) ，使用这个mod会让系统自带的激烈决斗（heated duel）增加惩罚措施，失败的一方会被封印魔力，在之后的两天里无法使用魔法，我觉得这会对战斗巫师这个mod的奥罗支线提供一个有用的补充，比如作为奥罗的哈利；也许会和作为黑巫师的伏地魔决斗至死，但可能只打算让同样作为黑巫师的德拉科失去魔法一段时间。而邓布利多也许会每两天都去和他的老情人激烈决斗一次，以保证格林德沃能一直无害地生活在纽蒙迦德，直到某一天他自己在激烈决斗中失去了魔力。</p><p>值得一提的是，只要安装了这个mod，无论是否选择战斗巫师这个职业，都会新增决斗至死和赏金决斗这两个互动。也就是说，如果你玩儿黄金三人组，家庭所有成员都还在上学没有收入却要每天交100块学费每周交账单，那么你可以让他们去通过赏金决斗赚钱。而如果你玩儿的韦斯莱一家，那么选择当魁地奇球员的双胞胎，也可以和选择成为奥罗的其它凤凰社成员一样与食死徒殊死决斗。</p><h5 id="治疗师"><a href="#治疗师" class="headerlink" title="治疗师"></a>治疗师</h5><p>介绍：<a href="https://ilkavelle.wixsite.com/simsquest/post/healer-magic-career" target="_blank" rel="noopener">https://ilkavelle.wixsite.com/simsquest/post/healer-magic-career</a></p><p>下载：<a href="https://www.simfileshare.net/download/2010461/" target="_blank" rel="noopener">https://www.simfileshare.net/download/2010461/</a></p><p>治疗师这个职业没有分支，主要的WHF工作内容是给人施放治疗咒语，以及做魔药和给人魔药。不过这个mod并没有限制你给人的魔药一定要是治愈相关的，给人一瓶黑魔药同样能完成任务，所以理论上如果你的剧情中有一个走魔药路线而不是魔咒路线的黑巫师，比如投靠邓布利多前的斯内普，那么也可以用这个职业来扮演。</p><p>治疗师这个职业的特殊优势是，随着职级的增长，会学到几个系统定义以外的魔咒。其中最实用的应该是3级的时候会的减肥魔咒；此外，4级的时候会一个需求全满魔咒，这样就不用每天熬苹果汁儿了；5级的时候会一个治疗魔咒，除了能治疗一切m4的病症外，还能治疗真实生活（Slice of Life）mod里的病症；8级的时候会一个终极治愈咒，可以消除一切病症一切负面情绪一切诅咒，包括丛林探险dlc里的诅咒，不用为凑不齐去诅咒魔药和去负面情绪魔药的材料而烦恼了。</p><p>值得特别注意的是，治疗师职业的所有咒语，只能用来治疗他人，没法用来治疗自己，这个设定虽然一方面很单身狗不友好，另一方面还蛮适合story-telling的。</p><h5 id="魁地奇球员"><a href="#魁地奇球员" class="headerlink" title="魁地奇球员"></a>魁地奇球员</h5><p>介绍：<a href="https://ilkavelle.wixsite.com/simsquest/post/quidditch-career-event" target="_blank" rel="noopener">https://ilkavelle.wixsite.com/simsquest/post/quidditch-career-event</a></p><p>下载：<a href="https://www.simfileshare.net/download/1948118/" target="_blank" rel="noopener">https://www.simfileshare.net/download/1948118/</a></p><p>有守门员、追球手、击球手、找球手四种分支，据介绍有魁地奇相关自定义动画，我装了还没玩过，以后再补充。</p><h5 id="魔杖制作师"><a href="#魔杖制作师" class="headerlink" title="魔杖制作师"></a>魔杖制作师</h5><p>介绍：<a href="https://ilkavelle.wixsite.com/simsquest/post/wandmaker-career" target="_blank" rel="noopener">https://ilkavelle.wixsite.com/simsquest/post/wandmaker-career</a></p><p>下载：<a href="https://www.simfileshare.net/download/1976640/" target="_blank" rel="noopener">https://www.simfileshare.net/download/1976640/</a></p><p>可以在木工台上做魔杖，有的魔杖不需要额外的材料，可以直接制作，有的魔杖需要额外的材料，必须有材料才能做，有些魔杖需要的材料很简单，比如任意水晶；有的材料很稀有，比如死神花；甚至还有的材料是不直接显示的，你没法看到需要的材料是什么然后去找，只有在小人的随身清单里恰好有这个材料的时候，点木工台会看到材料已集齐可以做出这根魔杖了，这给游戏增加了一些类似于炼金的玩法元素，从满地图采集、种植、去魔法街撞运气看能不能扫到货，到试出一些高阶的魔杖材料配方（虽然一向缺乏耐心的我至今还没试出那两个隐藏配方中的任何一个。</p><p>不同于前面的那些巫师职业，魔杖制作师职级只有3级，一开始能做的魔杖很有限，升职后能做的魔杖种类会增加。做完魔杖后有不同的方式卖掉，一种是直接拖到随身清单的卖出那里卖给系统，另一种是在和其他巫师小人互动的时候选择卖魔杖这个互动选项，或者把魔杖放在柜台上指定卖给谁，用互动方式卖给巫师的金额是卖给系统方式的翻倍，但只能卖给巫师。</p><p>特别值得指出的是，即使没有选择魔杖制作师职业，任何一个巫师小人，包括还在读魔法学校的小巫师，都可以在木工台上做魔杖，罗恩终于不用再用他坏掉的二手魔杖了，他可以在木工台上用成品魔杖1/5的价格自己做一根。只是如果不是魔杖制作师，能做的魔杖种类会比较有限，只能制作不需要材料的几种魔杖，而且卖出的金额也要比专业魔杖制作师做的魔杖价格更低，还只能卖随身清单，不能通过互动卖掉。但是，我发现这个mod和在家开店mod是兼容的，可以把制作好的魔杖设为在家开店的商品，这样在设定在家开店100%利润的情况下，收入和专业的魔杖制作师是一样的，而且非巫师也会购买，如果做非职业魔杖制作师可做的最贵的那种魔杖，净利润大概是600块，制作耗时1个半小时，对应时薪大约是400块，其实已经好过M4的绝大部分系统职业的初中级阶段了，如果是玩儿一个因继承了父母留下的戈锥克山谷房子而需要每周交大笔地税，但又因为放出了龙而被古灵阁拒绝进入的哈利；或者是玩儿一个父亲进了阿兹卡班(假设)母亲精神崩溃进了圣芒戈，但(假设)因为没成年打不开马尔福庄园藏宝室，却又得每周支付巨额庄园运转开支的德拉科时，每天喝精力魔药上8小时课写2小时论文剩下的14小时用来没日没夜做魔杖，会是一种比起和人赏金决斗来说，更不容易最后没钱交每天的学费只能去兔子洞上学的选择，如果不选择种火龙果或者写书画画，而是选择更巫师的方式的话。</p><h5 id="魔法扫帚制作师"><a href="#魔法扫帚制作师" class="headerlink" title="魔法扫帚制作师"></a>魔法扫帚制作师</h5><p>介绍：<a href="https://ilkavelle.wixsite.com/simsquest/post/broomstick-maker-career" target="_blank" rel="noopener">https://ilkavelle.wixsite.com/simsquest/post/broomstick-maker-career</a></p><p>下载：<a href="https://www.simfileshare.net/download/1972246/" target="_blank" rel="noopener">https://www.simfileshare.net/download/1972246/</a></p><p>和魔杖制作师类似，只是制作的从魔杖变成了扫帚，不多赘述。经测试，在家开店mod同样与它兼容。</p><p>这一系列模组是只需要本体和魔法世界dlc就可以运行的，不需要其它额外的资料片。体感运行非常稳定，不同于我试过的另一个玩法很有意思但一装进去电脑就疯狂发热卡顿的魔法类mod，这系列mod安装后运行非常丝滑。我在玩的过程中有遇到一些小bug，但影响不大，大多有办法可以规避，目前为止我发现的有：</p><p>1）每日课堂事件里的问教授问题任务，最好是一对一单独问教授，如果是在多人对话中问教授问题，可能会无法完成任务；</p><p>2）同样的跟同学互动也是，如果多人对话中有魔法学校的学生，也有不是学生或教授的普通路人，那么有可能无法完成任务，最好单独与魔法学校的同学对话；</p><p>3）每日课堂事件可能会刷出一个读一本书的任务，这个任务的bug是这一系列模组里唯一目前为止我没有找到规避方法的bug，主要表现为怎么看书这个任务都无法完成，不过即使不完成这个任务，对每日课堂事件的影响也不大，只是拿不到金牌，但每日课堂事件拿到金牌也没额外奖励，所以也就无所谓了。</p><h5 id="哈利波特世界地图"><a href="#哈利波特世界地图" class="headerlink" title="哈利波特世界地图"></a>哈利波特世界地图</h5><p>最后，如果也喜欢哈利波特，推荐个由一群玩家（发起人：simproved）一起制作的哈利波特世界地图（介绍视频：<a href="https://www.bilibili.com/video/BV1AV411t7bE" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1AV411t7bE</a>) 。</p><p>地图是用温登堡改建的，除了一张温登堡的大地图图片（ 作者：nandoandstitch ）是CC以外，整个地图上的所有建筑和角色都是NoCC的，建筑除了霍格沃兹外，还包含有几乎所有剧情提到的店铺的对角巷、翻倒巷、有地道和龙的古灵阁、有摄魂怪的阿兹卡班、有一个看上去平平无奇的地面建筑和一个丰富的地下世界的魔法部等等等等，还原度超高，捏人包含了几乎所有哈利波特的主要角色和重要配角，甚至包括乌姆里奇、丽塔、德斯礼一家等等。</p><p>下载方式有两种，一种方法是可以下载发起人simproved打包的已经放置好所有房屋和角色的存档（下载地址： <a href="https://simfileshare.net/download/2239341/" target="_blank" rel="noopener">https://simfileshare.net/download/2239341/</a> ），直接进入他打包的存档玩。</p><p>另一种方式是可以在工坊搜索这个项目的tag（项目tag：#harrypotterworld），去逐一下载喜欢的房屋和角色放置在地图中，这种方式的好处是，因为温登堡的地图是有限的，所以有好些作品并没有被包含在存档中，比如存档地图中只有霍格沃兹这一所魔法学校，而这个tag下你会看到另一所魔法学校布斯巴顿，以及好几个其他版本的霍格沃兹，可以从中选择自己最喜欢的版本，再比如马尔福庄园在温登堡存档中是用的一块30x40的用地，而这个tag下还有更大更符合马尔福庄园设定的50x50用地的版本，这个tag下面还有一些温登堡用地不足存档放不下的建筑，比如蜘蛛尾巷，捏人方面，这个tag下有不同作者捏的不同版本的角色们，可以从中选自己最喜欢的版本来下载，除此之外，这个tag下还有一些捏好了但因为和存档时间线不同而没被放在存档里的角色们，比如年轻时候的詹姆小天狼星卢平小矮星彼得四人组等等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;作为一个哈利波特迷，我一直很喜欢魔法相关的玩法，从M3开始也一直非常喜欢用HP里的人物开展剧情，但M4的魔法dlc完成度比较差强人意，虽然有很多很有意思的设定，但魔法世界的玩法本身并不大完整，在小人学会所有咒语和魔药配方后就不知道该干啥了，如果去过非巫师的M4生活会感觉咒语</summary>
      
    
    
    
    <category term="Game" scheme="https://brielley.github.io/categories/Game/"/>
    
    <category term="Sims" scheme="https://brielley.github.io/categories/Game/Sims/"/>
    
    
    <category term="Gamer" scheme="https://brielley.github.io/tags/Gamer/"/>
    
    <category term="The Sims 4" scheme="https://brielley.github.io/tags/The-Sims-4/"/>
    
    <category term="HP" scheme="https://brielley.github.io/tags/HP/"/>
    
  </entry>
  
  <entry>
    <title>已安装的steam版The Sims 3在origin激活时如何避免重复安装</title>
    <link href="https://brielley.github.io/2021/01/03/game-sims-3-avoid-install-twice/"/>
    <id>https://brielley.github.io/2021/01/03/game-sims-3-avoid-install-twice/</id>
    <published>2021-01-02T17:05:01.000Z</published>
    <updated>2021-03-25T12:12:49.961Z</updated>
    
    <content type="html"><![CDATA[<p>1.激活的时候不仅要输本体的序列号，每一个资料片的序列号都需要逐一激活。steam中查看序列号的地方在<code>库 - The Sims 3 - 管理 - 序列号 - 复制序列号至剪贴板</code>。origin中激活序列号的地方在<code>origin - redeem product code - 粘贴序列号 - next - confirm - close</code>，从本体开始挨个激活，confirm之后默认的按键是download，不要点它！直接点旁边的<code>close</code>就好。</p><p>2.激活完本体和所有资料片的序列号后，origin会提示下载游戏才能打开。这时不要下载！否则origin会重新下载一个steam版M3以外的M3包，导致电脑上安装两个M3，造成硬盘大缩水。直接去origin的<code>my game library</code>里，选中M3的图标，<code>右键 - locate game</code>，然后指定<code>你安装steam的位置/steam/steamapps/common/the sims 3/</code>这个文件夹，指定后，origin会出现个正在<code>verify game</code>的进度条，进度快完成的时候会弹出一个下载小更新包的提示，点同意后origin会升级M3启动器，在里面增加一个启动的时候可以勾选要启动哪些资料片的一个实用小功能。</p><p>3.在verify过程完成后，你会发现从origin里打开M3，只能看到后期的资料片，那些早期的资料片全都不见了。而origin会提示你没看到的dlc请去下载安装，不要点下载安装！不然会把这些资料片在电脑上装两份儿。这些资料片只是没被origin识别到，没识别到的原因是因为steam给资料片文件夹命名成的是EP1, EP2, EP3…，而origin只能识别到EP01, EP02, EP03…，于是origin就只自动识别到了EP10以后的资料片。解决办法是去<code>你安装steam的位置/steam/steamapps/common/the sims 3/</code>文件夹下，把EP1, EP2…,EP9这些文件夹，全部手动重命名为EP01, EP02,…EP09，然后重启M3启动器，就会发现所有的资料片都有被识别到了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.激活的时候不仅要输本体的序列号，每一个资料片的序列号都需要逐一激活。steam中查看序列号的地方在&lt;code&gt;库 - The Sims 3 - 管理 - 序列号 - 复制序列号至剪贴板&lt;/code&gt;。origin中激活序列号的地方在&lt;code&gt;origin - rede</summary>
      
    
    
    
    <category term="Game" scheme="https://brielley.github.io/categories/Game/"/>
    
    <category term="Sims" scheme="https://brielley.github.io/categories/Game/Sims/"/>
    
    
    <category term="Gamer" scheme="https://brielley.github.io/tags/Gamer/"/>
    
    <category term="The Sims 3" scheme="https://brielley.github.io/tags/The-Sims-3/"/>
    
  </entry>
  
  <entry>
    <title>Unity项目画质改进的一些思路</title>
    <link href="https://brielley.github.io/2021/01/02/tech-game-dev-unity-vfx/"/>
    <id>https://brielley.github.io/2021/01/02/tech-game-dev-unity-vfx/</id>
    <published>2021-01-01T17:48:35.080Z</published>
    <updated>2021-03-24T09:07:31.374Z</updated>
    
    <content type="html"><![CDATA[<p>用Unity做游戏一段时间应该都会发现，默认的画质会有一种仿佛表面蒙着一层白纱一样的泛白不清晰的感觉，即使把画质调到内置最高的ultra quality了还是会这样。虽然一般来说一开始选了unity而不是unreal来做游戏的人，基本上也没有在画质上有太高的追求，但这种仿佛眼镜花了一样的感觉还是会让人忍不住想要找块布来把眼镜擦擦干净。于是这篇笔记并不是面向对美术有高要求的人群，也不用于已有基础者进阶，而是对像我一样无论是在美术上还是在计算机图形学上都没什么基础也并不对游戏的美术质量抱太高要求但又希望能够一定程度改善画质的人，提供的一些最基础的画质改进思路。</p><p>一个比较彻底改善画质的思路是改渲染管线。unity有三种渲染管线，分别是默认的build-in render pipeline、universal render pipeline、high definition render pipeline，三种画质依次提升，同时吃硬件也依次提升。吃硬件这个问题特别值得拿出来说，因为是真的非常吃，我的电脑是4年前买的主流配置游戏本，960的显卡在如今已经没法玩新出的3A单机了，但玩守望先锋这样的游戏是不卡的，玩模拟人生4这样的游戏更是开最高效也很流畅，但是，一旦使用universal render pipeline，一个模型素材只有仅仅50M的低模游戏项目，设置medium quality运行不到1分钟就会明显感觉到卡顿，而且电脑发热严重，所以除非是定位超级硬核的游戏，还是不要考虑直接用urp做游戏了。urp开低效的话吃硬件程度稍好一点，但强烈不推荐，因为低效的影子锯齿严重到把抗锯齿调到最高也还是不行，视觉效果上还不如好好倒腾下的build-in，但比build-in的哪怕最高效也更吃硬件一点，非常得不偿失。但实测感觉urp的中效确实比build-in的最高效效果更好，如果希望做一个不吃硬件的游戏，又希望尽可能适当提升画面质量，我感觉比较实用是思路是只用urp开中效或者如果设备支持的话开高效做开头结尾过场动画，录成mp4格式的视频，通过raw image把视频直接嵌入build-in做的游戏项目中。而在build-in的主体项目中，尽量通过后期处理来提升画质，或者说修正那些画质中需要眼镜布擦一擦的地方。</p><p>我目前为止试出的在build-in项目里最具性价比的擦眼镜做法是：</p><p>1.把color space从gamma调整为linear。linear比gamma能从肉眼上直观感觉到细节的增加和泛白的减少，但不足之处是会让色调整体变暖。</p><p>2.安装unity可选包里的post-processing，设置一个global volumn，挂color grading组件，把tonemapping mode设置为aces模式。aces模式一改以后，会有一种画质瞬间上升两级的感觉，而且蒙着的白纱完全消失了，但不足之处是会让亮度整体变暗。</p><p>3.这步主要不为擦眼镜，而是为调整前两步的副作用。<br>3.1.对1导致的画面泛黄，用color grading里的white balance来调整色温；<br>3.2.对2导致的画面变暗，用color grading里的post-exposure来调亮，如果在使用post-exposure后发现总体亮度合适了但高光部分不够亮或阴影部分不够暗，就再结合color grading里的contrast来调整至理想的高光阴影亮度；<br>3.3.如果觉得擦眼镜后的画面过于清晰，不便于表现富于层次的近中远景，可以在lighting setting里勾选fog，模式改为线性，然后调整可见度距离至合适数值，来让中远景随距离逐渐模糊。不建议用post-processing里的depth of field组件来模糊中远景，除非是2D游戏或者是锁镜头的3D游戏，否则会很可能导致晕3D，尤其是在第一人称模式下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用Unity做游戏一段时间应该都会发现，默认的画质会有一种仿佛表面蒙着一层白纱一样的泛白不清晰的感觉，即使把画质调到内置最高的ultra quality了还是会这样。虽然一般来说一开始选了unity而不是unreal来做游戏的人，基本上也没有在画质上有太高的追求，但这种仿佛</summary>
      
    
    
    
    <category term="Tech" scheme="https://brielley.github.io/categories/Tech/"/>
    
    <category term="Game Dev" scheme="https://brielley.github.io/categories/Tech/Game-Dev/"/>
    
    
    <category term="Game Dev" scheme="https://brielley.github.io/tags/Game-Dev/"/>
    
    <category term="Unity" scheme="https://brielley.github.io/tags/Unity/"/>
    
    <category term="Pipeline" scheme="https://brielley.github.io/tags/Pipeline/"/>
    
    <category term="PostProcessing" scheme="https://brielley.github.io/tags/PostProcessing/"/>
    
  </entry>
  
  <entry>
    <title>捋捋值得入的The Sims 4资料片</title>
    <link href="https://brielley.github.io/2020/10/21/game-sims-4-dlcs/"/>
    <id>https://brielley.github.io/2020/10/21/game-sims-4-dlcs/</id>
    <published>2020-10-21T13:20:12.000Z</published>
    <updated>2021-03-25T13:47:10.731Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个玩了上千小时的模3超级粉丝，模4刚出的头几年我是拒绝的，没有地形，没有无缝地图，卡通而非写实的美术风格，都让我每次点开它不到1小时就退出重新打开了模3。最近这两年似乎我终于对卡通风格完成了类似于当年对极简风格的从抗拒到顺眼到喜爱的潜移默化，加上steam版模3虽总算不闪退了，但右上角总是以逼死强迫症点燃炸药桶的频率反复刷出一个让人分享到社交媒体关掉又弹出关掉又弹出堪比流氓软件的提示框，让我经常想玩模3的时候想想还是干脆点开模4看看……然后我发现不知不觉我玩模4的时间越来越长了，一旦静下心来玩之后，模4的一些闪光点也逐渐凸显出来。整体来说，模4在可玩性上确实是不如模3的，但模4的特有玩法中也并不只是有情绪系统、分步拆解终身期望这类很容易直观感受到的可玩性不高系统。在玩了很久之后我才发现模4最好玩的系统其实是地段特征，当然，它的好玩要配合资料片，这就说到模4里我最推荐的一个资料片，猫狗总动员。</p><p>我最喜欢的地段特征是这个资料片里提供的dog hangout和cat hangout，打开以后家里会隔三岔五跑来一大群小流浪，冰箱上橱柜上全是猫，沙发上地毯上全是狗，有的会非常主动的找你玩，在你的沙发上床上睡觉，不客气地吃你还没来得及放进冰箱的食物，有的则非常矜持地在门外站着，要你主动去问过好了才进门，但一旦你问过好后顺手pet一下它立马就变成了friends，出现了adopt选项，而别的已经一起玩了好久的猫遛了几次的狗还是acquaintances呢。</p><p>模4比起模3的宠物资料片，最大的变化是宠物不再是可主控角色，我觉得这个改动让游戏更好玩了，因为宠物的traits开始确实发挥出作用，比如说，一个有stubborn特征的狗狗，无论你是lecture它不要去尿里打滚，还是beg它不要去，它都会继续我行我素，而如果可控，那么这个trait就毫无意义，切到狗狗视角去取消当前动作就好了。这个改动导致的另一个很大的变化是，主控小人和宠物之间的互动增加了，过去模3的时候经常是同一屋檐下小人和宠物各玩各的，只例行公事地每天刷次毛，而在模4，没有宠物主控视角，宠物的很多基本需求条是需要在和小人互动中完成的，比如一开始宠物不知道去哪里上厕所，也不知道去吃狗碗里的粮，需要小人去call to eat或者ask to go potty，在模4特有的情绪系统里，有时宠物也会sad或者afraid，需要小人去cheer up或者calm down。另外，我发现模4特有的多任务处理系统，在一边做事一边社交上，和宠物是兼容得最好的，主控小人一边吃饭一边和宠物互动，除了一次玩fetch以外我没有遇到过bug，主控小人一边在电脑前办公一边和猫猫对话也尤其丝滑，因为猫猫会自己跳到电脑边的岛台上去保证对话的顺利进行，而这个系统在别的好些地方简直灾难，最典型的莫过于大学资料片里的一边写作业一边和人聊天，bug多到你永远不知道为什么小人会走到哪里去写作业，导致社交无法完成或无法取消也就罢了，作业本还丢了……说到这里多说一句大学资料片，模3的大学资料片对我来说属于强烈推荐一类，但模4的实在强烈不推荐，全是兔子洞、毕业最快也要3周、只花钱不挣钱（对比模3的大学资料片里2周下来能挣5w+奖学金，模4是3-4周下来即使有奖学金也得倒付点学费住宿费）、宿舍没灶台必须卡着点去食堂、即使研究技能满级写完一门课的作业也要2小时而4门课就是8小时再加上写论文改论文写pre改pre除了钻兔子洞永远在赶作业这些都是小事，关键是bug实在太太太太太多了，作业本总是丢失、想社交却跑到奇怪的地方写作业导致社交无法完成、想不要社交赶快把作业写完却总是被社交取都取消不完、小人走到上课的兔子洞门口了但卡在那儿进不去硬生生在教室门口错过一堂课被教授警告要挂科、宿舍冰箱里明明囤了一份饭点从食堂打包回来的食物但点冰箱死活就不出get leftover选项导致还是没得吃等等等等，简直集bug之大成。</p><p>说回宠物资料片，这个资料片提供的另一个玩法是开宠物诊所，就宠物诊所本身的玩法来说，比较乏善可陈，和模4的另两个资料片提供的开零售店和开餐厅的玩法一样，甚至和模4非兔子洞上班的那几个职业一样，乃至可以说和模3岛屿资料片的开度假屋玩法一样，都非常机械，稍玩几小时就不想再玩了。但对模4来说，开店的实用性其实在于避税。模3时代的账单从来不是一个大问题，记得那时有一个非常有名的玩家发起玩法，叫末日挑战，其中有一项是说邪恶帝国的女王奥托薇拉会向市民们每周收取家具价值10%的保护费，需要如何如何才能打破她的邪恶统治，而在模4，每周系统通过信箱送达的账单数额已经接近了这个数字，而在职业初期时薪还不到20刀的时候，mod大神们的那些搭得超级漂亮的10w出头的2b2b小房子动辄每周账单超过5k，即使free real estate住进去了，不motherlode根本交不起税，而如果把它的类型改为宠物诊所，不需要增设任何不需要的家具，反正你可以不开门营业，但这栋你的主控小人长住的建筑就不需要交税了，需要交税的仅仅是你买的一块永远不会去住的沙漠里的价值1k5的空地而已。但改成宠物诊所也有成本，成本在于当地段属性是宠物诊所时，cat hangout和dog hangout的地段特征会变得不可选，但还好的是地段属性和特征随时可改，初期付不起账单的时候设成宠物诊所，后期账单不是负担的时候改回普通住宅再打开相应特征就可以了。</p><p>宠物自带的地图虎斑湾可以列到我最喜欢的地图前三，在码头的猫吧里撸猫，在堆积的集装箱上找自娱自乐跳箱子的小流浪，吃路边摊的龙虾卷和海鲜粥都挺有意思，其中龙虾卷是厨艺1级而且不需要灶台就能做的，不吃一次学会它感觉就太亏了。虎斑湾地图的右上角那两块山脚下的30x20地块虽然本身是平的，但因为背靠高山，在这里放依山而建的吊脚楼特别浑然天成，对钟爱模3时代的悬崖边建筑的人来说，模4里没有比这里更想让小人住的地方了。右下角岛上的博物馆往上山的方向走有个灯塔，在灯塔上看海上日出特别美，再往后山走的墓地里也有宠物的墓碑，往下山的方向走到海边有船，可以坐船回到码头，我个人很喜欢这个设计，虽然本质都是读条，但坐连接两个地点的船读条似乎比拉远镜头点travel按钮跳到大地图点目的地读条的体感要好很多。宠物资料片的家具是乡村风格的，虽然没吸血鬼资料片的家具那么精致，没岛屿资料片的家具那么特色，但超级无敌实用，从墙纸到壁炉从椅子到床头柜，对我来说使用率高到只要盖房子就会用，而且和各种风格都可以自然地搭在一起毫无违和感。宠物资料片的服装和发型不算特别好看，大概好的角色美术都去做猫猫狗狗了，分到服装发型的就比较普通，有些衣服比较一言难尽，但也有几件还不错，对我来说也有一定的使用率，比起有些服装全灭的资料片来说，算比上不足比下有余吧。</p><p>总的来说，如果我只能买模4的一个资料片，那么我一定会毫不犹豫地选宠物。这是一个模4资料片里少有的从玩法到地图到家具美术到稳定没bug上都让我非常满意的dlc，而其它的资料片则往往只在某一两个方面做得不错，而在另一两个方面让人头秃。</p><p>在那些优点与缺陷并存的资料片中，我个人觉得总体来说瑕不掩瑜的主要有岛屿和四季。</p><p>四季资料片一直被戏称是从本体自带的功能里硬拆出来多收一次费。确实如此，这是模4少有的不带地图的资料片（特指EP，不包含GP和SP），提供的物品家具里除了装伞的桶子这种要打伞就一定得有的功能性物品其它都挺…反正我盖房子的时候几乎想不到用，这个资料片所提供的主要就是功能，而这些功能里，有不可缺少的，也有很难评价的。四季资料片所提供的一个不可缺少的功能是天气系统，当没有这个资料片的时候，我完全没有打开年龄增长的冲动，因为每天都是一样的重复。而且天气本身是有表现力的，深秋小人冷得直哆嗦的大雨天里，你很难做到不把路过家门外的一只脏兮兮的小狗抱回家，而在本体那万年如一日的太阳底下，一切就不一样了，甚至你都未必能注意到门外的草丛里跑过了一只行色匆匆的小狗。看到第一场雪的时候，不止是电脑里的数据，连电脑外的人也会感到兴奋。而在连续多天阴雨之后，真的会有冲动去那些阳光充足的地图度假。天气系统是另一个我觉得模4少有的比模3做得更好的几个系统之一，美术上更好看，尤其在电脑配置不太高的情况下，换季时的过渡要更自然一些，打伞时的bug更少，模3开关伞的时候总是容易卡顿导致我后来都干脆让小人淋雨了。 天气系统也改变了一些别的系统，比如我不知道应该算好的改变还是坏的改变的种植系统，装了四季以后，种植得应季才能有收获，而且收获量也比之前大幅调低了，以前种一稳定收十，现在收三就可以收四就偷笑收五就烧高香运气不好就一或者二，由此带来的好处是游戏更细腻了，坏处是赚钱的途径变少了，在本体设定下，满地图摘花种在家里是一个在初期平衡收支攒钱换房的最佳选择之一，而在有四季资料片的时候，与其指望种植，不如还是老实自己写书画画吧。如果你不想用那个近乎bug而且特没意思的开俱乐部哄骗一群绘画2级以上的人来免费画画给你卖的话。四季的另一个我觉得很难评价好坏的系统是日历规划，模4的四季继承了模3四季的节日系统，而模4做的改变是哪天过节节日都要做什么，不再是系统给出（虽然系统也有提供一套默认初始的），而是你自己决定。于是就产生了日历规划系统，提前规划好一年的哪些天是什么节日，节日活动都有什么。好处是可以把小人正好要做的事情放在节日活动里，这样不但做了本身要做的事还有额外的buff，有的buff比如说技能日技能增长速度翻倍那种是真香，坏处是，这种在游戏里自己给自己做计划，自己给自己发奖励的玩法，让人感觉特没劲。游戏里的小人在节日快到的时候，会出现一个期待节日的buff，而游戏外的我就只觉得……哦。</p><p>模4岛屿资料片的最大亮点和模3岛屿资料片的最大亮点一样，在于美术和地形。不过模4的岛屿比较特殊的点在于，由于模4整体就没什么地形，于是这个资料片显得尤为可贵。虽然无论如何，模4的岛屿资料片中的地形也没法与以此著称的模3相比，但至少从视觉上缓解了从柳溪到绿洲放眼望去一马平川的审美疲劳。虽然宠物资料片里也有带地形的丘陵和山壁，但地形起伏的主要是对用地来说差不多是中景的环境，用地本身和用地周围还是平的，虽然某次更新后可以在用地做出地形了，但用地这块土地上做出高低起伏，而用地周围的近景又是一马平川，直到更远的中景才继续有山峦起伏……除了少数工坊大神能在这种设定下把用地地形与近景中景都巧妙融合得浑然天成以外，大部分时候这种地形脱节带来的体验并不太好。而岛屿则是用地的地形和用地周边近景的地形是一致起伏的，并自然延伸到中景和远景，这让做出一个有地形的视觉上和谐的小房子的门槛下降了不少。而且岛屿可以和狗狗一起去海里游泳！从美术上来说，我觉得岛屿资料片的地图是模4现今为止的所有dlc中最审美在线的，对比之下，另一个理论上也应该以美术见长的地图温登堡就实在让人爱不起来，虽然有自然风景不错的区，但建筑实在不是它家做维多利亚风格的一贯水准，模4的维多利亚风格地图建筑做得最好的是遗忘山谷，不知道温登堡做成那样是不是为了和遗忘山谷做出差异化，但遗忘山谷虽好看，毕竟吸血鬼地图光照不太足，而且即使是就以地图小房屋少闻名的模4来说，遗忘山谷的地图也太小房屋也太少，综合下来美术最佳的还是岛屿了。岛屿这块地图的另一个好处在于，如果安装了四季资料片，那么岛屿这块地图上不会有极寒热浪一类的极端天气，对于模4这个各项设定都在把小人变成阿宅的游戏来说，少了一个不出门遛狗跑步采集挖矿的借口。而模4岛屿资料片的缺点，在于玩法实在乏善可陈，我怀念模3岛屿资料片里那些可以开到大海任何地方的船屋，看着小人开着船屋满大海找无主的新岛屿，然后再一点点建设这些漂亮的小岛，也怀念模3岛屿里的度假屋，玩流浪汉挑战的时候只需要几十刀一晚的住宿简直不能更友好。最近的更新里模4本体增加了把房子设定为度假屋的系统，但在这个系统下，每天相当于房屋价值1%也就是一个价值10w的房屋日租金要1k的房费，以及更重要的在租屋里居住期间没法去兔子洞上班甚至连那些支持wfh的职业也不能远程办公，让这个系统真的只能字面意义上用来玩“度假”了（但其实原本这个新出的地段类型不叫resort而是叫rental的不是吗，而模三即使是resort也不会让小人只能在度假时才去住的不是……</p><p>一个如果让我客观评价我会说很值得推荐，只是我个人偏好不太喜欢的资料片是都会生活。其实客观来说，都会比岛屿还要更值得入一些。如果说岛屿的美术A+玩法C-，那么都会的美术和玩法能分别到A和A-。都会的地图有非常无聊的区，光线暗淡压抑，几乎没什么邻里设施，家里还总是跑出老鼠，然后小人就会吓到停止手上的事情外带好一阵的debuff；或者特别高放眼望去就只看到亮得晃眼的天空，反光的玻璃墙，和斜下方一览众山小的房顶们，家具全部冷冰冰。但也有非常有趣的区，窗外能看到阳光也能看到闪电，能看到广场上卖艺的歌手，聚集的人群，不时有车进站的轻轨和跟着主人走过的猫狗；或是预装得像我这样玩这游戏一半以上时间都在盖房子的人也觉得没啥可改的能直接让小人住进去的漂亮房屋。即使不住在这个地图，这个资料片里的很多家具对我来说也有很高的使用率。都会和另一个以职业为主题的资料片来去上班一样，提供了三个额外的职业，这三个职业不像来去上班一样会跟随小人到一块专门的工作用地，但都可以选择远程在家办公。我个人觉得模4的远程办公是比跟随上班更好的职业系统，当然，最烂的系统是兔子洞，在模4普遍比模3每天工时长3小时、兔子洞回来往往还带各种负面情绪debuff需要顺毛、顺毛完还有第二天上班前的额外每日任务与升职任务的设定下，如果没有精力回复8以上的床铺，选择兔子洞简直自虐模式，而跟随上班系统我觉得和模4的开店系统一样，都比较一言难尽，从模3到模拟城市再到模4，我觉得它家做life sim和construction sim都很不错，但做management sim是真的不行，而远程办公系统是职业系统中你能想到的也许最扬长避短的好点子（严格来说如果让我自己想我可能不一定能想到这个点子，但如果让我再想一个更好的我感觉也想不出了，模3时代的建筑设计师职业也是一个超好的点子，可惜在没有开放地图的模4很难复制，模4的北欧资料片里有个类似的职业城市规划师，但玩法的内在逻辑完全不同）。都市的另一个主要的玩法是庆典，我觉得在模4所有的社交活动里，它是做得最好的一个，在庆典上小人可以选择跟人互动，也可以选择跟物品互动，互动的结果都会是飞快的技能增长，而如果原本技能值就很高那么还可以参加比赛拿奖品，如果原本技能值不够高，那么在庆典上可以提前体验到一些原需高技能才能体验到的项目。我觉得这比看起来好像自由度很高但其实玩法毫无自由度可言的俱乐部系统，以及更可怕的三阶段分步骤详细目标清单的约会系统要好太多了。而且庆典的玩法和很多别的玩法，比如几个都市专有的职业尤其是critic职业的wfh assignment，比如都市这块地图最主要的收集项目各地美食食谱等等结合得比较好，而模4的其它大部分社交活动玩法都显得相对独立。另外一些小细节上，都市包提供了一些很实用的互动物品，比如游戏主机、墙壁喷绘版、卡拉ok机，实用性都还挺高的，尤其游戏主机，如果主控是一个小人又不想总邀请npc来家里，那么想要玩游戏的时候同时增长娱乐条和社交条，主机的实用性挺高的，虽然也可以一边玩pc游戏一边发短信，但一直手动点点点短信的体验不是太好。尽管玩法和美术都可圈可点，但我个人对都会这个资料片主观上不是太喜爱，主要原因一是养宠物会很不方便，和模3时代一样，我不明白为什么明明公寓的室内空间也不是狭窄得没处下脚，和宠物进行的互动也并不怎么需要空间（不是play fetch那类互动），模4对被家具卡住这方面的优化明明做得还可以，但一旦到小人和宠物互动，它们就会开始按电梯然后跑到十万八千里外去；二是一些无法取消的地段特征，主要是噪音和老鼠，而且它们往往还分布在一些原本很漂亮的房子里，其实理论上这应该是玩法的一部分，应该会有很多人喜欢这种让人又爱又恨的美丽缺陷，就像我很喜欢模4里带stubborn特征的狗狗，但不知道为啥我对后者很喜欢对前者就只觉得好烦。总的来说，排除个人的感情偏好，都会是一个和四季和岛屿一样值得推荐的资料片。</p><p>最后安利一个不是资料片但对我个人来说属于不可缺少的物品包，蜗居。模3时代我是完全不考虑任何物品包的，一是因为模3时代官物的美术其实比起那些做得最好的玩家自制物品来说是有不如的，二是因为物品包就是物品基本不带玩法和功能。而模4的蜗居包其实对我来说不可缺少的是它提供的功能，而不是物品。这个物品包提供一种新的用地类型tiny home residential，在这种用地类型下，如果房屋的室内空间低于100格能账单打折，低于64格能账单半价外加技能翻倍，低于32格能账单半价和技能翻倍以外关系条增长翻倍和作物成熟速度翻倍。这个功能实在太香了，尤其是初期。其实如果是在模3时代，这种功能再香我也不可，因为3的碰撞检测范围有点大，物品如果摆放得稍微紧凑一点，那么小人就会卡住动不了，而4的碰撞检测范围变得很小，虽然坏处是偶尔会观察到穿模，但好处是小人基本上不会被卡住，而且我感觉4的各项设定都在鼓励建小房子，首先是阶梯制的账单；其次是多任务处理系统，房子紧凑一点能更方便小人同时做好几件事，而不是在做这件事时使用的家具超出了另一些家具的使用范围而无法同时使用；另外，如果是柱子撑起来有房顶遮雨的凉亭这种半室外空间，是不计入格子统计的，于是基本上可以只把卧室和卫生间放在真室内，壁炉沙发炉子餐桌电脑画架钢琴这些全都可以放在凉亭一类的半室外空间，不会被雨淋到，而且凉亭和我喜欢的山地地形实在太搭了，取消无缝后，模4的光照渲染能肉眼看出比模3有提高，白天户外的自然光线我感觉比室内要更层次丰富一些，尤其在结合季节资料片以后。这个物品包的本职物品属于中上的范畴，够不到特别好的主要原因是家具主要是极简风格，而从模3开始它家做极简风格的水平就真的不太行，但这个物品包至少比北欧资料片里的极简家具要好很多，北欧资料片里的好些家具让我森森怀疑模4莫不是个low-poly风格的游戏，而蜗居包至少不会让我产生这种错觉，里面的有些家具的使用率对我来说还不错，比如厨房和卫生间的墙架以及适配三种天花板高度的极简组合吊灯，几乎我玩过的每个小房子都能用上。相对来说，这个物品包的服装倒是比较得我心，我觉得这个包的线衫中好些都很不错，比理论上应该有最好看线衫的物品包针织里的线衫们更好看一些，其中有一件冬天也可以用的大毛衣几乎是我每个小人的冬季室外必备。总之，虽然蜗居是一个物品质量只到中上的物品包，但它提供的玩法我觉得对模4本体是一个很实用的补充，而且和模4的整体设定契合得很好，如果要在GP和SP中只推荐一个，那么我会推荐它。</p><p>最后的最后，如果要玩什么涉及到育儿的十代挑战末日挑战一类，千万千万不要入育儿资料片，如果说模3玩十代挑战育儿资料片必不可少，因为它提供把小孩儿丢去寄宿学校这个省心得近乎bug的功能，那么模4的育儿资料片不但没寄宿学校，还把育儿的难度直线上升到噩梦模式。如果希望减轻育儿负担，比较靠谱的选择是入一个复古物品包，虽然这个包里家具刚过及格线，服装近乎全灭，但是，提供一个对养娃来说非常非常重要的功能，管家。虽然遇到好管家需要靠运气，但反正一直刮总能刮到奖的。</p><hr><p><em>2021.03.25. update.</em></p><p>以上写于游戏时间200h左右，而500h后很多看法有了改变，作个简单的更新：</p><p>1.新增一个超级推荐：同欢共乐。它的俱乐部玩法特没意思，但它的地图温登堡太宜居了，一开始我觉得它很普通，但自从尝试住过一次后，越住越爱，到现在差不多一半以上的游戏时间都是在这块地图渡过的。</p><p>2.移除一个推荐：岛屿生活。刚入它的头几天觉得太美了我没它不行，几周后觉得很美但有点无聊，几个月后想起它还是会赞同它是M4里美术最赞的资料片但完全想不起什么时候用它。</p><p>3.目前推荐的资料片有：</p><p>Tier 1: Must Have:<br>    -Tiny Living<br>    -Seasons</p><p>Tier 2: Highly Recommend:<br>    -Get Together<br>    -Cats &amp; Dogs<br>    -City Living</p><p>Tier 3: Worthwhile:<br>    -Realm of Magic<br>    -Vintage Glamour</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;作为一个玩了上千小时的模3超级粉丝，模4刚出的头几年我是拒绝的，没有地形，没有无缝地图，卡通而非写实的美术风格，都让我每次点开它不到1小时就退出重新打开了模3。最近这两年似乎我终于对卡通风格完成了类似于当年对极简风格的从抗拒到顺眼到喜爱的潜移默化，加上steam版模3虽总算</summary>
      
    
    
    
    <category term="Game" scheme="https://brielley.github.io/categories/Game/"/>
    
    <category term="Sims" scheme="https://brielley.github.io/categories/Game/Sims/"/>
    
    
    <category term="Gamer" scheme="https://brielley.github.io/tags/Gamer/"/>
    
    <category term="The Sims 4" scheme="https://brielley.github.io/tags/The-Sims-4/"/>
    
  </entry>
  
  <entry>
    <title>Software Inc.困难模式的两种破局方式</title>
    <link href="https://brielley.github.io/2020/09/22/game-software-inc/"/>
    <id>https://brielley.github.io/2020/09/22/game-software-inc/</id>
    <published>2020-09-22T10:25:03.000Z</published>
    <updated>2021-03-25T10:55:18.528Z</updated>
    
    <content type="html"><![CDATA[<p>这游戏hard模式和另两个模式完全就像两个游戏……一个是爽文游戏，一个是生存游戏……</p><p>比起easy和medium模式下仅仅是创始人可以满两个半技能还是一个半技能，以及初始资金的差异以外，hard模式表现为不仅创始人只能满一个技能，初始资金0，最重要的是如果不是满技能做出来的软件几乎只会亏钱，甚至技能不够接外包会被bug扣钱扣到负了……</p><p>测试了很多局，发现破局方式主要有两种，一种是创始人的程序技能点满，特长2D，别的技能全空，不贷款，租最便宜的那间房子，第一天接满所有外包，大概有4-5k的先期款，用这笔先期款买必须的办公家具，剩下的钱招一个月薪2k学习能力强的新手美术，让美术上8小时白班，创始人自己上10小时夜班，美术做美术外包，创始人做程序外包，第二个月交了第一个外包有1w资金后，再招第二个新手美术，需要性格和第一个美术合拍，学习能力也尽量高。题外话一句，这游戏对学习能力这项数值的要求太变态了，技能不满做出的软件只能亏钱，但又不能让擅长2d的做2d，擅长音乐的做音乐，而是必须全部啥都做算他们技能的平均值，这样只能把人送去把相关技能全部培训满了才能用来做软件，而学习能力高的，培训不到1年可以满一个方向，学习能力低的，培训5年也满不了一个方向，而总方向有好多个，招一个满技能的程序通常本身就50+了，但只有1个方向满，1-2个方向半，要全部培训满如果是学习能力强还能在5年左右培训完用上，学习能力不行的话培训到退休也用不上，还不如招20出头的总技能不足10%但所有方向都接近全满的小年轻，虽然要差不多10年才能总技能到满，但不需要掏钱脱产培训了，而且还能压榨他们做外包赚钱，提升技能和榨取剩余价值两不误，更重要的是招个满技能的程序再培训到每个方向全满按年限涨工资到能用的时候月薪大概在1w2，而且用不了几年就退休了还得付退休金，而招新手小年轻可以用很多年不说，在满技能能用的时候按年涨起来的月薪才大概8k+，简直没理由不这么做。虽说策略游戏本质是看数值不要联系现实，但仍觉得这个设定太让人无力吐槽以及让它在relatedness上大大减分了。扯远了说回来，继续之前的办法每个月外包全接，这样每个月入账在5-6w，成本5k，这样到夏天的时候可以积攒到25w左右的初始资金。这时看这轮游戏随机刷出的支持2D渲染的操作系统是什么时候出的，有时是79年就出了，这样在80年夏天的现在市场上已经有品质为great的2D editor了，就开始着手做支持2D渲染的游戏引擎，需要招3个满技能的设计做4天才能设计好，招聘费用1w，每个设计月薪1w，总共成本13w，设计完后没有活儿干养不起只好先全部开了以后需要的时候再招（真是让人玩得罪恶感满满的设定），然后创始人开始码代码，再花1w招聘费用请一个满技能的2D美术做美术，这时由于创始人不再接外包，一个月薪6k的满技能美术（说起来，为什么满技能设计和满技能程序的月薪都是1w，但美术就是6k）、两个月薪2k新手美术、一个月薪1k清洁工以及房租水电每周大约1w2的支出，基本靠两个新手美术每月做2个外包扣除品质和bug的扣款入账大约1w5来维持，软件的美术大约4个月后完成，完成后把美术调去和另俩新手美术组队接外包，创始人继续码代码，码完之后修bug，先花1w招聘费用请2个月薪3k的新手程序和1个月薪6k的中级程序，来修简单bug，创始人恢复接外包，这样每个月外包入账恢复为5-6w，成本2w5，每个月能有2w左右纯入，当招来的程序已经修不了bug的时候，让他们做外包，创始人继续修bug，因为招来的程序技能不高做外包bug扣款很多，每个月的外包入账只有2w+，只能刚好覆盖成本，hard模式下，品质再高的软件，也得把bug修到满技能的程序也修不出任何bug的时候才能卖得动，不然就是妥妥的亏钱，这样全部完成大概是81年秋冬，竞品比创始人先发几个月，但品质一般是good到great，而用这个办法做出的创始人家的产品品质在great到outstanding，大约会在几个月内逐渐吸引到竞品家的用户大半转投过来，从而赚到第一桶金，之后就是买地盖房再招两组中带新的程序做运营支持，然后开始做下一个软件了。另一种随机的开局是支持2D渲染的操作系统在80年底才出，这样的话就开局同样的方式创始人和俩新手美术接外包一年，资金可以积攒到50w，然后操作系统一出马上开始请设计设计2D editor，因为2D editor比游戏引擎简单，只需要1个设计做3天就可以了，之后仍是创始人码代码，请个满技能2D美术，因为更简单大约大半年后的81年秋冬的时候就可以修完bug发出去，比竞品仍是晚两三个月发，但品质更高因此掘到第一桶金实现破局。</p><p>另一个破局方法则是创始人选满设计或者满美术，如果满美术，那么创始人自己可以完成所有的美术外包，请3个新手程序接完所有的程序外包，因为新手程序员的bug扣款很多，这样的每个月净入只有2w左右，如果是满设计，那么创始人需要请2个新手美术3个新手程序做外包，每个月的净入也是在2w左右，如果开局随机的是80年底出支持2D渲染的操作系统，那么可以在这之后招满技能的2D程序员做2D editor，然后根据创始人的技能是美术还是设计，请个满技能设计或者满技能美术，这时基本就是烧之前一年外包积攒的钱，然后大约一年后在快破产的时候终于修完了bug发出去，实现破局。如果开局随机的是79年就已经出2D渲染操作系统了，那么就不用考虑做游戏引擎了，因为游戏引擎需要程序会的方向很多，而游戏设定除了创始人是某技能满就这个技能下几乎所有方向都接近全满，市场上招的某技能满的这个技能下往往只有1个技能满，游戏引擎这种需要多方向满的在有足够资金招人再烧钱烧时间去培训前只好不碰，只能一直做外包，直到84年初可以做3D editor之后，这个软件只需要3D程序这一个技能的一个方向，而且体量很小，1个满技能设计1个月，2个满技能的程序3个月就做好了，在84年夏秋的时候可以发布出去，实现破局。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这游戏hard模式和另两个模式完全就像两个游戏……一个是爽文游戏，一个是生存游戏……&lt;/p&gt;
&lt;p&gt;比起easy和medium模式下仅仅是创始人可以满两个半技能还是一个半技能，以及初始资金的差异以外，hard模式表现为不仅创始人只能满一个技能，初始资金0，最重要的是如果不是</summary>
      
    
    
    
    <category term="Game" scheme="https://brielley.github.io/categories/Game/"/>
    
    <category term="Indie" scheme="https://brielley.github.io/categories/Game/Indie/"/>
    
    
    <category term="Gamer" scheme="https://brielley.github.io/tags/Gamer/"/>
    
    <category term="Software Inc." scheme="https://brielley.github.io/tags/Software-Inc/"/>
    
  </entry>
  
  <entry>
    <title>How to use IMSLP and GarageBand to make game music</title>
    <link href="https://brielley.github.io/2020/08/15/tech-game-dev-music-making/"/>
    <id>https://brielley.github.io/2020/08/15/tech-game-dev-music-making/</id>
    <published>2020-08-15T13:02:31.794Z</published>
    <updated>2021-03-24T09:06:11.696Z</updated>
    
    <content type="html"><![CDATA[<p>音乐一直是制作游戏中的一个比较令人头秃的方面，在美术资源和音效资源有大量的免费开源资源可用的时候，音乐资源虽然也有那么一些，但大部分比较一言难尽，让人觉得不如不用的好。MSU的游戏开发网课里有提到可以用苹果自带的GarageBand来制作游戏音乐，制作出来的音乐版权是完全归制作者所有的。但这个方法的难点在于不是所有人都会演奏乐器比如我，作曲更是在大部分人的技能树外。但我最近发现，有一些取巧的方法可以用，比如使用那些已经超过70年进入公共版权的曲谱，在GarageBand的音轨里直接照谱编辑。当然，这个方法的限制也很多。大部分乐曲都很难用这个方法做出来，其一，虽然据说GarageBand支持触控对演奏力度的模拟，但如果像我这样不会演奏只能在音轨里编辑的，演奏出来的往往是比较生硬的，这使得那些需要很高演奏技巧的曲子都不适合，因为模拟不出演奏技巧后，曲子听起来会非常怪异，而即使并不需要高超的演奏技巧，但如果是独奏曲的话，出来的效果往往也很单调，如果是在本身有大量游戏音效的环境下轻量使用还好，如果是在需要音乐做重点烘托的地方就很煞风景；其二，这个软件本质还是给人做流行音乐而不是古典音乐的，于是做起古典音乐来很多地方都很受限制，首先可选节拍只有4/4，3/4，6/8三种，虽然可以尽量把别的节拍往这上面凑，但还是局限很大，2/2凑4/4或者12/8凑6/8这种还好，9/8这种就很麻烦，凑3/4或者6/8出来的强弱音不太对怎么听怎么别扭，其次乐器有大量流行乐用的吉他以及各种鼓以及各种电音和效果，但古典乐器就比较少，经常照谱凑不齐；其三，这个软件虽然理论上支持很多音轨，但音轨间的混音功能极其有限，于是三四个乐器音轨出来还好，音轨太多之后听起来就不太对了，虽然理论上它可以导出多轨工程文件，但它的格式是它自己的.band文件，没法导进adobe audition这种更适合做多轨混音效果的软件里面去做下一步，虽然也可以单独把每个音轨存成一个单独的音频文件，然后去audition里新建一个工程，但这样不太方便看出合奏效果，尤其如果需要整个音轨调高或调低多少半音八度或者所有音轨调整节奏速度这些功能还是在garageband里做起来比较方便，在audition里混音好做但这个不好做，但如果有需要的话，确实也可以，只是预算时间得大幅增加。总的来说，因为现在进入公共版权的绝大部分都是古典乐，于是这个方法能做的相当有限。我试验了十来首不同风格的曲子，感觉效果最好的是那种1轨钢琴加1-2轨弦乐这样的曲子，能最大限度地掩盖住单调平板的缺点，虽然听起来还是不太耐听，但在游戏里再加上音效混音后，也还勉强可用。</p><p>Tips：</p><p>1.在<a href="https://cn.imslp.org/wiki/Main_Page" target="_blank" rel="noopener">IMSLP</a>上搜索曲目的乐谱时，有两点需要注意的，一是一般来说会有挺多不同的版本的，不同版本之间不仅是出版社以及扫描清晰程度不同，有些的编曲也是不同的，可以选择其中比较适合演奏的版本，但需要注意不同谱子的版权，有的最近年间被人重新编曲的并不是公版；二是这网站的搜索框不是网站内置的搜索，而是链接的谷歌搜索，于是墙内会打不开，可以手动用bing国际版搜索“site:imslp.org 曲名”，这样一般搜索出来的第一二个就是。</p><p>2.GarageBand里编辑音轨时对应的音高提示不是五线谱，而是标了调的乐器按键，在把IMSLP上找的五线谱编辑进去的时候，如果像我一样乐理水平有限，需要找表对照一下。</p><p>3.GarageBand导出的无损音乐文件比较大，一般放游戏里得用有损文件，但有损文件的格式是.m4a，unity里无法使用，需要先把.m4a丢进adobe audition里去转导出为.mp3或者.ogg格式，才能在unity里使用。</p><p>4.GarageBand的管类乐器比如长笛单簧管双簧管巴松法国号什么的，在键盘分类下面，别在大类里面去找，找不到的。</p><p>5.GarageBand的弦类乐器输入有两种方式，一种是直接在弦类大类里，好处除了对会演奏的人来说可以触控模拟演奏以外，还有就是可以直接选具体是哪种乐器小提琴中提琴大提琴还是低音贝司，但坏处是没法在音轨里直接整条音轨调整升降几个八度或半音，也没法选择演奏手法；另一种方式是在键盘大类下的其它分类里，好处是可以选三种演奏方式拨奏、断奏、延音，这样听起来演奏方式要丰富一些，也可以整条音轨调整升降几个八度或半音，但坏处是没法选择具体是哪种弦乐器。对于每支乐曲来说，选哪种方式最好的办法还是试吧，用不同效果做4-8个小节试听一下决定用哪种。</p><p>6.个人体感音色上来说，GarageBand的钢琴高音比低音好听，弦乐低音比高音更友好，在谱子可选的情况下，尽量选钢琴是高声部，弦乐是低声部的大提琴协奏曲一类的效果比较好，弦乐高音钢琴低音的小提琴协奏曲一类的有时会比较辣耳朵。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;音乐一直是制作游戏中的一个比较令人头秃的方面，在美术资源和音效资源有大量的免费开源资源可用的时候，音乐资源虽然也有那么一些，但大部分比较一言难尽，让人觉得不如不用的好。MSU的游戏开发网课里有提到可以用苹果自带的GarageBand来制作游戏音乐，制作出来的音乐版权是完全归</summary>
      
    
    
    
    <category term="Tech" scheme="https://brielley.github.io/categories/Tech/"/>
    
    <category term="Game Dev" scheme="https://brielley.github.io/categories/Tech/Game-Dev/"/>
    
    
    <category term="Game Dev" scheme="https://brielley.github.io/tags/Game-Dev/"/>
    
    <category term="IMSLP" scheme="https://brielley.github.io/tags/IMSLP/"/>
    
    <category term="GarageBand" scheme="https://brielley.github.io/tags/GarageBand/"/>
    
  </entry>
  
  <entry>
    <title>Unity插件安利：Fungus</title>
    <link href="https://brielley.github.io/2020/08/15/tech-game-dev-unity-fungus/"/>
    <id>https://brielley.github.io/2020/08/15/tech-game-dev-unity-fungus/</id>
    <published>2020-08-15T13:02:26.435Z</published>
    <updated>2021-03-24T09:02:49.357Z</updated>
    
    <content type="html"><![CDATA[<p>在Unity的所有免费资源里，如果只能推荐一个，那么我一定是毫不犹豫地选Fungus，这是一个超级无敌棒的插件，而且居然是免费开源的。<br>Fungus的主要功能是做剧情对话，如果是做传统的2D AVG游戏，这个插件基本上能够完成所有你需要的功能，比某些流氓软件功能多几倍还不会觊觎你作品的版权，当然，2D AVG的开源引擎其实比较多，除了Fungus以外，比较火的还有Ren’py、Twine等等，而后两者在写自定义插件时分别用的python和前端三件套语言比起Fungus需要的c#或者Lua还用得更广泛一点，但我更推荐Fungus的原因，是因为它在3D游戏中也有非常不错的应用空间，尤其如果你需要做一个重剧情轻任务的3D游戏时。</p><h4 id="哪些情况适合用Fungus"><a href="#哪些情况适合用Fungus" class="headerlink" title="哪些情况适合用Fungus"></a>哪些情况适合用Fungus</h4><p>1.2D的AVG游戏，这是Fungus最初也最本质的定位，自身功能非常强大，基本我能想到的传统2D AVG游戏里可能有的功能它都有直接提供，不需要自己额外写插件，非常适合擅长美术和编剧但编程苦手的人群，只要没有特别独特的需求，甚至可以零编程实现。而如果有特殊需求，也可以用Fungus来作为最基本的框架，然后对特殊需求部分自己写插件作为补充。</p><p>2.3D游戏中的剧情对话系统。Fungus支持Unity的3D碰撞检测，所以可以利用这个来做剧情触发，而Fungus的分支选项菜单、变量设置和条件触发、以及多样的文字呈现方式，基本能满足剧情对话的需要，而这样的功能如果完全自己来做，会多出几百行代码以及大量debug的工作量，而用Fungus的话，就只需要把自带的丑出天际且不适合3D的UI改一下就好。而且最棒的是，结合Unity的EventSystem和自定义c#脚本插件，你能用它做更多的事情，这个后面细讲。</p><p>3.Fungus不适用于做任务系统，因为它没有物品清单系统，如果只涉及到很少的物品，可以用里面的变量功能来实现，当然如果涉及物品多且复杂，也可以自己写插件添加进去，但这样就没必要用Fungus了，选一个任务类插件然后自己再在它的基础上修改更省力。</p><h4 id="Fungus使用Tips"><a href="#Fungus使用Tips" class="headerlink" title="Fungus使用Tips"></a>Fungus使用Tips</h4><h5 id="1-有必要一看的资源："><a href="#1-有必要一看的资源：" class="headerlink" title="1.有必要一看的资源："></a>1.有必要一看的资源：</h5><p>1.1.Fungus的包安装好后会发现它自带有一套example scene，可以挨个运行一下方便看都有哪些基本功能。<br>1.2.Fungus的<a href="https://github.com/snozbot/fungus/wiki/tutorial_videos" target="_blank" rel="noopener">官方指导视频</a>，B站有较完整的<a href="https://www.bilibili.com/video/BV1Tx411z7hz" target="_blank" rel="noopener">英字搬运</a>和不太完整的<a href="https://www.bilibili.com/video/BV1Fx411i7Y1" target="_blank" rel="noopener">中字搬运</a>。<br>1.3.Fungus的<a href="https://github.com/snozbot/fungus/wiki" target="_blank" rel="noopener">官方文档</a>，<br>1.4.Fungus的非官方教程不多，质量高的更少，至少在没科学上网的情况下是这样，对我有帮助的主要就<a href="https://www.bilibili.com/video/BV1Eb411P787" target="_blank" rel="noopener">这一个</a>。吐槽一下有些做教程的up主一定自己压根就不大用Fungus，按他的代码在他视频的场景里没问题，但只要他在场景里放第二个物体设第二个触发对话的trigger马上就会发现出bug，如果是刚接触Fungus和Unity的新人能给带沟里去。<br>1.5.Fungus的<a href="https://fungusgames.com/forum" target="_blank" rel="noopener">交流论坛入口</a>，第一个进不去了，第二三个可以。</p><p>其中，<br>1.1和1.2建议在使用前看，可以二选一看就行了。<br>1.3和1.4建议在看了1.1或者1.2或者使用中遇到问题时再看，因为在对基本功能没有概念的时候，看它们会有点太抽象不知道在说什么，但如果对基本功能有概念后，尤其在带着使用中的问题时，看起来的收获就会比较大。<br>强烈建议在用了一段时间后拉通看一遍1.3，会发现好些用了很久但一直没发现但非常实用的功能，哪怕1.1和1.2都可以不看直接摸索着用，但1.3真的值得花一个下午通拉过去。要说它有什么不足之处，主要是Fungus一直在更新，但文档并非所有地方都同步更新，但可以通过对照其它章节来补足。比如在Document-Home-Blocks-Setting an Event Handler中，列举的触发对话的方式是非常古早的，后面更新的而且我们经常常用的触发对话方式都没有写进去，但在Document-EventHandlers页面中就分类列举了所有触发方式。<br>1.5适合在使用一段时间后遇到无法解决的问题时使用，我目前为止还没用过，但看到上面Fungus制作团队和一些热心使用者会回答问题，其中制作团队直到本月依然有活跃答疑。</p><h5 id="2-Fungus在3D游戏中使用的注意事项："><a href="#2-Fungus在3D游戏中使用的注意事项：" class="headerlink" title="2.Fungus在3D游戏中使用的注意事项："></a>2.Fungus在3D游戏中使用的注意事项：</h5><p>想主要说一说3D，一是因为官方资源里基本是2D相关的，而3D的比较少；二是因为我自己主要是做3D的，在3D上踩过的坑和想到的点比较多。<br>1里列举的资料里有提到的就不赘述了，这里主要列一些实际使用中容易踩坑的地方和一些个人使用经验。</p><p><strong>2.1.碰撞检测与触发对话的相关：</strong></p><p>2.1.1.需要把flowchart作为组件挂在主控角色这个物体上，才能触发各种碰撞检测。千万不要直接tools-fungus-creat-flowchart，然后你会发现怎么都触发不了对话呢。<br>2.1.2.尽可能用trigger而不是collider来触发对话，这个主要是unity的锅，无论是fungus还是自制ui或者别的什么，collider平均3次里能成功触发1次就不错了，而trigger则很少bug。<br>2.1.3.一定一定要在trigger上设置tag，需要格外注意的是，不同的挂了trigger的物体，无论名字再八竿子打不着，距离多十万八千里，只要tag一样，那么触发一个就会导致所有的全被触发，所以，除非是打算几个物体触发任何一个都触发相同剧情，否则tag一定要分开，具体来说，不同叙事方法对tag的用法不同，这个在2.2里详细讲。</p><p><strong>2.2.不同叙事逻辑的实现技巧：</strong></p><p>2.2.1.线性叙事：一个tag即可，用好set active是关键。<br>在scene的hierarchy中，对所有的剧情触发物体，只有第一个设置为active，其它全都不勾选。然后在flowchart中，对于第一段剧情的block触发方式设定为trigger enter，触发后先把当前这个触发物体的set active给变成否，然后剧情走完后把第二个剧情触发点的物体给set active，接下来会按顺序进行到的每一个剧情触发点都以此类推，触发后把当前物品取消激活，同时给下一个触发点激活，直到最后一个剧情触发点。</p><p>2.2.2.主线-支线叙事：一条线一个tag，结合set active和variable来实现。<br>主线所有涉及到的触发点都共用一个tag就可以了，结合set active，按前面2.2.1的方法来实现。同时，对每一条支线需要设置一个tag和一个variable。<br>对所有variables的默认值都设为0，在主线进行到某个阶段可以触发某条支线剧情时，在主线的block里set variable设置支线甲int=1，然后在触发支线剧情的触发物体那里，除了用这条支线的特定tag去触发以外，还需满足if 支线甲int==1，这样就可以避免在主线没发展到可以接支线任务的时候就被提前触发了。支线任务如果有多段触发点，且多段出发点也是线性的，那么也可以结合set active来挨个激活每一个触发点，以保证每次是在正确的地方只触发下面一步的剧情。然后用同样的方法处理支线乙支线丙支线丁等等。</p><p>2.2.3.开放世界叙事：归类tag池，综合应用set active、variable、text variation。<br>因为不知道玩家会先去触发哪个，所以原则上来说，每一个线头都需要一个独立的tag，线头可能是一段持续好几个触发点的剧情，这个用前面2.2.1的方法结合set active来做就可以了，涉及到必须先触发这个线头并且走到哪一步，才有可能触发到那个线头的，用前面2.2.2的方法综合set active和variables来做，第三种线头是那种同类事物，接触任何一个都可能开展类似的对话，并且也许接触第一次第二次第N次触发的对话不一样的，这种共用一个tag，并且全部set active，用text variation来实现。对那种遇到第几次对话不一样而且有特定顺序的，用<code>[1|2|3|...|n]</code>，对那种遇到任何一个都随机从一个对话池里选其中一句出来的，用<code>[~1|2|3|...|n]</code>。</p><p><strong>2.3.结合Unity引擎的自身组件实现更多功能</strong></p><p>2.3.1.前面提到过Fungus里有set active这个命令，也就是激活某个在hierarchy里处于未激活状态的物体，那么靠这个我们可以让Fungus里的剧情发展到某个地方时，激活某个特定的物体，这样直接实现某些功能，前面已经举出过例子了，不赘诉。<br>2.3.2.类似的功能还有spawn object以及destroy，前者可以利用它来生成一些hierarchy里没有但有预制在prefab里的物体，比如刷出小怪或者刷出资源等等；后者则是相反，销毁在hierarchy里现存的物品。<br>2.3.3.除此之外的大头是Invoke命令，可以直接对接调用Unity的Event System，实现里面所自带的或者自己写了挂上去的c#脚本所附加给它的特殊功能，这样让Fungus可以实现的功能边界一下扩展开了。<br>2.3.4.另外一个大头是UI命令，可以直接对接调用Unity的原生UI系统，这样一方面可以解决一些显示问题，比如根据剧情分支不同，某个游戏物体上的字显示不同，就可以通过这个来实现；另一方面也可以结合前面的Invoke命令结合Event System来实现菜单问题等等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Unity的所有免费资源里，如果只能推荐一个，那么我一定是毫不犹豫地选Fungus，这是一个超级无敌棒的插件，而且居然是免费开源的。&lt;br&gt;Fungus的主要功能是做剧情对话，如果是做传统的2D AVG游戏，这个插件基本上能够完成所有你需要的功能，比某些流氓软件功能多几倍</summary>
      
    
    
    
    <category term="Tech" scheme="https://brielley.github.io/categories/Tech/"/>
    
    <category term="Game Dev" scheme="https://brielley.github.io/categories/Tech/Game-Dev/"/>
    
    
    <category term="Game Dev" scheme="https://brielley.github.io/tags/Game-Dev/"/>
    
    <category term="Unity" scheme="https://brielley.github.io/tags/Unity/"/>
    
    <category term="Fungus" scheme="https://brielley.github.io/tags/Fungus/"/>
    
  </entry>
  
  <entry>
    <title>Make-up Tips II</title>
    <link href="https://brielley.github.io/2020/05/07/life-makeup-tips/"/>
    <id>https://brielley.github.io/2020/05/07/life-makeup-tips/</id>
    <published>2020-05-07T13:00:27.262Z</published>
    <updated>2021-03-24T06:11:45.674Z</updated>
    
    <content type="html"><![CDATA[<p><em>折腾了小半年，总算在化妆上折腾出一点心得，虽然画了并不比不画好看，但也总算不再是画了比不画还难看了，于是阶段性总结一下目前为止摸索出来的东西。</em></p><h4 id="1-整体思路"><a href="#1-整体思路" class="headerlink" title="1.整体思路"></a>1.整体思路</h4><h5 id="1-1-色调"><a href="#1-1-色调" class="headerlink" title="1.1.色调"></a>1.1.色调</h5><p><strong>1.色调统一，尽量不要冷色与暖色混用，否则会非常容易显脏。</strong></p><p>在不露肤的季节，理想的色调是用底妆把肤色修正到中性色调，然后彩妆可以选择冷色调或暖色调，并需与服装的冷暖色调配合。<br>在会露出大片皮肤的夏季，较为省力的方式是根据身体皮肤的色调决定全身从服装到底妆到彩妆的色调。</p><p><strong>2.实际中即使是中性色也存在冷暖之分。</strong></p><p>比如白色的服饰其实往往有偏暖调的乳白和偏冷调的雪白，黑色也有偏冷调藏青的黑和偏暖调深棕的黑，大部分灰色因染料偏蓝其实应归入冷色调，也有部分灰色面料是与浅原木色混纺的因此提供了少量的暖调。在使用的时候不能一股脑把它们看作中性色。</p><p><strong>3.彩妆的冷暖调，是相对于肤色而言的，而非相对于白色而言的。</strong></p><p>比如用于打阴影的浅灰棕色，如果与白色对比，那么无论何种色号的浅灰棕色都是暖调。但当与肤色对比时，灰调更重的浅灰棕色则更适合冷皮，棕调更重的浅灰棕色则更适合暖皮，如果用了与肤色不同色调的阴影色，会显得脸脏脏的，而用对了色调则会感觉像是凹陷的阴影。<br>肤色是一个因人而异的相对概念。比如对非常偏暖的肤色而言，中性略偏暖的色调用在这个皮肤上也会显得偏冷调。</p><p><strong>4.并非完全不可使用与肤色冷暖调相悖的色调。</strong></p><p>覆盖力低的彩妆品在上妆轻薄的情况下，其自身的暖冷调特性会降得极低，呈现出的是叠加肤色后的色调。可以选择覆盖力低着色力不强质感轻透的产品，用薄涂或晕染或按压的手法把妆上得极薄。</p><p><strong>5.如确需冷暖色同时出现，可以采取以下几种策略：</strong></p><p>以其中一种为主色调，然后少量使用另一种色调来撞色，并且其中至少有一种色调是低饱和色。<br>让冷色调单品和暖色调单品物理距离较远，且它们之间有中性色过渡。<br>让冷暖色调的彩妆分别呼应冷调和暖调的发肤，如冷调皮肤泛出粉色腮红和暖调头发投射的暖调腮红按照下冷上暖晕染叠加，参照<a href="https://www.bilibili.com/video/BV1fb411L7G9" target="_blank" rel="noopener">视频</a>。</p><h5 id="1-2-光影"><a href="#1-2-光影" class="headerlink" title="1.2.光影"></a>1.2.光影</h5><p><strong>1.所有的线本质不是线，是密度大的影子轮廓。</strong></p><p>彩妆涉及的线主要包含三种：眼线、眉毛、唇线。</p><p>眼线是本质是睫毛的阴影。内眼线应该完全藏在睫毛根部的范围内，使得视觉效果是浓密的睫毛根部形成的阴影，而不是一道线条。挑出眼角的外眼线实际上是睫毛的阴影，弧度需与眼尾睫毛的弧度一致，且不宜过粗，除非佩戴了非常浓密的假睫毛使得过粗的阴影线条是合理的。眼线不应用于调整眼型，至少不应单独用于调整眼型，因为修改的线条会与没有修改的眼球体积冲突，使得妆效极不自然，应该通过眼影来调整眼球的体积感从而起到调整眼型的效果。</p><p>眉毛的线条不应是整条眉毛的边缘，而是一根一根的眉毛。或者更准确的说，眉毛是线条分明的一根一根的眉毛和它们所构成的阴影，不同于脸颊鼻梁，眉毛阴影的深浅受到眉骨高低和毛发疏密双重影响。综合来说，阴影最重的位置在眉毛的中段，这里眉骨的位置是除眉弓外的最高，而眉毛浓密程度最高，综合来说颜色是最重的，并且由于阴影非常重，几乎看不到一根一根的眉毛，用眉粉加深就可以了。眉弓至眉尾的部分是眉骨最高的位置，眉毛的浓密度从眉弓往眉尾下降，使得这里的颜色浓度会比眉毛中段稍轻，但由于眉骨最高处往往由于光线而使本身眉色降低，因此也需用眉粉略做加深，如果这里本身没有什么眉毛，则最好用眉笔画出少量几根很短的眉毛，不用画得特别明显，与阴影浑然一体略深一点即可，如本身毛量适中则无需画一根一根的眉毛。眉头部分的眉骨略低，且这里的毛量是最少的，用眉粉打的阴影应最淡，且最好与鼻影晕接自然，同时，竖起眉笔，顺着毛发生长的方向画出数根眉毛，由于这里的阴影较淡，单根眉毛的轮廓会较为明显。</p><p>唇线尤其下唇线，实际是凸出的唇瓣投下的阴影，因此画唇线通常会在视觉上让嘴唇的丰盈程度提高，而上唇线则是人中在唇上投下的阴影，结合人中高光，会使人中的视觉效果更加凸出。和眼线一样，唇线的作用不是调整唇形，因为这与唇部的体积是相悖的，除非是拍平面照可以事后把体积所致的光影做相应修改，生活中用唇线修改唇形会视效上非常生硬，除非调整的范围是在唇部体积轮廓内做微调。</p><p><strong>2.把面部和五官还原成球体和锥体，想像它们在斜上方打下来的光线下的光影是什么样的，由此决定彩妆的使用范围和晕染深浅。</strong></p><p>彩妆进行的光影调整主要包含几种：脸颊、眼窝、鼻梁、眉骨及周边、人中、下巴。</p><p>脸颊的光影结构最简单，是一个球面在斜上方光线打下来情况下的光影，最高的承光面是高光，球面最高点以下的球形区域会受到高点投下的阴影影响形成腮红，不是阴影是因为它也是凸起，而球面以下的腮帮位置则会因腮帮的凹陷和整个球面投下的影子影响成为阴影。</p><p>眼窝的光影结构相对复杂，它受到三个体积的光影影响，一是比眼窝更高的眉骨投下的阴影，需注意的是眉骨在眉头部分是眉毛位置就是最高处，眉下就是阴影，但眉中至眉尾部分则眉下是凸起的眉弓，眉弓与眼窝交接处才是阴影；二是凸起的眼球形成的球体高光和阴影，三是睫毛和双眼皮褶子投下的阴影。<br>可以看到，整个眼窝阴影最深的地方应该是上眼皮的眼尾处，因为这里既是眉弓下的阴影，又是眼球的阴影，还是睫毛和双眼皮褶子的阴影，受到三个阴影影响。其次是下眼尾处和眼窝轮廓的位置，眼窝轮廓受到眼球阴影和眉骨投影两个阴影影响，下眼尾处受到眼球的阴影和下睫毛的影子两个阴影影响，对双眼皮而言两个阴影影响的范围还包括双眼皮褶子到上睫毛的部位，受睫毛和褶子影响，对单眼皮而言这里则只有睫毛投影单个阴影。而高光最高的位置在眉骨，这里是整个眼窝最高的位置，且不受任何阴影影响，这里的高光是最亮的；其次是眼球中部凸起处和眼头，眼球因凸出而呈现高光，但又受到一定的眉骨投影，眼头略微凸出，比之下眼睑中后段不被眼球阴影遮挡，因此呈现高光。</p><p>鼻梁的光影比之眼窝相对简单，可以把整个鼻子看作一个大的三角锥体，在鼻梁山根处嵌叠了一个椭圆球体，在鼻尖处嵌叠了一个小的三角锥体。于是高光最亮处是椭圆球体凸起的位置和鼻尖，浅阴影处是椭圆球体和小三角锥体投射在大三角锥体上的阴影，深阴影处是大三角锥体两侧向下投射的阴影。和脸颊一样，用阴影粉打在深阴影处，腮红打在浅阴影处，高光处提亮即可。</p><p>眉骨的光影在眼窝已经讲过了，眉骨周边主要是指眉心和太阳穴，这两个位置比起眉弓略低，但和眉头高度类似，如果眉头上方有提亮，那么这些位置也要跟着提亮，如果眉头上方没有打高光，那么这些地方也可以不打。例外的情况是，由于随着年龄增长，眉心和太阳穴会逐渐变得凹陷，因此对熟龄肌而言无论对眉骨是如何处理的，都需在这两个位置使用高光来让视觉上不觉凹陷。</p><p>人中可以看作一个坡度较缓且中间有一个凹陷的三角锥体，上面被鼻梁所遮挡并投下阴影，最亮部分是锥体高处不凹陷的边缘的下端，这里一方面最高另一方面鼻梁的阴影投不到这里，需用高光提亮。鼻底的位置最深，但已经够深了除非是人中太长需要在视觉上缩短，否则无需打阴影。</p><p>下巴可以看作在下巴尖嵌套了一个球体，而上端受到嘴唇投下的阴影。高光在下巴尖球体承光处，阴影在唇下。因为体积上并没有太大的高度差异，一般两者只选其一打即可，如希望显瘦或拉长下巴在下巴尖处打高光，如希望缩短脸长或丰盈唇部在下唇下方打阴影。</p><p><strong>3.整个面部是一体的，选用局部晕染产品的颜色深浅，不仅会影响局部的体积感，也会影响全脸的体积感。</strong></p><p>如选用颜色较深的眼部彩妆，在使得眼窝在视觉上显得更深邃的同时，也会令眼窝以外的部位，不仅是眼窝边的鼻梁，也包括同在头这个球体上距离眼窝相当遥远的下巴视觉上显得更凸出。<br>而相应的，如果在眉骨颧骨和笑肌顶部打更强的高光，在使得与其邻近的眼窝更深邃的同时，也会使得面部整个大球体中的额头和下巴因颜色相对较浅而显得相对更短且不凸起。<br>但这种对整体的影响可以通过对受影响的局部做光影调整来改善。如选择深邃眼窝，可在下巴的下唇下方打上深下浅的阴影，来让下唇显得更丰盈的同时，均衡加深眼窝带来的对下巴视觉效果的影响，并适当加深发际线来均衡对额头的影响。</p><h4 id="2-操作技巧"><a href="#2-操作技巧" class="headerlink" title="2.操作技巧"></a>2.操作技巧</h4><h5 id="2-1-修正肤色"><a href="#2-1-修正肤色" class="headerlink" title="2.1.修正肤色"></a>2.1.修正肤色</h5><p>底妆修正肤色主要是选对色号，这个在makeup foundation那篇里已经写过了，不赘述。额外需要注意的是，对于泛红皮肤的修正，最好是从抗过敏和抗出油这两个源头来解决，而不是靠遮瑕产品来掩盖。在洁面后护肤前使用抗过敏喷雾，在护肤后底妆前在出油区域使用抗出油妆前乳是最好的修正皮肤泛红的方法。</p><p>另一个修正肤色的方法是用适当颜色的彩妆品，来改变肤色给人的视觉效果。最简单的方法是选择比肤色乃至瑕疵更深的产品，这样通过一个更深的颜色来对比显得其它颜色更浅而且它们之间的色差在这个深色的对比下显得不明显，这是为什么很多人都钟爱色彩浓郁的唇部产品。但深色的产品也有它的问题，一是妆感会较浓，二是给局部一个深色那么会使得其它没有深色产品的面部区域视觉上显得更凸，需要去相应地调整其它区域的光影来均衡这个深色产品所致的附带问题。另一种更细微用彩妆品调整肤色的方法是在需要调整肤色的局部区域上叠加一个深浅与自身肤色差不多但略偏冷或略偏暖的产品，并通过上得特别薄来与原本的肤色叠加进行修正。比如薄涂一个暖调的覆盖力极低的裸色唇膏，往往可以很有效地修正唇色发紫。</p><h5 id="2-2-精准线条"><a href="#2-2-精准线条" class="headerlink" title="2.2.精准线条"></a>2.2.精准线条</h5><p>眉毛和唇线都是顺着原本的线条方向去描画就可以了，难度不大，画线条难度比较大且对精准度要求比较高的主要是眼线。画眼线一般有两种产品，一种是膏体，一种是液体，它们使用时的要点是不一样的。<br>液体的产品在画线条时需要竖起笔尖匀速画过，斜着笔尖或是在一些地方停留时间过长另一些地方过短都可能使得线条粗细不均。因此要画出流畅精准的线条，需要足够的练习，通过练习来对该画哪儿心里有数于是匀速画过不中途停顿，以及通过练习来让手不抖且位置准。眼线液的色彩比较浓郁，一般除非是画大浓妆否则需要把眼线完全画在睫毛根部的范围内，如果一笔画下去超出了一点，可以马上用一根尖头棉签把超出部分擦除，一定要马上擦，因为眼线液为了防水防晕总是干得很快而且干了就很难擦掉了。<br>膏体的产品在使用时则可以慢慢描画，同时对于画错的线可以随时用尖头棉签调整，因此对于画出自然的线条相对简单。膏体的难点在于很容易画粗，以及无论选择多么防晕的产品一出油或者一哭都很容易晕妆。对于画粗这一点，眼线膏笔每次使用前一定要把笔尖磨尖，否则完全没法画内眼线，因为膏笔质地比较软，如果用削笔器一类的产品会非常容易弄断笔芯，因此最好是斜着笔在手上磨几圈就好了。而对于抗晕染，最好的办法是在画之前先用准备画眼窝的粉按一下，画好眼线后再在上面继续画眼影，这样只要不大哭一般不容易晕。膏体眼线笔还有一个问题是由于质地较为厚重，对于部分比较敏感的人，用它画内眼线会导致眼睛有异物感狂眨狂掉泪花，如果是这种体质，只能尽量选择敏感肌适用产品，如果怎么选都不行就还是老老实实苦练眼线液技术吧。</p><h5 id="2-3-晕染手法"><a href="#2-3-晕染手法" class="headerlink" title="2.3.晕染手法"></a>2.3.晕染手法</h5><p>晕染基本上有三种思路，<br>一种是用比较上色的密毛刷子上色，然后用一把松散的刷子把边缘通过物理上的刷刷刷晕开。这种方法的好处是上色的区域会比较精准，色块中央色彩浓郁，缺点是对技巧和彩妆产品及工具的质量要求都比较高，并且晕染自然需要比较长的时间。<br>第二种方法和第一种类似，也是先用比较上色的密毛刷子上色，然后用一把松散刷子蘸点浅色去晕染边缘。这种方法能获得第一种的好处，同时更省时间，对质量和技巧的要求降低了，缺点是需要对色彩理解准确，才能选择好合适的晕染浅色，否则很可能会越晕越脏。比较省力不出错的选择是用肤色粉饼晕或者白色哑光眼影晕，缺点是前者可能会影响彩妆品本身的色泽，后者可能产生不必要的高光效果。<br>第三种方法是直接用松散但有一定支撑力的晕染刷子上色晕染一起做。这种方法的好处是晕染会非常自然，晕得再差也不会有色块，缺点是如果产品的显色度不够会上不了色，且对一些精细的位置可能会画不精准。对于前者，需在选择彩妆产品时即选择适合使用这种手法的显色度较好的产品；对于后者，可以通过尖头的小刷子大刷子混用，以及刷子先在色彩最深的地方略按一下再晕染上色的方式。</p><h4 id="3-Debug"><a href="#3-Debug" class="headerlink" title="3.Debug"></a>3.Debug</h4><h5 id="3-1-妆面脏"><a href="#3-1-妆面脏" class="headerlink" title="3.1.妆面脏"></a>3.1.妆面脏</h5><p>一般来说妆面脏的原因要么是色调乱了，要么是光影错了。如果彩妆色调统一、位置符合光影、晕染自然，那么无论什么颜色都不会显脏。因此最根本的办法是加强对色彩冷暖和光影明暗的理解。而如果短期内的理解有限，也可以通过一些方法来让它相对看起来比较不那么脏一点。</p><p>如果无法掌握光影的准确位置，那么尽可能选择颜色较浅的产品，少量多次地用前面说到的晕染手法的第三种来晕染上色，如果感觉不该上色的位置上了色，就用一点粉晕上去盖掉。这个试错的过程也能帮助加深对自己脸上的光影范围到底在哪里的理解和掌握。缺点是会非常费时。<br>另一种不那么费时的方法是局部小范围使用一些深色的彩妆单品，比如眼尾处或者咬唇中部，通过深色的对比来使得那些浅色显得不那么脏。注意边缘要晕染自然，且其它地方的高光阴影要配合加重。这种方法并非解决妆面脏的根本之计，但对于如果也想掌握画浓重妆面的技巧时在如何维持整个妆面的平衡上也是一个不错的练习。</p><h5 id="3-2-妆感重"><a href="#3-2-妆感重" class="headerlink" title="3.2.妆感重"></a>3.2.妆感重</h5><p>分两种，一种是产品质地造成的，一种是上妆手法的问题。<br>上妆手法的问题，一般是没有晕染好，或者线条没有修好，使得它们看起来不像光影而像线条和色块。解决方法参见前面操作技巧的精准线条和晕染手法。</p><p>产品质地问题又分两种，产品本身不够自然，或者脸上产品质地不统一。<br>产品质地不统一是水润程度不统一，一般来说，所有的底妆和彩妆产品无论是粉质还是膏体，妆效都可以按照从水到干分为水光、奶油、哑光三大类，这些妆效其实是模拟皮肤的干油性，也与皮肤的熟龄度有关，如果不统一就不自然了。比如哑光底妆产品配上玻璃唇的唇妆就会容易有突兀感，水光肌配上哑光唇也会感觉哪里怪怪的。<br>另一种是产品本身不自然，而导致不自然的原因有可能是产品不适合自己，也可能是选择了不适合该产品的上妆方式导致的。一般来说先考虑后者，排除了后者的可能再考虑前者。比如经常看到有观点说上眼影最好的方式是用手，但不难想到眼窝那么复杂的光影结构，对不够经验丰富的人来说，是很难用手指晕出自然的效果的。再比如判断眼影腮红高光等粉质需晕染产品是本身质地不好晕染还是自己没晕对，最好是在手上试试，如果在手上无论用什么刷子怎么晕也晕不出效果，那就是产品的问题，如果手上能晕出来，那么理论上脸上也能晕出来，没晕出来很可能是对光影的理解有误或者刷子太大了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;折腾了小半年，总算在化妆上折腾出一点心得，虽然画了并不比不画好看，但也总算不再是画了比不画还难看了，于是阶段性总结一下目前为止摸索出来的东西。&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-整体思路&quot;&gt;&lt;a href=&quot;#1-整体思路&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="Life" scheme="https://brielley.github.io/categories/Life/"/>
    
    <category term="Makeup" scheme="https://brielley.github.io/categories/Life/Makeup/"/>
    
    
    <category term="生命不息debug不止" scheme="https://brielley.github.io/tags/生命不息debug不止/"/>
    
    <category term="To Love Life For What It Is" scheme="https://brielley.github.io/tags/To-Love-Life-For-What-It-Is/"/>
    
  </entry>
  
  <entry>
    <title>Online Courses about Game Design and Development</title>
    <link href="https://brielley.github.io/2020/03/11/tech-game-dev-mooc-1/"/>
    <id>https://brielley.github.io/2020/03/11/tech-game-dev-mooc-1/</id>
    <published>2020-03-10T17:15:38.168Z</published>
    <updated>2021-03-24T10:02:21.872Z</updated>
    
    <content type="html"><![CDATA[<h4 id="游戏设计导论"><a href="#游戏设计导论" class="headerlink" title="游戏设计导论"></a><a href="https://www.coursera.org/learn/game-design/home/welcome" target="_blank" rel="noopener">游戏设计导论</a></h4><p>推荐度：★★★☆<br>授课方：加州艺术学院<br>平台：Coursera<br>费用：听课免费，证书收费但可申请全额助学金<br>语言：英语<br>字幕：中字 </p><p>Repo：最零基础上手的游戏设计课程。<br>不同于许多别的在讲游戏设计之前得先讲好几个小时的如何使用某个游戏引擎来呈现你的设计的课程，这个课不需要任何意义上的前置技能，会用纸笔就行了。<br>特点是别说那么多就是干。课程的构架基本上是你先随便设计一个游戏，然后我们一起看看它是不是有点不那么耐玩，来加点什么东西进去，看看迭代以后的是不是好玩一点了，但还不够，我们一起看看最好再加点什么东西进去，现在是不是更好玩一点了，重复以上过程。<br>于是这门课基本上没有什么授课内容，更像我们小时候的兴趣课，每周讲十分钟，然后用十小时来做自己的游戏、改自己的游戏、看别人的游戏。btw，虽然课程只要求看三个别人的游戏就可以了，但多看没限制，墙裂推荐多看看，我上的时候深觉这门课讲课是赠品做东西是预备看别人的东西才是本体2333<br>这门课的不足之处也很明显，一是课程上让做的项目是桌游，而且是能简化到一页纸上的桌游，于是如果不是本身想做大富翁之类的游戏话可能直接的收获不大，更多的是收获管它做成啥样总之先行动起来的心态，以及迭代式开发的习惯；二是虽然整门课都在讲怎么提高游戏的游戏性，但讲授的方式更接近于直接丢出一堆公式去让人去套，对于为什么公式是这么写的如果我的情况不适合套公式有什么办法自己改公式或者造公式吗则没有涉及。</p><h4 id="游戏化"><a href="#游戏化" class="headerlink" title="游戏化"></a><a href="https://www.coursera.org/learn/gamification/home/welcome" target="_blank" rel="noopener">游戏化</a></h4><p>推荐度：★★★★☆<br>授课方：宾夕法尼亚大学<br>平台：Coursera<br>费用：听课免费，证书收费但可申请全额助学金<br>语言：英语<br>字幕：中字</p><p>Repo：对游戏为什么好玩怎么设计才能让游戏好玩让人想玩讲得最深入的课程。<br>虽然这其实并不是一门讲游戏设计的课程，但确是我上过的所有课程中，对于如何让游戏好玩分析得最深入的。一般课程对这个问题的回答都是要么集中在游戏叙事和游戏机制的技术细节和经验技巧上，要么提一嘴根源是不断的落在玩家心流区域的正反馈，但为什么是正反馈，是什么样的正反馈，则少有课程去触及。而这门课从心理学角度去继续往下挖并提出这根源于人的motivation，处于刚刚超过人当前能力上方一点点的任务被完成的正反馈，会让人的competence（能力感，觉得自己有能力克服障碍解决问题）得到满足，这是人的三大intrinsic motivation（内生驱动力，不依赖于外物刺激仅仅源于内心意愿驱动）之一，而除此之外，人的另两个主要的内生驱动力autonomy（自主感，觉得自己是完全出于自我意志作出有意义的选择）和relatedness（归属感，觉得自身的行为让自己与某些外在的具体事物或超越的抽象概念产生了连结）也与游戏好玩与否密切相关，是游戏设计需要核心注意的内容。而在设计中，对于extrinsic motivation（外生驱动力，外在奖励刺激）这把双刃剑则应谨慎使用，用得好的情况下，外生驱动力能够在内生驱动力不足的情况下提供有效的补充让游戏变得更好玩，但如果用得不好，则会掉入替代效应的陷阱——原本玩家是出于内生动力热爱一件事物，但由于提供了外生奖励，于是人们反而变得依赖于外生奖励才能激发动力，内生的热爱被挤占消失了。原则上来说，外生驱动力的四种形式external regulation（外在调节，内心厌恶完全因为外在的强迫而不得不做）、introjection（摄入调节，尽管自己不喜欢也不认同但考虑到他人会因自己做这件事而认同自己因此选择做）、identifucation（认同调节，尽管不喜欢但认同这件事的一些部分是有意义的因此认为自己应该做）、integration（整合调节，完全认可这整件事的意义和价值觉得自己必须做只是不能从做这件事中获得乐趣于是感到很难坚持），越往后的形式越接近于内生动力，越往前越接近于无动力（amotivation），在设计的时候如果需要外生动力作为补充，最好选择尽可能靠后的形式。这个理论是在课程的第三周讲的，目前为止我没有看到比它更好用的理论，墙裂安利即使没有时间上完整门课，第三周这俩小时的课程视频也绝对值得一看。<br>这门课的不足之处几乎恰好是前面加州艺术学院那门课的相反面，这是一门讲如何运用游戏机制设计产品或者项目管理的商科课，也因此有着绝大部分商科课最典型的特点——分析了又分析挖掘了又挖掘但绝不撸袖子去做东西。这门课有三个作业，一个比一个要求的字数多，但始终不见让学生自己做方案，最后的两千词大作业也只让写出你认为在设计给定要求的方案时需要注意什么，而不是把方案本身写出来……所以如果不是想练英文写作，而是想学游戏设计，这门课本身的作业并没有太大帮助，不如给自己布置个运用所学分析自己玩过的游戏或者设计的游戏的作业更实用。</p><h4 id="游戏产业概论"><a href="#游戏产业概论" class="headerlink" title="游戏产业概论"></a><a href="https://www.coursera.org/learn/youxi-chanye-gailun/home/welcome" target="_blank" rel="noopener">游戏产业概论</a></h4><p>推荐度：★<br>授课方：上海戏剧学院<br>平台：Coursera<br>费用：听课免费，证书收费但可申请全额助学金<br>语言：中文<br>字幕：中字</p><p>Repo：我上过的游戏相关课程中唯一没有任何收获的，不推荐。<br>其实课程框架还可以，把游戏本身、游戏行业、资本环境都囊括到了，虽然产学结合算是高等教育的一个基本要求，但能做到的国内高校课程确实不多，理论上应该会是个好课程苗子。但很遗憾的是，即使相关知识极为有限的我也能明显感觉到，主讲老师对这三个领域都不太了解，于是理想很美好但执行不下去，于是只好给框架半颗星。有一点值得肯定的是，这门课也是我上过的唯一一门主讲老师会在课程论坛里跟学生交流的一门网课，这样的精神值得半颗星，这也给了这门课进化的可能，不知道几年过去这门课有没有迭代出撑得起框架的内容来。</p><p><em>以上三门课上于2016年春夏，不排除三四年过去课程内容有修改目前内容已与repo不符的可能。</em></p><p><em>以下课程为最近上的，repo内容即为当前内容</em></p><h4 id="游戏开发导论"><a href="#游戏开发导论" class="headerlink" title="游戏开发导论"></a><a href="https://www.coursera.org/learn/game-development/home/welcome" target="_blank" rel="noopener">游戏开发导论</a></h4><p>推荐度：★★★★☆<br>授课方：密歇根州立大学<br>平台：Coursera<br>费用：听课免费，证书收费但可申请全额助学金<br>语言：英语<br>字幕：部分中字</p><p>Repo：我上过的最系统的unity入门教程，如果时间有限只能选一个教程来学unity的话那就它吧。<br>课程设置的时长是四周，具体可以按自己进度调整，体测总共上下来需要大约25小时。第一周是装软件熟悉基本界面，第二周是用一个都不是游戏的例子来讲软件的基本功能和从新建一个空项目到做完打包输出适配指定平台的过程。第三周是从零做一个第三人称视角的3D小游戏的例子，所有功能的实现都是用unity自带组件。第四周是从零做一个第一人称视角的3D小游戏的例子，部分功能的实现需要写代码（但完全自己写代码的时候比较少大部分工作是当调包侠调用unity自己内置的一些组件和一些三方开源组件）。其中后两周的两个项目开着unity自己跟着做下来，虽然比较花时间，每个要花接近10小时，但超级值，上完之后会有一种自己会用这个软件了的错觉，当然很快真去自己做东西的时候会马上被打脸，但至少虽然做不出来但心里大概有点思路有几个方向，不至于像上课前那样完全两眼一抹黑。<br>虽然只扣了它半颗星，但这门课也有很多需要提高的地方，首先我一定要吐槽它用的素材实在太太太太太丑了，基本上都是开局unity里新建一个球就是主控角色，新建一个方块儿就是小怪，然后分别蒙上大红大绿的辣眼皮就开始讲课……尤其第二周讲的栗子甚至都还不是游戏，导致我差一点点就半途弃了，还好没有。虽然理论上我知道有时候随手用个方块圆球来演示是个省时省力的替代方式，在设计原型的时候也经常用到，但，如果……授课老师能在他第一周提供的那么多免费素材网站里去随便拖点不那么辣眼睛的素材来用就更好了。<br>另一个我觉得这门课或有不足的地方，是乐趣性不够高。部分原因可能是因为课程想要把软件的方方面面都讲到，于是在选例子的时候就拿这个为标准来选，于是除了第四周的栗子以外，另两个例子都并不是我们通常会玩到的游戏类型，于是乐趣性有不足。与它相反的是unity learn上的几个新手教程，基本上都是大家平时会玩到的rpg啊fps啊解密啊潜行啊roguelike啊，素材大部分也都美美哒，学的过程就愉快得多，当然，确实我也很明显的感觉到了unity learn的那几门课上下来都只学到一些很碎片的东西，脑子里缺少对unity能做什么不能做什么从头做一个游戏都需要做些什么的整体概念，而且很多东西知其然不知其所以然。最理想的是结合起来上就好了，但似乎有时候乐趣和全面不可得兼。我的感觉是，如果心中有明确的想要做的游戏的概念了，需要学unity来实现它，或者至少实现个demo或者原型，那就只上这门课就可以了。而如果还没有明确的概念，那就这个教程加unity learn上找点自己感兴趣的游戏类型的教程结合起来看，比较能兼顾学的效果和学的乐趣。</p><h4 id="游戏设计原理"><a href="#游戏设计原理" class="headerlink" title="游戏设计原理"></a><a href="https://www.coursera.org/learn/gamedesign?specialization=game-development" target="_blank" rel="noopener">游戏设计原理</a></h4><p>推荐度：★★★☆<br>授课方：密歇根州立大学<br>平台：Coursera<br>费用：听课免费，证书收费但可申请全额助学金<br>语言：英语<br>字幕：部分中字</p><p>Repo：感觉这门课的目标受众大概是有志从事商业游戏设计的海外党，但对非目标受众来说感觉水分比干货多。<br>这门课是前面那门课所属系列的第二门课程，因为有上门课的好印象加成，我对它期待值很高，但上下来感觉比上门课水得多，或者说我不是它的目标受众，于是接近半数的课程内容对我来说不太有价值。比如第一周整周都可以跳过，第二周只需要听游戏文档那小节就可以了，第三周虽然水分不少但干货也不少可以整个听听，第四周除了原型和测试外的俩小节都挺水的可以跳过。<br>但这门课尽管干货部分少，但干货部分确实对我来说有帮助和启发。一方面整体思路变清晰了，另一方面他偶尔的随口一句经常会让我发现自己之前可能想的有问题或者没有考虑到的地方。<br>不足之处首先是前面提到的需要精简一点去去水分，然后对里面的干货部分可以扩展开来多讲一讲，很多一句话带过的其实倒是对我比较有启发，如果能多深入讲一讲会挺好的。另外这门课有个与内容无关但对我来说体验很糟的地方，是它的音频。主讲人说话拖音比较重，而我听拖音一向跟听刮黑板一样浑身难受，一般遇到这种情况我的解决方法是开1.5倍速这样就听不到拖音了，但这个视频这么做会一卡一卡的更难受了，加上他发摩擦音的时候音频特别高，而他一句话里就要带一两个的口癖right更是一个拖音加一个摩擦音简直能把人逼疯，上完以后大松一口气，希望以后的课程不是他主讲了。</p><h4 id="游戏分析与评测"><a href="#游戏分析与评测" class="headerlink" title="游戏分析与评测"></a><a href="https://next.xuetangx.com/course/tencentgames00001002032/1515957" target="_blank" rel="noopener">游戏分析与评测</a></h4><p>推荐度：★★★★ （目前上完章5，总14章，不排除之后会更新评价）<br>授课方：腾讯<br>平台：学堂在线<br>费用：听课免费，证书收费<br>语言：中文<br>字幕：中字</p><p>Repo：我所有上过的国内课程中最好的，推荐。<br>目前上到第五章，除了第一章略水可以跳过以外，其它四章都很棒。这门课的结构是第二章讲对每一款游戏具体可以从哪些方面去分析它，然后第三章开始到第十四章每章分析一个游戏类型，按照这个类型的发展历史从早到晚，选出有代表性的作品去逐一分析，然后归纳出整个类型的核心特点和变化趋势。这种自下而上从微观到中观的分析思路对我来说比较亲切，虽然我个人更习惯自上而下从宏观到中观到微观的思路，但自上而下和自下而上可以结合验证。然后我要说这门课真的超有趣，除了能听到不少有趣的古早八卦，每章的主讲人们都是卖安利一把好手，才四个类别上下来我就吃了好多好多游戏的安利，to-play-list简直能一路排到明年。<br>不足之处的话就是太多地方浅尝辄止了，我刚觉得这个话题有意思结果就换话题了，虽然受限于课程时长大部分课程都这样，但一般会给出扩展阅读的资料清单，而这门课没有这么做。虽然我上的别的很多课给出的扩展阅读清单里的大部分我也没有兴趣去读，有些有兴趣读的下下来目录扫过去发现和我想像的内容偏差太大也就弃了，但也有少部分打开我新世界大门的，这门课如果能加上这个就好了。</p><h4 id="游戏心理学"><a href="#游戏心理学" class="headerlink" title="游戏心理学"></a><a href="https://gameinstitute.qq.com/course/detail/10005" target="_blank" rel="noopener">游戏心理学</a></h4><p>推荐度：★★<br>授课方：腾讯<br>平台：腾讯游戏学院<br>费用：听课免费，不提供证书<br>语言：中文<br>字幕：中字</p><p>Repo：题目很大内容其实不多就简单谈了谈心流的一门课。<br>对于把正反馈循环描述为一种魔法式的神秘过程的做法我个人不是特别认同。但这门课对我而言提供了一个很有启发的地方，即在探究心流所需要的一定难度的挑战上，把游戏的难度分为了思考难度和操作难度，然后把主流游戏画在了这个坐标轴中。<br>思考难度和操作难度这个分法有点像一个古早概念文和武，但我觉得其实更准确用来描述它们的应该是《思考快与慢》提出的大脑的两个系统，潜意识层面的条件反射系统和意识层面的思考系统。在玩OW的时候我想过这个问题，但没有深挖下去，在上这门课后又重新想起了这个话题，感觉应该找个时间详细想一想写一写。</p><h4 id="Creator-Kit-RPG"><a href="#Creator-Kit-RPG" class="headerlink" title="Creator Kit: RPG"></a><a href="https://learn.unity.com/project/creator-kit-rpg?language=en" target="_blank" rel="noopener">Creator Kit: RPG</a></h4><p>推荐度：★★★★<br>授课方：Unity<br>平台：Unity Learn<br>费用：听课免费，不提供证书<br>语言：英文</p><p>Repo：适合无游戏制作基础无编程基础的2D RPG游戏制作的入门教程。<br>非常新手友好的一门unity上手课程，不需要编程，涉及到需要实现的功能都预先写好脚本嵌入到组件了。对完全没有基础的人来说，也能一步步跟着做下来一个关卡。而且最大的优势是花的时间特别短，一个下午就能搞定，从游戏的角度来说就是反馈特别及时。<br>不足之处是涉及到的内容略少，对于RPG来说就涉及到对话和任务俩功能，很多RPG的内容都没有涉及到，对于它的标题来说显得不太名副其实。另外一方面对软件涉及到的也比较有限，上下来没法建立起整体概念，在另两个unity learn上的creator kit系列教程里也多少都有点这个问题。</p><h4 id="Creator-Kit-FPS"><a href="#Creator-Kit-FPS" class="headerlink" title="Creator Kit: FPS"></a><a href="https://learn.unity.com/project/creator-kit-fps?language=en" target="_blank" rel="noopener">Creator Kit: FPS</a></h4><p>推荐度：★★★★<br>授课方：Unity<br>平台：Unity Learn<br>费用：听课免费，不提供证书<br>语言：英文</p><p>Repo：适合无游戏制作基础无编程基础的3D FPS游戏制作的入门教程。<br>和前面的RPG Kit一样，是不需要编程的新手教程，也是可以很快上手用最多大半天就可以跟着做出一个关卡的那种快速反馈大份快落的教程。有和前面差不多的问题，对标题所说的游戏类型里的功能只简单涉及到很少一部分但并不全，比如作为FPS但没有任何涉及小怪的移动或者小怪的攻击等等小怪行为的功能。对于软件整体也只涉及到很少的部分，没法让人建立起对整体的概念。</p><h4 id="Creator-Kit-Beginner-Code"><a href="#Creator-Kit-Beginner-Code" class="headerlink" title="Creator Kit: Beginner Code"></a><a href="https://learn.unity.com/project/creator-kit-beginner-code?language=en" target="_blank" rel="noopener">Creator Kit: Beginner Code</a></h4><p>推荐度：★★★★<br>授课方：Unity<br>平台：Unity Learn<br>费用：听课免费，不提供证书<br>语言：英文</p><p>Repo：适合有一定游戏制作概念但无编程基础的编程入门教程。<br>和前面两个Creator Kit系列的教程不同，这个教程的内容不是让人用给到的素材和预写好的功能组件去自己做一个关卡，而是用给到的预写好的功能组件的代码去改吧改吧成自己的代码。之前密歇根州立的那门unity课在第四周提到了一个观念，说有代码基础分几种，初极就大概知道哪些东西能写出来哪些东西不能写出来，中级就大概能蒙出来别人代码的意思然后改吧改吧成自己的代码，高级才需要自己从零写代码，做美术代码基础只需要初极，做设计只需要中级就够用了。这个观点挺震惊我的，一是它默认应该全民有代码基础，二是有代码基础的绝大部分其实是有用代码的能力而不是有造代码的能力，这和我之前上的好些国内代码入门教程都是让人从造简单代码开始慢慢升级造复杂代码的思路是完全不一样的，而且不得不说这个思路比较实用。但那门课虽提了这个思路，课程里讲代码的时候还是从头写的，只是调包的活儿做得比较多。而这个unity learn的教程体现了一样的思路，而且内容也真的是从一个别人写好的代码出发，教人怎么去猜那些看不懂的代码里的关键要素，然后把关键要素改一改，去游戏里看看是不是猜对了，如果猜错了怎么一键还原继续猜，如果猜对了继续看需要改的东西是不是忒多了复制粘贴手动改要素太麻烦，是吧那看看怎么自定义个函数或者函数类，去让抄代码改要素的过程更省事儿诸如此类的手把手花式抄代码教学。</p><h4 id="2D-Roguelike"><a href="#2D-Roguelike" class="headerlink" title="2D Roguelike"></a><a href="https://learn.unity.com/project/2d-roguelike-tutorial?language=en" target="_blank" rel="noopener">2D Roguelike</a></h4><p>推荐度：     （目前上到视频5，总14视频，完成后再打推荐度）<br>授课方：Unity<br>平台：Unity Learn<br>费用：听课免费，不提供证书<br>语言：部分中译</p><p>Repo：深刻体会到为啥这是一个中级教程了……前面仨视频都觉得还挺新手友好的呀，然后就被第一个脚本卡住了……耗了3个小时在上面现在还是有几个地方没看明白。按说有地方没看明白也没事，用前面俩教程的办法，可以先照抄然后去游戏里改变量来蒙，但是……把脚本拖到gameobject上的时候报错了，提示在修好bug之前挂不上去，但vs里标出来的bug我都修了呀……不管了先睡觉，眼睛都快成二筒了……</p><p><em>以上是能给到相对完整Repo的教程，下面是半途弃了于是仅能提供不完整感想的教程，因没看完不打推荐度</em></p><h4 id="The-Explorer-3D-Game-Kit"><a href="#The-Explorer-3D-Game-Kit" class="headerlink" title="The Explorer: 3D Game Kit"></a><a href="https://learn.unity.com/project/3d-game-kit?language=en" target="_blank" rel="noopener">The Explorer: 3D Game Kit</a></h4><p>授课方：Unity<br>平台：Unity Learn<br>费用：听课免费，不提供证书<br>语言：英文</p><p>Repo：适合无游戏制作基础无编程基础的3D第三人称RPG游戏制作的入门教程，硬盘和硬件杀手预警。<br>理论上这应该是一个不错的教程，从给出的Demo来看，会涉及到剧情触发、武器获得、战斗系统、解密系统等等常见的3D游戏会用到的功能，而且全是预制好的组件不需要自己编程，在几个无编程Kit教程中，这应该是涉及功能最多的一个，而且都挺实用的。然而，我只开了个头连试玩都没玩通就弃了的原因是，太太太太太太太卡了。我玩OW也从来没卡过的游戏本，在试玩这个游戏教程的Sample Level的时候硬生生卡得一个动作要延迟好几秒跑位起来看到的角色位置和实际的角色位置十万八千里……或许以后如果有一天我入了个台式会重新过一遍它，但目前，我能想到的使用方式大概只有需要用到里面预置的某些功能时看看能不能抄到点代码。</p><h4 id="附1-近期准备上的课程"><a href="#附1-近期准备上的课程" class="headerlink" title="附1 近期准备上的课程"></a>附1 近期准备上的课程</h4><p><em>游戏是个大坑，目测以后还会遇到很多教程，这篇Repo会持续更新，先列一些近期准备上的教程</em></p><h5 id="Ruby’s-Adventure-2D-Beginner"><a href="#Ruby’s-Adventure-2D-Beginner" class="headerlink" title="Ruby’s Adventure: 2D Beginner"></a><a href="https://learn.unity.com/project/ruby-s-2d-rpg?language=en" target="_blank" rel="noopener">Ruby’s Adventure: 2D Beginner</a></h5><p>授课方：Unity<br>平台：Unity Learn<br>费用：听课免费，不提供证书<br>语言：英文</p><p>Repo：其实2D教程里我最早下的是这个，然后大致浏览了一下框架，感觉适合有点基础的而不是纯萌新，于是转投了前面那个真新手教程。</p><h5 id="John-Lemon’s-Haunted-Jaunt-3D-Beginner"><a href="#John-Lemon’s-Haunted-Jaunt-3D-Beginner" class="headerlink" title="John Lemon’s Haunted Jaunt: 3D Beginner"></a><a href="https://learn.unity.com/project/john-lemon-s-haunted-jaunt-3d-beginner-1" target="_blank" rel="noopener">John Lemon’s Haunted Jaunt: 3D Beginner</a></h5><p>授课方：Unity<br>平台：Unity Learn<br>费用：听课免费，不提供证书<br>语言：中译</p><p>Repo：这个是我最早下的3D教程，因为它的标题里有个Beginner，又是Unity Learn上唯一一篇有中字的，看框架也还挺系统。然后我在第二章卡住了，跳了二三章以后，在第五章又卡住了，于是醒悟这个Beginner应该是指有一定游戏制作基础的Unity新手，而不是游戏制作新手。</p><h4 id="附2-各平台使用Tips"><a href="#附2-各平台使用Tips" class="headerlink" title="附2 各平台使用Tips"></a>附2 各平台使用Tips</h4><p>1.学堂在线的视屏播放页面，在IE上无法播放显示，在Chrome上可以播放显示但页面各控件的位置会出错并互相遮挡，在Edge上可正常显示和播放。</p><p>2.Coursera的视频在国内大部分地区无法正常播放，解决方法是修改hosts就好。打开<code>C:\Windows\System32\drivers\etc\hosts</code>，在末尾粘贴如下语句并保存。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">52.84.246.90    d3c33hcgiwev3.cloudfront.net</span><br><span class="line">52.84.246.252    d3c33hcgiwev3.cloudfront.net</span><br><span class="line">52.84.246.144    d3c33hcgiwev3.cloudfront.net</span><br><span class="line">52.84.246.72    d3c33hcgiwev3.cloudfront.net</span><br><span class="line">52.84.246.106    d3c33hcgiwev3.cloudfront.net</span><br><span class="line">52.84.246.135    d3c33hcgiwev3.cloudfront.net</span><br><span class="line">52.84.246.114    d3c33hcgiwev3.cloudfront.net</span><br><span class="line">52.84.246.90    d3c33hcgiwev3.cloudfront.net</span><br><span class="line">52.84.246.227    d3c33hcgiwev3.cloudfront.net</span><br></pre></td></tr></table></figure><p>随后运行cmd，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig/flushdns</span><br></pre></td></tr></table></figure><p>刷新浏览器，会发现视频可以播放了。<br>随着时间推移上面的地址可能会失效，使用前先看看能不能ping通，如果不能ping通找一下最近的能ping通的。</p><p>3.Unity的教程素材下载有个巨坑，即无论是跟着Unity Hub给出的教程下载流程走，还是新建项目然后在Unity软件里打开Unity Asset Store去下载导入教程素材包，都会导致电脑里除了知道自己保存了的那个项目文件以外，还分别在C盘的两个临时文件夹中有两个文件备份。如果是下载的以M论的2D包还好，如果下载的3D包尤其是那个2个多G的课程包，分分钟C盘缩水近10G。<br>解决方法是该手动删掉手动删掉，该手动挪D盘手动挪D盘。<br>一般来说，下载的原始素材包会是一个有Unity图标的<code>.unitypackage</code>文件，这个文件在<code>C:\Users\电脑用户名\AppData\Roaming\Unity\Asset Store-5.x</code>，文件名一般就是你下载的那个素材的名字。直接挪到其它盘备份吧，以后如果需要用的时候可以重复导入。<br>然后当在Unity hub的教程页面里打开下载的那个原始素材包的时候，会生成一个原始的项目文件，准确的说是文件夹，文件夹下面和自己手动保存的项目文件夹下面的目录是一致的，这个文件夹在<code>C:\Users\电脑用户名\AppData\Local\Temp</code>，并且，文件夹名是乱码，也就是说没法通过名称找到它，只能通过推断。推断方法是，先选日期，筛选出打开它那个日期的所有临时文件，然后看文件大小，找到和自己手动保存的项目文件大小差不多的乱码文件夹，点开看看是不是和自己手动保存的项目文件夹内容大体一致，是的话就它了，直接删掉吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;游戏设计导论&quot;&gt;&lt;a href=&quot;#游戏设计导论&quot; class=&quot;headerlink&quot; title=&quot;游戏设计导论&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.coursera.org/learn/game-design/home/welcome&quot; ta</summary>
      
    
    
    
    <category term="Tech" scheme="https://brielley.github.io/categories/Tech/"/>
    
    <category term="Study Notes" scheme="https://brielley.github.io/categories/Tech/Study-Notes/"/>
    
    
    <category term="Game Dev" scheme="https://brielley.github.io/tags/Game-Dev/"/>
    
    <category term="MOOC" scheme="https://brielley.github.io/tags/MOOC/"/>
    
  </entry>
  
  <entry>
    <title>Solutions to Hexo Errors I</title>
    <link href="https://brielley.github.io/2020/03/03/tech-blog-hexo-errors-and-solutions/"/>
    <id>https://brielley.github.io/2020/03/03/tech-blog-hexo-errors-and-solutions/</id>
    <published>2020-03-02T16:23:23.503Z</published>
    <updated>2021-03-24T06:13:15.032Z</updated>
    
    <content type="html"><![CDATA[<h4 id="环境变量配置错误"><a href="#环境变量配置错误" class="headerlink" title="环境变量配置错误"></a>环境变量配置错误</h4><p>问题原因：<br>通常来说在安装Nodejs和Hexo时，会自动进行环境变量配置。但有时系统未进行该配置，或在安装其它程序后，其它程序安装时对环境变量的自动配置覆盖了之前安装Hexo时的配置，导致path报错。</p><p>问题表现：<br>在使用<code>$ hexo g</code>等命令时报错，错误提示为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Erorr: Command not found</span><br></pre></td></tr></table></figure><p>问题解决：<br>手动配置环境变量，将Nodejs和Hexo加入环境变量，具体如下：</p><p>Nodejs:<br>找到<code>/nodejs</code>在c盘中的位置，一般是在<code>/program files</code>或<code>/program files(x86)</code>下，复制该文件夹路径，如<code>C:\Program Files\nodejs</code><br>打开<code>控制面板——系统和安全——系统——高级系统设置——高级——环境变量——系统变量——Path——编辑——新建</code>，如上面复制的<code>C:\Program Files\nodejs</code>路径不在<code>Path</code>列表中，则将以上粘贴到新建行。</p><p>Hexo:<br>同样，找到<code>\blog\hexo\node_modules\hexo\bin</code>在电脑中的位置，复制该文件夹路径，如<code>D:\BLOG\hexo\node_modules\hexo\bin</code>，复制到上面所示的<code>Path</code>处。</p><h4 id="本地服务器端口冲突"><a href="#本地服务器端口冲突" class="headerlink" title="本地服务器端口冲突"></a>本地服务器端口冲突</h4><p>问题原因：<br>Hexo博客默认使用的本地服务器端口为4000，但这个端口很容易被别的进程占用，导致无法使用<code>http://localhost:4000</code>进行博客的本地预览。</p><p>问题表现：<br>在使用<code>$ hexo s</code>时报错，错误提示为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: listen EADDRINUSE</span><br></pre></td></tr></table></figure><p>同时<code>http://localhost:4000</code>上看不到博客页面。</p><p>问题解决：<br>改在别的端口预览就好了，比如5000，在<code>$ hexo s</code>时使用如下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure><p>然后浏览器打开<code>http://localhost:5000</code>进行本地预览即可。</p><h4 id="Nunjuck解析错误"><a href="#Nunjuck解析错误" class="headerlink" title="Nunjuck解析错误"></a>Nunjuck解析错误</h4><p>问题原因：<br>Hexo博客是使用Nunjucks来进行解析的，这会导致博文中的`{{ }}`或`{% %}`一类的字符与之冲突，从而无法生成html文件。</p><p>问题表现：<br>在使用<code>$ hexo g</code>时报错，错误提示为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nunjucks Error: [Line xxx, Column xxx] unexpected token: &#125;&#125;</span><br></pre></td></tr></table></figure><p>问题解决：<br>在会冲突的字符前后，使用<code>raw</code>把字符包裹起来，避免解析时报错。具体使用方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;需包裹的字符&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><p>需注意的是，如果不对<code>.md</code>的文件中的冲突字符进行上述包裹操作，即使<code>.md</code>文件并不放在<code>_posts</code>文件夹下，而是仅仅放在诸如<code>_drafts</code>等文件夹下，也无法正常使用<code>$ hexo g</code>命令。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;环境变量配置错误&quot;&gt;&lt;a href=&quot;#环境变量配置错误&quot; class=&quot;headerlink&quot; title=&quot;环境变量配置错误&quot;&gt;&lt;/a&gt;环境变量配置错误&lt;/h4&gt;&lt;p&gt;问题原因：&lt;br&gt;通常来说在安装Nodejs和Hexo时，会自动进行环境变量配置。但有时系统</summary>
      
    
    
    
    <category term="Tech" scheme="https://brielley.github.io/categories/Tech/"/>
    
    <category term="Blog" scheme="https://brielley.github.io/categories/Tech/Blog/"/>
    
    
    <category term="Hexo" scheme="https://brielley.github.io/tags/Hexo/"/>
    
    <category term="生命不息debug不止" scheme="https://brielley.github.io/tags/生命不息debug不止/"/>
    
  </entry>
  
  <entry>
    <title>Python Study Notes I</title>
    <link href="https://brielley.github.io/2020/03/01/tech-study-notes-python/"/>
    <id>https://brielley.github.io/2020/03/01/tech-study-notes-python/</id>
    <published>2020-03-01T13:44:10.731Z</published>
    <updated>2021-03-25T13:48:12.616Z</updated>
    
    <content type="html"><![CDATA[<p>【环境】<br>win10，python3.8.0，anaconda3</p><p>【安装、运行与退出、交互】</p><p><strong>安装</strong>：官网下载，安装时需要add to environment viablity，否则无法在命令运行符里交互。</p><p><strong>运行</strong>：win10下运行cmd或直接搜索进入命令运行符，输入<code>python</code>，如返回显示python版本号，且提行显示<code>&gt;&gt;&gt;</code>待输入命令，则已运行python，可直接在<code>&gt;&gt;&gt;</code>后输入命令，如：输入<code>1+1</code>，回车返回<code>2</code>；输入<code>print(&#39;hello world&#39;)</code>，回车返回<code>hello world</code></p><p><strong>退出</strong>：在<code>&gt;&gt;&gt;</code>后输入<code>exit()</code>，则退出python</p><p><strong>交互</strong>：<br>1）可以在命令运行符下，输入<code>python</code>进入python环境，再输入python语句回车看结果；<br>2）也可以在命令运行符下，先<code>cd 文件目录</code>，再输入<code>python filename.py</code>，看结果。<br>注意：如果.py文件里没有把计算结果<code>print()</code>出来，那么尽管计算了但不会返回结果；如果在命令运行符里不是输入的<code>python filename.py</code>而是直接输入<code>filename.py</code>，那么不会运行.py里的代码，而是会打开这个.py文件</p><p><strong>How to code</strong>：<br>新建一个.py文件，用文本编辑器如sublime打开，在里面写全部代码；<br>同时开着命令运行符，运行python，随时把其中的代码丢到&gt;&gt;&gt;后面去运行看效果</p><p>【输入输出】</p><p><strong>输出</strong>：<code>print(&#39;&#39;,&#39;&#39;,&#39;&#39;)</code> 注：在显示时，三个信息会依次显示，逗号会显示为一个空格</p><p><strong>输入</strong>：<code>input(&#39;words shown when ask for input&#39;)</code></p><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=input(&apos;Please enter your name: &apos;)</span><br><span class="line">print(&apos;Hello&apos;,name)</span><br></pre></td></tr></table></figure><p>新建一个.py文件，并在里面写下如上所示代码，并在命令运行符中<code>python test.py</code><br>则会返回提示<code>Please enter your name:</code>，在其后输入Anna，<br>则会返回结果<code>Hello Anna</code></p><p>【字符编码】</p><p>python本身是使用unicode的，兼容多种编码。但保存的.py文件python一般会用ascii编码去读，如果源代码全是英文没问题，但如果有中文会报错或读取为乱码，需要在.py文件最前面加上如下两行注释，来让它用utf-8编码去读：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p>第一行注释是让Linux或OS X系统知道这是一个python可执行程序，Windows系统会忽略这行。<br>第二行注释是让python知道要用utf-8编码去读这个源代码。</p><p>除了让python知道要用utf-8去读文件以外，还需要把.py文件本身用utf-8编码，这样才能被python读取到中文。最简单的方法是用把.py文件用记事本打开，另存为编码为“不带BOM的UTF-8”的副本即可。sublime里实现这个需要自定义package，因比记事本法复杂暂不赘述。</p><p>【格式】</p><p><strong>缩进</strong>：约定俗成四个空格作为缩进</p><p><strong>大小写</strong>：python是大小写敏感的，注意选对大小写</p><p><strong>浮点数</strong>：较大或较小的数字按照科学计数法表示，如125000=1.25e5，即1.25乘以10的5次方，同理，0.0000125=1.25e-5</p><p><strong>字符串</strong>：原则上用<code>&#39;&#39;</code>框起来，如果字符串中本身包含<code>&#39;</code>则用<code>&quot;&quot;</code>框起来，如<code>&quot;I&#39;m okay&quot;</code>，如果字符串本身既包含<code>&#39;&#39;</code>又包含<code>&quot;&quot;</code>则用<code>\</code>标志在字符串内的引号前，如<code>&#39;I\&#39;m \&quot;ok\!&quot;</code>=I’m “ok”!</p><p><strong>布尔值</strong>：真<code>True</code>，假<code>False</code>，与<code>and</code>，或<code>or</code>，非<code>not</code></p><p><strong>空值</strong>：<code>None</code></p><p><strong>变量赋值</strong>：python中的变量赋值用<code>=</code>，如<code>x=1 x=x+2</code>。新赋值会覆盖旧赋值，且可以和旧赋值的类型不同，如<code>x=1 x=&#39;abc&#39;</code>，在java中则不行，后者必须始终是数值或者始终是字符串。<br>变量命名习惯上一般有两种方法，一种是用下划线，如<code>to_do_list</code>，一种是第二个词开始首字母大写，如<code>toDoList</code>。</p><p><strong>常量表示</strong>：圆周率<code>PI</code>，自然常数<code>e</code>。</p><p>【常见计算】<br><code>==</code>：等于<br><code>!=</code>：不等于<br><code>a**b</code> ： a的b次方<br><code>a/b</code>：a除以b的精确值<br><code>a//b</code>：a除以b所得值的整数部分<br><code>a%b</code>：a除以b的余数<br><code>round(x, n)</code>：用四舍五入法取x的n位小数<br><code>range(m)</code>：生成从0到m-1共m个值的整数序列<code>[0,1,2,...,m-1]</code></p><p>【特殊字符】</p><p><strong>转义字符</strong>：<br>转义字符<code>\</code>。<code>\n</code>换行，<code>\t</code>制表符。需要直接表示\用<code>\\</code>。如\太多用<code>\\</code>有歧义需用r’’表示不转义，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r`\\\t\\`</span><br></pre></td></tr></table></figure><p>表示<code>\\\t\\</code>，而不是<code>\    \</code>。</p><p><strong>占位符</strong>：<br>格式为<code>%?</code>，?表示替换内容的格式，<code>%s</code>表示用字符串替换，如果不知道该用什么就可以都用它，这样会把别的格式比如数字转化为字符串来替换，<code>%d</code>用整数替换，<code>%f</code>用浮点数替换，<code>%x</code>用十六进制整数替换。其中整数和浮点数可以在前面规定精确到的小数位数或是否在前面补0，如<code>%2d</code>,<code>%02d</code>,<code>%.2f</code>。使用方法举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 想输出“尊敬的张三，会员号N-21-00233，您的余额为100.50元。”，可写为：</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'尊敬的%s，会员号N-%1d-%05d，您的余额为%.2f元'</span> % (<span class="string">'张三'</span>, 21, 233, 100.5))</span><br></pre></td></tr></table></figure><p>同样，需要直接表示%用`%%`，使用举例：<br>小明上学期72分，这学期85分，需要告诉小明他成绩提升了多少百分比，精确到小数点后一位，可写为：</p>undefined<p>【数列】<br><strong>不可变数列tuple</strong>（又称元组）：一旦定义后就不能修改<br><code>t=(1, [2, 3])</code>,可以在tuple里嵌套list，里面的1和<code>[]</code>的位置不能修改，但<code>[]</code>里的可以修改。<br><code>t=(1,)</code>为避免小括号的歧义，如果表tuple而里面的数组只有一个取值时需要加逗号。<br><code>t=(1, &#39;anna&#39;, 2.33)</code>，一个组里可以同时有不同格式整数、字符串、浮点数等。</p><p><strong>可变数列list</strong>（又称数组）：定义后可以修改<br><code>len(L)</code>求list里包含的数值个数<br><code>listname[0], listname[1], listname[2], listname[-1]</code>求数组中第1、第2、第3、倒数第1个值，如果超出长度没有取值会报错<br><code>listname[1][0]</code>取数组中第2个值也是一个子数列中的第1个值<br><code>listname[n:m]</code>，又称作“切片”。取数组中第n个到第m个值<code>[nvalue, n+1value,...,m-1value, mvalue]</code>，可省略n或m，表示从开头取到m或从n取到结尾，n和m均可用负数表示倒数第n或m个值。<br><code>listname.append(&#39;ToBeAdd&#39;)</code>追加到列最后<br><code>listname.insert(2,&#39;Tobeadd&#39;)</code>插入到数列第3个值的位置<br><code>listname.pop()</code>删除最后一个值<br><code>listname.pop(1)</code>删除数列第2个值<br><code>listname[2]=&#39;abc&#39;</code>替换数列第3个值</p><p>【集合】<br>一种是只有key的集合set：<br><code>setname=set([1,2,3,3,4,5,5,6])</code>，注意set的key是不重复的，按前面的输入后会自动去掉重复值。<br><code>setname.add(keytobeadd)</code>向已建set里添加key<br><code>setname.remove(keytoberemove)</code>删除key</p><p>一种是有value和key对应的集合dict（又称字典）：<br><code>dictname={&#39;key1&#39;:value1, &#39;key2&#39;:value2, &#39;key3&#39;:value3}</code>，新建dict。dict在建立的时候key就定下来了，不能修改，只有每个key对应的value可以改。<br><code>dictname[keyn]=valuen</code>，在已建dict里为第n个key赋值valuen。可先通过<code>&#39;keyn&#39; in dictname</code>看返回是<code>True</code>还是<code>False</code>来检查keyn是否存在，如果已经存在，会覆盖原来的值，如果不存在，会新增keyn这个key。<br><code>dictname.pop(keynamem)</code>，删除keynamem及其对应的valuem，注意是<code>()</code>不是<code>[]</code>。<br>把dict拆成数列输出：<br><code>dict.keys()</code>，输出所有key的数列，<br><code>dict.values()</code>，输出所有value的数列，<br><code>dict.items()</code>，输出把key-value变成tuple的数列list，如<code>list(dict.items())</code>会输出<code>[(key1,value1),(key2,value2)...]</code><br>dict和list一样，都可以嵌套多层形成多维数组。在定义dict的时候用`{{}}`，但查询的时候用<code>[][]</code>就好。</p><p>【条件判断】<br>python的条件判断使用if else，可嵌套多层，基本格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件1:</span><br><span class="line">    执行1</span><br><span class="line"><span class="keyword">elif</span> 条件2:</span><br><span class="line">    执行2</span><br><span class="line"><span class="keyword">elif</span> 条件3:</span><br><span class="line">    执行3</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    执行4</span><br></pre></td></tr></table></figure><p>注意：<br>1）冒号<code>:</code>与缩进<code></code><br>2）如果需要判断的条件是input的，那么默认input的是字符串，如果要进行数字相关判断，需要用<code>int(inputletters)</code>或<code>float(inputletters)</code>来把字符串转换成整数或浮点数后再进行判断，否则会报错。<br>3）if可以嵌套多层，每层if都需要比之前那层缩进4空格，否则会报错。</p><p>【循环】<br>python的循环语句有两种，一种是<code>for x in []:</code>，一种是<code>while x&lt; :</code>，具体基本格式如下：<br>假设需要求1加到100，可以有两种写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(101):</span><br><span class="line">    sum = sum + x</span><br><span class="line"><span class="built_in">print</span>(sumnum)</span><br></pre></td></tr></table></figure><p>注意x和sum的定义，及for in后的冒号和缩进。<br>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=1</span><br><span class="line">sum=0</span><br><span class="line"><span class="keyword">while</span> x &lt;= 100:</span><br><span class="line">    x = x + 1</span><br><span class="line">    sum = sum + x</span><br><span class="line"><span class="built_in">print</span>(sum)</span><br></pre></td></tr></table></figure><p>在使用while中，可以使用break提前退出循环，或使用continue跳过当前循环开始下一次循环。<br>但能不用最好不要用，break和continue使用多了以后如果出错容易死循环，最好尽量还是使用for in和while控制条件来实现。<br>break使用范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n=1</span><br><span class="line"><span class="keyword">while</span> n&lt;=100:</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    n=n+1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'END'</span>)</span><br></pre></td></tr></table></figure><p>以上表示打印1到100，最后打印END，如果希望打到10的时候就停止，可以修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n=1</span><br><span class="line"><span class="keyword">while</span> n&lt;=100:</span><br><span class="line">    <span class="keyword">if</span> n&gt;10:</span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    n=n+1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'END'</span>)</span><br></pre></td></tr></table></figure><p>continue使用范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n=1</span><br><span class="line"><span class="keyword">while</span> n&lt;=10:</span><br><span class="line">    n=n+1</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure><p>以上表示打印1到10，如果希望只打印奇数，可以修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n=1</span><br><span class="line"><span class="keyword">while</span> n&lt;=10:</span><br><span class="line">    n=n+1</span><br><span class="line">    <span class="keyword">if</span> n%2=0:</span><br><span class="line">    <span class="built_in">continue</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure><p>【内置函数】<br>参见python<a href="https://docs.python.org/3/library/functions.html#abs" target="_blank" rel="noopener">官方文档</a></p><p>【自定义函数】<br>基本格式(注意冒号和缩进，冒号后缩进范围内会视为函数，未缩进不视为)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def functionname(x):</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">return</span> ...</span><br></pre></td></tr></table></figure><p>函数的参数可以有多个，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def func(x,y):</span><br><span class="line">    <span class="built_in">return</span> x+y</span><br></pre></td></tr></table></figure><p>函数的参数还可以是开关，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def func(x,y,method)</span><br><span class="line">    <span class="keyword">if</span> method==<span class="string">'plus'</span>:</span><br><span class="line">        <span class="built_in">return</span> x+y</span><br><span class="line">    <span class="keyword">elif</span> method==<span class="string">'minus'</span>:</span><br><span class="line">    <span class="built_in">return</span> x-y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'error'</span>)</span><br></pre></td></tr></table></figure><p>参数可以设置默认参数，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def func(x,y=1,method=<span class="string">'plus'</span>)</span><br><span class="line">    <span class="keyword">if</span> method==<span class="string">'plus'</span>:</span><br><span class="line">        <span class="built_in">return</span> x+y</span><br><span class="line">    <span class="keyword">elif</span> method==<span class="string">'minus'</span>:</span><br><span class="line">    <span class="built_in">return</span> x-y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'error'</span>)</span><br></pre></td></tr></table></figure><p>进行上面的修改后，表示如果输入<code>func(x)</code>则默认输出<code>x+1</code>，输入<code>func(x,y)</code>，则默认输出<code>x+y</code>，输入<code>func(x,y,&#39;plus&#39;/&#39;minus&#39;)</code>才按照完整的函数进行计算。<br>自定义函数可以进行复杂的多步运算，return的可以是多个值，如果值超过1个是，python会以tuple形式返回。</p><p>调用自定义函数：<br>把自定义的<code>functionname()</code>函数保存为<code>functionfile.py</code>文件，然后在运行cmd中进入python后调用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from functionfile import functionname</span><br><span class="line">&gt;&gt;&gt;functioname(input)</span><br><span class="line">output</span><br><span class="line">&gt;&gt;&gt; _</span><br></pre></td></tr></table></figure><p>如果没有想好定义的函数具体要怎么做，可以用<code>pass</code>定义一个空函数，这样让程序先跳过这里运转起来，避免报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def nop()</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>pass作为占位符，不仅可以用在定义空函数里，也可以用在其他语句里。</p><p>【包/类/模块】<br>他人写好的保存为.py的自定义函数，称为模块，一些模块组成一个类，一些类组成一个包。<br>一些常见包：<br>数据分析：pandas，numpy，scipy<br>绘图：matplotlib, seaborn<br>机器学习：scikit-learn, Gensim, NLTK<br>爬虫：urllib, BeautifulSoup</p><p>安装包：运行cmd，输入<code>pip install pandas</code>，如果没安装会进行安装。<br>也可采用一些集成了若干包的工具软件，比如Anaconda，集成了主流数据分析pandas numpy scipy、绘图matplotlib、机器学习scikit-learn的包，可以直接去<a href="https://www.anaconda.com/distribution/" target="_blank" rel="noopener">官网</a>下载安装软件。</p><p>加载包：<code>import pandas</code>，每次使用前都需加载。</p><p>【numpy】<br>每次使用前载入，用as取别名方便调用：<br><code>import numpy as np</code></p><p>创建一维数组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;data1=[1,2,3,4,5]</span><br><span class="line">...array1=np.array(data1)</span><br><span class="line">&gt;&gt;&gt;array1</span><br><span class="line">&gt;&gt;&gt;array([1,2,3,4,5])</span><br></pre></td></tr></table></figure><p>创建多维数组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;data2=[[1,2,3],[4,5,6]]</span><br><span class="line">...array2=np.array(data2)</span><br><span class="line">&gt;&gt;&gt;array2</span><br><span class="line">&gt;&gt;&gt;array([[1,2,3],</span><br><span class="line">      [4,5,6]])</span><br></pre></td></tr></table></figure><p>一个array内部的元素必须是相同类型，都是数值或都是都是字符组，查询数组类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;array2.dtype</span><br><span class="line">&gt;&gt;&gt;dtype(&apos;int32&apos;)</span><br></pre></td></tr></table></figure><p>数组的计算：<br><code>array1+1</code>为<code>[2,3,4,5,6]</code>,<code>array1*array1</code>为<code>[1,4,9,16,25]</code></p><p>数组的索引：<br>和list一样，用方括号和数字<code>array1[1]</code>为2，<code>array2[0]</code>为<code>[1,2,3]</code>，<code>array2[0][1]</code>为2</p><p>【pandas】</p><p>每次使用前载入，用as取别名方便调用：<br><code>import pandas as pd</code></p><p>pandas有两种数据结构，一种是<code>Series</code>，放一维数组，自带数据标签（索引index），一种是<code>DataFrame</code>，放表格式数据，类似excel或者sql的表格，行和列都自带数据标签。注意python是区分大小写的。</p><p><strong>Series</strong></p><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s=pd.Series([1,2,3])</span><br><span class="line">&gt;&gt;&gt;s</span><br><span class="line">&gt;&gt;&gt;0    1</span><br><span class="line">   1    2</span><br><span class="line">   2    3</span><br><span class="line">   dtype=int64</span><br></pre></td></tr></table></figure><p>左边的0 1 2即是自动生成的索引，索引名可以自定义，比如将上面的生成Series写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s=pd.Series([1,2,3],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br></pre></td></tr></table></figure><p>那么左边的索引就不是0 1 2而是a b c。</p><p>用索引取值的原理和numpy里的array以及python自带的list差不多，都是用方括号，在上面的例子里，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s[&apos;a&apos;]取1</span><br><span class="line">s[&apos;a&apos;:&apos;c&apos;]取a    1</span><br><span class="line">            b    2</span><br><span class="line">            c    3</span><br><span class="line">s[[&apos;a&apos;,&apos;c&apos;]]取a    1    #注意要嵌套一层方括号</span><br><span class="line">              c    3</span><br></pre></td></tr></table></figure><p>除了list以外，dict也可以转Series，dict里的key会变成Series里的index。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;dict1=&#123;&apos;name&apos;:&apos;ana&apos;,&apos;gender&apos;:&apos;f&apos;&#125;</span><br><span class="line">&gt;&gt;&gt;s2=pd.Series(dict1)</span><br><span class="line">&gt;&gt;&gt;s2</span><br><span class="line">&gt;&gt;&gt;name      ana</span><br><span class="line">   gender      f</span><br><span class="line">   dtype: object</span><br></pre></td></tr></table></figure><p>字典转Series也可以自定义index，如果自定义的index比dict里的key有多的，会自动生成空值NaN。接上，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s2=pd.Series(dict1,index=[&apos;ana&apos;,&apos;gender&apos;,&apos;age&apos;])</span><br><span class="line">&gt;&gt;&gt;s2</span><br><span class="line">&gt;&gt;&gt;name      ana</span><br><span class="line">   gender      f</span><br><span class="line">   age       NaN</span><br><span class="line">   dtype: object</span><br></pre></td></tr></table></figure><p><strong>DataFrame</strong></p><p><strong>生成</strong>：<br>一般是用传入字典的方式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;dict2=&#123;&apos;name&apos;:[&apos;ana&apos;,&apos;bella&apos;,&apos;cavin&apos;],&apos;gender&apos;:[&apos;f&apos;,&apos;f&apos;,&apos;m&apos;]&#125;</span><br><span class="line">&gt;&gt;&gt;df1=pd.DataFrame(dict2)</span><br><span class="line">&gt;&gt;&gt;df1</span><br><span class="line">&gt;&gt;&gt;     name  gender</span><br><span class="line">   0     ana       f</span><br><span class="line">   2   bella       f</span><br><span class="line">   3   cavin       m</span><br></pre></td></tr></table></figure><p>可以看到，DataFrame会自动补充行索引，而列标签则会自动用字典中的key，类似于sql里的column。</p><p>查看DataFrame有几行几列何种type有无空值占用内存等信息：<br><code>&gt;&gt;&gt;df1.info()</code></p><p><strong>修改</strong>：<br>DataFrame的行标签索引无法修改，但可以查看详情：<br><code>&gt;&gt;&gt;df1.index</code><br>也可以对标签进行重命名：<br><code>&gt;&gt;&gt;df1.index=[&#39;no1&#39;,&#39;no2&#39;,&#39;no3&#39;]</code></p><p>列可以修改，修改方式如下：<br><code>&gt;&gt;&gt;df1[&#39;age&#39;]=22</code>，新增一个age列，每行的取值均为22<br><code>&gt;&gt;&gt;df1[&#39;age&#39;]=[21,24,22]</code>，修改age列的值，分别赋值为21,24,22<br>更改列数据类型：<br><code>&gt;&gt;&gt;df1.age=df.age.astype(&#39;str&#39;)</code>，可将age列的数据类型从数值转化为字符串。</p><p><strong>选取</strong>：<br>选取列：<br><code>df1[&#39;age&#39;]</code>或<code>df1.age</code>均可选取age列，输出的是age的所有值和它们对应的索引值。</p><p>选取行：<br><code>df1[0:1]</code>会切片出表头和索引为0的ana这行<br><code>df1[1:2]</code>会切片出表头和索引为1的bella这行<br><code>df1.iloc[0]</code>会选取索引为0的ana这行<br><code>df1.loc[&#39;no1&#39;]</code>会选取索引被命名为no1的ana这行</p><p>进阶选取：<br>选取多列：<code>df1[[&#39;name&#39;,&#39;age&#39;]]</code>，注意要嵌套一层方括号<br>选取多行：<code>df1[df1.age&gt;22]</code>或<code>df1[df1[&#39;age&#39;]&gt;22]</code>均可表示选取年龄大于22的行<br>         <code>df1[df1.gender==&#39;f&#39;]</code>选取性别为女性的行</p><p>多条件筛选：<br><code>df1[(df1.gender==&#39;f&#39;) &amp; (df1.age&gt;23)]</code>，注意不能用<code>and``or</code>只能用<code>&amp;``|</code><br>这种写法较为复杂，如果条件简单这样写比较直观，但如果条件复杂，就不太清晰。</p><p>实现复杂的多条件筛选更常见的是用query，比如上面的筛选用query可以写作：<br><code>df1.query(&#39;gender==&quot;f&quot; and age&gt;23&#39;)</code>，注意在query里是用and or，外面是小括号不是方括号，小括号内用单引号引起来，如果里面有字符串要用双引号。</p><p>query可以实现一些相对较为复杂的筛选，比如需要选出大于等于24岁的女性和大于等于22岁的男性时：<br><code>df1.query(&#39;(gender==&quot;m&quot; and age&gt;=22) or (gender==&quot;f&quot; and age&gt;=24)&#39;)</code></p><p><strong>运算</strong>：<br>可以直接在列上进行运算，比如：<br><code>df1.age=df1.age+1</code>，则所有人年龄增加1</p><p>如果是两个DataFrame之间的运算，直接运算会按照同行同列的数字相运算，如果某行列只有一个有取值，会取NaN空值<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd     #载入pandas包</span><br><span class="line">import numpy as np      #载入numpy包</span><br><span class="line">df2=pd.DataFrame(np.arange(4).reshape(2,2),columns=[&apos;a&apos;,&apos;b&apos;])       #生成2x2的dataframe，取值0 1 2 3，列名a b</span><br><span class="line">df3=pd.DataFrame(np.arange(6).reshape(2,3),columns=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])   #生成2x3的dataframe，取值0-5，列名a b c</span><br><span class="line">df2+df3</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   a   b    c</span><br><span class="line">0  0   2  NaN</span><br><span class="line">1  5   7  NaN</span><br></pre></td></tr></table></figure><p>另一种方法是用加减乘除的函数<code>add</code>，<code>sub</code>，<code>mul</code>，<code>div</code>，这样可以指定某个dataframe无取值时的赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.add(df3,fill_value=0)</span><br></pre></td></tr></table></figure><p>此时的输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   a   b    c</span><br><span class="line">0  0   2  2.0</span><br><span class="line">1  5   7  5.0</span><br></pre></td></tr></table></figure><p>Credit：这篇study notes是跟着网络教程自学python过程中的学习笔记，网络教程主要来自<a href="https://www.liaoxuefeng.com/wiki/1016959663602400" target="_blank" rel="noopener">廖雪峰</a>、<a href="https://www.zhihu.com/people/qin-lu-17/posts" target="_blank" rel="noopener">秦路</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;【环境】&lt;br&gt;win10，python3.8.0，anaconda3&lt;/p&gt;
&lt;p&gt;【安装、运行与退出、交互】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;：官网下载，安装时需要add to environment viablity，否则无法在命令运行符里交互。&lt;</summary>
      
    
    
    
    <category term="Tech" scheme="https://brielley.github.io/categories/Tech/"/>
    
    <category term="Study Notes" scheme="https://brielley.github.io/categories/Tech/Study-Notes/"/>
    
    
    <category term="Python" scheme="https://brielley.github.io/tags/Python/"/>
    
    <category term="Database" scheme="https://brielley.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>三十五只猫头鹰的来信  &lt;i class=&quot;fa fa-map-o&quot;&gt;&lt;/i&gt;</title>
    <link href="https://brielley.github.io/2020/03/01/translation-hp-ggad-35owls-01-16/"/>
    <id>https://brielley.github.io/2020/03/01/translation-hp-ggad-35owls-01-16/</id>
    <published>2020-03-01T08:25:24.016Z</published>
    <updated>2021-03-24T10:26:59.123Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>无授权翻译练习，一切权利属于罗琳和Letterblade</p></li><li><p>原文链接戳<a href="https://archiveofourown.org/chapters/16135093?view_adult=true" target="_blank" rel="noopener">Thirty-five Owls</a>  by  Letterblade</p></li><li><p><a href="https://brielley.github.io/2020/03/01/translation-hp-ggad-35owls-01-10/">阅读全文</a>并点开右下角icon可使用目录跳转至指定章节</p></li></ul><hr><h2 id="1951-9-10"><a href="#1951-9-10" class="headerlink" title="1951. 9. 10."></a>1951. 9. 10.</h2><p>邓布利多——</p><p>咳，是我，你的老朋友格林德沃 · 盖勒特。你大概会惊讶于收到这封信，但相信我，你的惊讶程度不会超过我发现自己在给你写信的时候。但你知道，我这人一贯走我想走的路，做我想做的事。</p><p>希望这封信能在合适的时机送到你手上，尤其在听过你那些关于英国猫头鹰的溢美之词后。这些鸟在纽蒙迦德塔附近飞得可不怎么样，毕竟这儿的暴雨大得跟山洪爆发似的。我住在避雷针下二十尺的地方，每当乌云被撕裂的时候，它就会劈剥作响，就像整个城堡在承受钻心咒。但每当雷电锤击云层，黑暗中一道光束劈散层层重云，狼人最爱的满月透过北窗的铁栏照进囚室，那景象壮丽极了。虽然这大概不合你的口味，我猜你会嫌它太原始野蛮。</p><p>现在你一定正鄙夷地瞪着这封信和这只邋遢的猫头鹰（她喜欢吃白鼠）。你真的会为此惊讶么，我的老朋友，为我在发生了所有那些事情之后仍会蛋疼到给你写信而惊讶？我想你应该不会。你只会说，这个亲爱的老盖勒特，拍不死赶不走的德国虫豸，即使现在他整日蹲在监狱无所事事，也还是没事找事从不给我留点儿空闲时间。阿不思，你称赞过很多次的我的金发，现在已经开始变灰了，你能想象这个么！说回来，就监狱而言，这里的石工活儿做得相当不错，让我在无所事事的时候可以赞美那些石匠们，如果诅咒也可以算作一种赞美的话。他们留下的魔法疤痕就像花岗岩上粗粝的藤蔓，漂亮极了。希望你能喜欢这个反讽，老朋友，毕竟你能指望一个被关在自己囚牢里的人给你带来什么呢。</p><p>你还在那所学校？还是喜欢教学？成天看书？爱吃甜食？照看着<strong>它</strong>？你最好有这么做。</p><p>代我向你的疯鸟问好，希望我之前没把他伤得太重。</p><p>听着，阿不思，我希望，希望，连着我囚房墙上的霉点一起，嘲笑我吧，继续恨我，就像你一直以来那样，祝你愉快。</p><h2 id="1951-10-13"><a href="#1951-10-13" class="headerlink" title="1951. 10. 13."></a>1951. 10. 13.</h2><p>亲爱的盖勒特，</p><p>感谢你的来信。当我读它的时候，我总是回想起你曾经评价过我，说世上没有任何力量能阻止我成为一个（用你的原话来说是）”自以为是的混蛋”。我想我确实和过去一样无可救药。自从我们的决斗之后，我就一直觉得会有一只猫头鹰带来你的信，所以，其实这封信并不让我惊讶，说实话，如果一两年后它还没到的话，我恐怕反而会有点担心。</p><p>我给了你的猫头鹰一个干燥咒，一处福克斯的栖枝，和三只白鼠。经过这样一段糟糕的飞行后，她的脾气仍然好得不可思议。（福克斯也很好，盖勒特，即使是你，要伤到他也不是件容易的事。）我确实还在霍格沃兹，教授变形术课程，同时也是格兰芬多院长和校长助理。我可能没有我们初见的时候那么热衷于改变世界的力量了，但我确实过得很愉快。学期开始的时候总是忙得要死，所以我回信迟了，很高兴十月十三号是一个相对清静的日子。</p><p>所以，是的，盖勒特，我并不惊讶于你的来信，而这或许反过来会令你惊讶。但我不恨你，我在我们决斗的时候说过，我现在仍然是这么说。我也并不鄙夷你，或是嘲笑你。不知道这会不会让你觉得难以理解，但我觉得我可能有点难以解释。这或许是”自以为是的混蛋”的又一个典型症状。</p><p>(说到决斗，放心，我有照看好<strong>它</strong>。)</p><p>观察自然以外的时间里你是怎么打发时光的？希望你能过得舒适，能被允许阅读和通信。我随信附上了一本你可能会感兴趣的书，是二十世纪威尔士出版的一些对变形术理论的有趣改进，我想你或许之前因忙于征服欧洲还没来得及读到。</p><p>祝诸事顺意</p><p>[附件：《鼠群与录取信》，格瓦西米·格瓦特尼, 依安托普·马多格著]</p><h2 id="1951-10-16"><a href="#1951-10-16" class="headerlink" title="1951. 10. 16."></a>1951. 10. 16.</h2><p>邓布利多——</p><p>我的记忆可能不太好，但我非常确信，我当时的用词应该是“你这个自以为是傲慢恼人的混蛋！假装谦卑其实满肚子血统论的伪君子！把你的糖果拿走！”这不是醉话，说这话的时候我很清醒。</p><p>但反正，我只是个失去魔杖余生都会在这间斗室中慢慢变疯的囚徒，我的记忆真的可信么？我猜你现在就会告诉我，所有那些我用来在暗夜里慰藉自己的记忆都是假的，我的手从未穿过你的发，我从未见过你魔杖下流淌出的黑魔法火光照亮你的脸。我猜你接下来会告诉我，你从未在高潮时从喉咙深处发出尖叫。我猜你再接下来会告诉我，我从未在阿不福斯外出时把你压倒在那张老橡木咖啡桌上。</p><p>那就这样下去吧，用你的变形术书嘲弄不能再用魔法的我，用你高高的鼻子俯视我鄙夷我。随便了。但无论如何告诉我，老朋友，是谁打破了它？是谁让你从曾经的满腔热切变成了现在的心灰意冷？</p><h2 id="1951-11-12"><a href="#1951-11-12" class="headerlink" title="1951. 11. 12."></a>1951. 11. 12.</h2><p>盖勒特，</p><p>是阿不福斯。他把阿莉安娜的死归咎于我。在她的尸骨面前，我没法假装什么也没发生过。</p><p>我并不怀疑你的记忆或是神智。是的，我们曾触碰彼此，我不会向你否认这一点，虽然它确实是我隐藏最深的秘密。那个夏天的我们太年轻，又喝得烂醉，而我是个无知到去玩儿自己并不了解的力量的傻瓜。你还希望我说什么呢，盖勒特？</p><p>随信附上另一本我一直非常喜欢的书，希望它不会像上本书那样让你想起你所失去的。</p><p>对不起。</p><p>[附件：《海浪》，弗吉尼亚·伍尔芙著]</p><h2 id="1952-8-4"><a href="#1952-8-4" class="headerlink" title="1952. 8. 4."></a>1952. 8. 4.</h2><p>亲爱的盖勒特，</p><p>我知道最好是像过去一样等你来联系我，但我怕我已经没有了过去的优势——纽蒙迦德超出了摄神取念的范围，我现在只能去猜什么时候给你写信是最好的。</p><p>我记得在我们刚开始相处的那几周里，你经常生闷气。当你被冒犯的时候，你会忽然离开，把自己封闭起来，散发着低气压，然后在几小时后仿佛什么也没有发生过一样的回来。我猜现在几小时变成了几个月？当我们不再在一起的时候，时间大概会变得更长，而我只有过那些短暂的经历。我说这个并不是为嘲笑你，我想说我觉得你生闷气的样子非常迷人，恣意飞扬的情绪一直是你魅力的一部分。</p><p>我知道我最好不要打断你，但我做不到。我想这是我人生中一直做得非常失败的事情之一：往极限里逼自己，甚至进而干涉他人。如果此刻我们还是朝夕相处，我想你会大骂我虚伪然后离我而去……</p><p>我来，是为求回到你身边。不是作为一个声名鹊起的巫师，不是作为一个霍格沃兹的教授，不是作为任何一个令我骄傲的身份。仅仅是作为一个人，那是我们最终的本质。你曾称这个人老朋友，你曾给这个人写信寻求（我只敢这样猜想）简单的通信。我喜欢这样的通信我想要这样的通信。请相信我所说的一切都发自肺腑，而你有一切权利生我的气。</p><p>我不恨你，你能让自己相信这个吗？你能让自己不恨我吗？</p><p>祝一切顺利</p><h2 id="1952-9-6"><a href="#1952-9-6" class="headerlink" title="1952. 9. 6."></a>1952. 9. 6.</h2><p>阿不思——</p><p>在划掉了好几种烂透了的方案之后，我决定用一句简单的”谢谢你”作为这封信的开始。我迷人的生闷气的样子哈哈哈哈哈哈哈哈，你这彩虹屁让我大笑了好几周。</p><p>但麻瓜文学？坦率的说，阿不思，你寄给我这本安全无害的书之后，我就不生气了。这个叫伍尔芙的女作者太神奇了。</p><p>至于摄神取念？不用读我的大脑那么麻烦。是的，日子变得漫长了，就像我们过去聊天的时候，在你唇舌和手指间无限拉长的太妃糖一样。那真是太令人分心了，你记得么？我记得我的羽毛笔好几次掉在了羊皮纸上，炸出一串令人愉悦的绿色烟火。</p><p>你求人的样子总是让人受不了。记得我过去施法把你的腿固定在床架上让你等着的时候么？你看起来可怜极了，甚至没法维持基本的礼节，我那次本来气得想揍得你屁股开花的……</p><p>至于说我的生活，我的你让我陷入的太妃糖一样的生活和回忆。</p><p>早上：守卫们开始巡视，再三检查我的纸页上有没有什么危险的算术占卜。我刚来那阵他们曾经粗暴对待过我，没有话语，只有拳头，还有一个女人一直对着我尖叫你杀了我丈夫你杀了我丈夫。几年之后他们就不再这么做了，因为我一直嘲笑他们。阿不思，我和你一样，对自己的天赋有着愚蠢而无穷的骄傲。那种被迫跪在碾破你内脏的硬石板地上用残缺的齿缝渗血的喉咙嘲笑折磨你的人的天赋，在监狱中这种天赋远比智慧或是魔法有用。</p><p>食物吃起来像烂泥，我失去了不少体重。窗户玻璃老旧得失去了光泽，让我没法看到现在的自己，但我猜我看起来大概像一具骷髅，很难想像那个英俊的英国青年曾经和我在河岸上做过爱，啊哈？</p><p>太妃糖一样的日子。我看书，直到我的视力开始模糊，停一停，然后继续看书，批注。也许我应该写进遗嘱把我的藏书遗赠给你——但，不，毫无疑问，你会觉得恶心。我的魔法仍然是黑暗的，即使我已经无法亲手练习它了，我只能从那些古老的手卷中漫无目的地翻阅搜寻。告诉我，老朋友，你找到了那些圣器吗？没有我的时候你实现了我们的梦吗？你掌控了死亡吗？现在你已经能把你的搭档剥去外壳丢进耻辱和牢狱了……</p><p>哈，我想起我在德姆斯特朗写论文的时候就是这样，絮絮叨叨不知所云像根老藤，半只眼看着《强力药剂》半只眼写着羊皮纸一不留神蘸墨水时把钢笔伸进了蝾螈血里……</p><p>我穿着光滑柔软的脓疱在地板上散步，三只我抓到的老鼠在角落的钩环架上荡秋千，它们经过的时候我踩住了它们的尾巴拧断了它们的脖子用我的牙齿撕开了它们的皮肉，它们在几年里慢慢地腐烂成了三具白骨，成功阻止了其它虎视眈眈的觊觎者——在那以后再也没有老鼠造访过我。有时你会震惊于你可以习惯怎么样的恶臭。</p><p>傍晚——冬天的有几个月我能从我的窄窗看到阳光，冰冷碜黄的冬日太阳把它碎裂暗淡的光投在雪山上。我想收集雪风中的灰魔法在云中撒上三滴血像爱尔兰女妖一样飞到山顶。只是飞翔，就像我曾经能做的那样，我甚至可以飞完后安静地回到牢房。像我过去手持着<strong>它</strong>从老格里戈维奇那里飞翔一样，开怀地笑着。似乎我不小心唤起了曾经我费力拼凑出那些古老大部头们中的黑暗咒语时兴奋得和你跳舞的回忆。令人望之生畏地飞翔着对黑魔王来说是必不可少的，但除此之外，它同样令人开怀。</p><p>深夜，窗户玻璃冻成了冰，月亮隐入了翻涌着的黑云。我爱这北方，还好我的余生是在这座北地最高的塔上度过，我可以看到峻石峭壁下向远方延伸的原野，和遥远得仿佛人造盆景一样的英格兰。我曾经用我的魔杖在你赤裸的背脊上用冰晶画过的伏尔加河，它会在深夜里绽破迸溅，但在拍击河岸时会轻柔得像羽毛，像沿着你的脊髓滑下的让你发出低吟的水珠。</p><p>当我用温暖的手掌去触碰结冰的窗户时，会发生同样的事，融化的过程如此安静，没有任何人声，从来没有。</p><p>太妃糖一样的日子，阿不思，你把我丢到锁进的这样太妃糖一样的日子。现在，带着你的纳威和金妮走吧，把清静留给我。</p><p>你正在生闷气的，<br>知名不具</p><p>[译注]：纳威和金妮也是弗吉尼亚·伍尔芙所著《海浪》中的角色。</p><h2 id="1952-10-13"><a href="#1952-10-13" class="headerlink" title="1952. 10. 13."></a>1952. 10. 13.</h2><p>亲爱的盖勒特，</p><p>十三号又是一个清静的日子，无论迷信的人们有多畏惧它，对英格兰来说这些年的十三号都非常平静。谢谢你尽管生着闷气仍然寄来的信，你还是像过去那样有诗歌的天赋，在你年轻的时候它曾经让你的言语闪耀得令人目眩。</p><p>是的，我很清楚我对你做了什么，我不会为我做过的不得不做的事情道歉。为了——好吧，更伟大的利益，你必须被剥离权力以免危害世界。把我看作一个自以为是的老笨蛋吧——就像几周前一个学生给我起的这个让人印象深刻的绰号那样——希望这没有让你笑到不能自理（我甚至给我自己找了点白发来更贴近这个词儿）。听到你的遭遇，想到像你这样闪耀的头脑和天赋被浪费在太妃糖一样的日子上，我非常难过，希望我的绰号能至少提供给你一点娱乐。</p><p>我想，盖勒特，你有权知道我对从与你决斗中所获战利品的打算（我得承认我赞同你用<strong>它</strong>来代指它的谨慎习惯）。我打算把它带进我的坟墓，如果我能成功地打破它血迹斑斑的历史的话……好吧，既然说到了，我是个老笨蛋，但我相信，就像我这些年所看到的，没有它，这个世界会变得更好。</p><p>我必须承认，这是那少有的几件我并不期待你的回应的事情之一。</p><p>我必须再次道歉，虽然——但如果那次用冰的时候你确实是打算教我俄国地理的话，我恐怕我什么也没学到。因为我当时心思完全不在学习上。我发现很奇怪，虽然——我们那时才刚认识两个月，我得承认激情是一种神秘的存在，但你那么频繁地写到它，是因为那段你离开时随手抛开的短暂时光，对你很重要吗？</p><p>我真希望你早点告诉我关于狱卒的事，那样我早就把他们一链子换走了。相信我我这么说的时候并不真的希望堕落到句子里这样，但你的话的确让我怒火中烧。</p><p>我必须去工作了，</p><p>谢谢你</p><h2 id="1952-11-19"><a href="#1952-11-19" class="headerlink" title="1952. 11. 19."></a>1952. 11. 19.</h2><p>阿不思——</p><p>你真的要那么做吗？打破<strong>它</strong>的力量？</p><p>我想我甚至不应该浪费笔墨来问这个。</p><p>但，很奇怪，你的这个主意让我非常不安。打破抵抗<strong>它</strong>的所有历史……你拿着<strong>它</strong>了那么久，阿不思，你能一直感觉到<strong>它</strong>拖拽着你的心脏你的灵魂，用那种强大得无法抵抗的仿佛死亡本身一样的力量，想象一下那种力量——那古老的，独有的，改变一切的力量——永远地毁灭了……</p><p>老实说我甚至不知道我的回应是什么。但，阿不思，我猜你没有谋杀过人。</p><p>至于你那怒火中烧的小小时刻——阿不思，纽特蒙德没有摄魂怪，狱卒只是人类——而且，不，你不能妒嫉他们和我玩儿的小小运动。我已经在黑暗的道路上走得太远我可以接受任何东西除了麻烦，你能不能在彻底征服我了之后别无休无止地对我数落我犯下的罪？你不是已经在弃恶从善了之后丝毫不管这么做对你的为了更伟大的利益有什么影响仅仅因为我取了一个麻瓜的性命就把我丢进监狱了吗？</p><p>这里没有摄魂怪，但是每晚当我睡觉的时候，这里仍然充满尖叫。你觉得我是更想要听到那些被打败的巫师们的尖叫声呢，还是那些承受着折磨的麻瓜们的尖叫声呢，还是我自己在听到你背叛了我们的理想时发出的尖叫声呢，还是很多年前你在我手中发出的愉悦的尖叫声呢？我当然会一直想着它，我当然会一直写着它，你这个悲惨的老笨蛋，你那时美极了。</p><p>而如果你觉得曾经是这个世纪最大的黑魔头的密友和爱人让你蒙羞了——好吧，我接受你的报复。去教你的小孩，吃你的糖果，打扮你的鸟，把我埋了。但我们曾经一起闪耀过，即使是你也无法改变历史。</p><h2 id="1953-1-1"><a href="#1953-1-1" class="headerlink" title="1953. 1. 1."></a>1953. 1. 1.</h2><p>亲爱的盖勒特，</p><p>看起来你确实知道你没法让我放弃我的计划，这让我非常开心。如果我们的余生都得在猫头鹰的翅膀上争论这个就太耻了。</p><p>我当然有感觉到它，它的诱惑，就像你一样。但你有意识到它的危险吗，老朋友？有些东西必须被毁灭，而且，盖勒特，它没有生命。这么说很残酷，但它没有记忆，没有灵魂，没有生命。结束它，阻止它在下一代如同在我们这一代一样掀起腥风血雨并不是一场谋杀。</p><p>我恐怕，它其中的一个力量是，令与它密切相连的巫师对扭曲的爱有着无法自控的激情。看到你被它影响让我很难过。但我不会为不得不做的事情道歉——对——为了更伟大的利益。没有它所提供的诱惑，未来的世界会变得更好。打破它血腥的传承能在未来为强大巫师们陷入困惑时提供一种新的梨开方式……噢，亲爱的，是离开方式，在新年写这个让我有点酒后失言。</p><p>但，又一次的，我为不得不把你留在这样的情境感到抱歉。</p><p>但你是对的。这么说起来可能很残忍，但我确实，为爱你感到羞耻，如果爱人是对我们的描述的话。但得知我们过去的那些回忆能给你提供一些慰藉，我还蛮开心的。我<strong>过去</strong>以为，你大概更喜欢听到麻瓜的尖叫声？</p><p>总是用糖果打扰他人是我的坏习惯之一，所以我想，也许书更好一点？希望格特鲁特独特的句法能给你带来一些娱乐。</p><p>我承认，盖勒特，我也时常会想起我们一起度过的少年时光，我已经很久没有与一个人那么亲密，那么无所畏惧，那么毫无保留。你又一次对了，我没法改变历史，也很难否认共度那几个月我的愉悦和野心，那时我以为你的闪耀能拯救我。但那代价，盖勒特，那代价！你留下我一个人埋葬我的妹妹并永远与自我怀疑为伴，你留下我一个人不得不隐藏起部分的自我仅能用残缺的部分面对世界。</p><p>啊，现在天亮了，苏格兰的山丘蒙着冷冽的雾气，霍格沃兹附近没有人造景观，只有你喜欢的原野。云层很厚，遮住了不远处的森林，我一夜没睡，而且我……</p><p>希望你读得愉快，盖勒特。</p><p>[附件：《每个人的自传》，格特鲁特·斯坦著]</p><h2 id="1956-4-18"><a href="#1956-4-18" class="headerlink" title="1956. 4. 18."></a>1956. 4. 18.</h2><p>亲爱的盖勒特，</p><p>看起来我大概又让你生气了，我所能做的只有请求你的原谅，无论你感受到了什么那都不是我的本意。</p><p>英格兰仍维持在人造的和平中，即使麻瓜们也是如此。老校长迪皮特宣布了他的退休计划，而我将会接替他的空缺——绝大部分校董都已经签了字。我想我们得尽快找到新的变形术教授。过去几年里我看了几场非常精彩的魁地奇比赛，其中一场以求婚作为了结尾。</p><p>我想如果我问你的近况大概只会收到你的嘲笑。</p><p>我们要永远这样死循环下去吗？我说错话，道歉，恢复联系……</p><p>我希望至少格特鲁特给你带去了娱乐。</p><p>祝好。</p><h2 id="1956-7-11"><a href="#1956-7-11" class="headerlink" title="1956. 7. 11."></a>1956. 7. 11.</h2><p>尊敬的国际巫师联合会会长阁下（我当然听说了你的这项特别表彰）——</p><p>你说我们的余生？你说永远？这么说我们是通过猫头鹰结婚了吗？你把我永绑在你的庄严宣誓中，就像青苔永绑在我牢房的石墙上那样了吗？石墙上的水锈斑点变得越来越多，有绿色的青苔从上面长起来，一开始像绿色的鳞片，然后慢慢像绿色的树叶，这个过程慢得让人无法想象。我的整个人生也慢得就像冻入了冰河。已经过去十年了，我已经在这间小小的房间里度过十年了，对吗？我觉得总有一天我会疯掉，或许我已经疯了。</p><p>看看你，看看你，伟大的国际巫师联合会阿不思邓布利多校长混蛋，被一杯新年淡啤酒醉得笔都握不稳，只因为几十年前干过一个德国男孩，就累觉不爱或者随便什么玩意儿了——而且你仍因为她的死怪我，对吗，阿不思？那是个意外，你这个醉坏了脑子的笨蛋，是意外，不是我，我发誓，我当年逃跑只是因为害怕——</p><p>再看看我，盖勒特格林德沃。曾经，每个欧洲魔法世界的小孩会因这个名字而高声欢呼或颤抖啼哭。曾经，我能一个咒语便能剥下每一片树叶在无风的天里把它们堆上三十尺高。曾经，我是存在的极限、是新世界的秩序，一个光明的未来新世界，我曾经想要为你和我缔造它——然后我到了这儿，慢慢腐烂，孤独到去介意某个虚伪造作的英国蠢佬会怎么想我。你一定很享受你的幻想对吧？那些我会被我的被害者的尖叫吓得噩梦连连的幻想？那些我在深夜里睁着眼忍受着过去的幽灵对我的无尽折磨的幻想，很符合你对世界是怎么运转的理念，不是吗，阿不思？小阿莉安娜经年累月地在每个深夜带着你回到过去审判我，对吗？</p><p>你问我的近况，邓布利多？近？况？我在这个你把我锁进的黑牢里的近况？整整四年（感谢你在我手表上施放的那些完美的魔法，让我能准确地计算出这个时间），我没有收到你的一封信，然后我终于收到了一封，上面是你当上了校长的炫耀？【一块难以辨认的深色墨渍】</p><p>你的困惑真是太可爱了，我是说真的，你不明白我为什么生你的气，对吧？因为你满怀善意，因为你带着友谊，所以我不可能是真的生气了，对吧？我只是又一次露出迷人的生闷气的样子了，对吧？</p><p>格特鲁特是个疯婊子，你想从中教会我点儿什么呢？我现在玩到你的游戏的哪一章节啦？我们已经通关了上一个章节，那个你每天和我朝夕相处身心交付，然后因为一个意外责怪我、背叛我、离开我，独自去完成了我们共同的任务的章节。下一个章节是什么？你设定好了我的前路，驱赶了我的空虚，品头论足了我的信条，然后呢？在你有空的时候，当你看够了以后，会突发奇想以真理和正义之名从英伦屈尊来这儿逛逛吗？</p><p>你锻造了我，邓布利多。你锻造了我，然后把我释放到了世界上。我想你的弟弟会同意，你很喜欢忘记那些不愉快的事实。</p><p>但，说够你了，来说说我吧，你破碎的流浪宠物黑魔王，你失败的实验品，失败到曾经会围着你的身体吟唱甜蜜的咒语，我猜，这也是那些你必须隐藏起来的部分之一，对吧？可怜的阿不思。</p><p>是啊，我们总是陷入死循环。现在，在我又一次被气得说不出话之前，我又回来了，回来嘲笑你。</p><p>我有了一个新笔友，邓布利多教授。不要觉得你是我唯一写信的人——梅林知道，如果你是唯一，那我早在数年前就宁可一头撞墙了。而且，有时候，和一个觉得全社会都在抛弃他的野心勃勃小黑巫师说话还挺可爱的。他是个很聪明但有点死板的英国小孩，有个很傻的自己拼凑的名字，在几年前找到了我。他的一些想法还不错，但毫无幽默感，在我提到我认识你的时候，他看起来被吓得不轻。</p><p>我告诉他你是一个喜欢利用人的伪君子，让他离你远点。看起来，他已经很怕你了，虽然你可能只是想要留意他一下。他没准儿会长成一个很危险的家伙。现在，你打算怎么对付一个不是你宠物狗的黑魔王呢？</p><p>最后，我对你的品味深表怀疑，阿不思邓布利多。格特鲁特是个疯婊子。</p><h2 id="1956-8-2"><a href="#1956-8-2" class="headerlink" title="1956. 8. 2."></a>1956. 8. 2.</h2><p>盖勒特，</p><p>教小孩子太久的危险之一，就是变得误以为自己无所不能，变得喜欢当别人的人生导师，哪怕实际上他自己只是个在人生道路上迷途的傻子。</p><p>我从未把你视作我的宠物狗，老朋友。一定要说的话，其实在那几个月里，我一直觉得我是你的宠物狗。我那时被你梦想的光芒所吸引，而当我意识到那些梦想完整的模样和隐含的代价时，我也感觉仿佛被背叛。但当人教了太久小孩，看事情就变得简单到非黑即白，这是它的又一个危险之一。</p><p>那么，恨我吧，如果这能让你的余生好过一些的话。我曾经特别孩子气地希望你能不恨我，甚至是在那之后——但总之，我只是一个迷途的老笨蛋。但，不管你怎么想我，我想我必须问一下你，那位你提到的英国男孩的拼凑名，不会恰好是伏地魔吧？我应该像你希望的那样把清净留给你，但我不得不逼自己问你，因为最近有很多围绕着这个名字的不祥传闻。</p><p>祝好。</p><h2 id="1956-9-27"><a href="#1956-9-27" class="headerlink" title="1956. 9. 27."></a>1956. 9. 27.</h2><p>邓布利多，</p><p>很奇怪的是你并没有给我什么特别的理由来帮你处理那个伏地魔问题（我这句话的句法符合英国人习惯了吧？）。伏地魔写信给我问的主要都是一些技术问题，他似乎很迷恋死亡这个大部分黑巫师都不太喜欢的领域。在他描述的宏伟蓝图里，有些不那么健康的倾向，你可能已经知道了。我觉得他对死亡的理解明显不是万圣节的那个范畴。</p><p>他谈论了很多他关于改进死咒的疯狂理论——但我觉得应该不会出什么成果。死咒和魂器，很飘渺的理论。反正对我来说，我还是更想要自己的每一块儿都好好呆在一起，如果谁真发明出了切一块出去不死的办法，我也觉得那还不如死了算了，这样半死不活地飘来飘去，人生还有什么意思。</p><p>问题在于，阿不思，我不恨你。我从没恨过你，以后也不会恨，考虑到你已经对我做过最坏的事情了，以后即使再做什么，应该也不至让我恨你。</p><p>顺便一提，格特鲁特说，“身份认同很可笑，做自己很可笑，因为对你自己来说，你从来就不是自己，除非你记得你自己相信你自己”。</p><h2 id="1957-2-28"><a href="#1957-2-28" class="headerlink" title="1957. 2. 28."></a>1957. 2. 28.</h2><p>盖勒特，</p><p>我想你可能会很高兴地知道你仍然能让我开怀大笑。确实是很飘渺的理论，我想（因为每个人都知道你越想做好就越容易会把它搞砸）格特鲁特也会同意这一点。</p><p>伏地魔几天前来找过我，就在霍格沃兹。我原准备忘掉那些我听到过的关于他的黑暗传言，但他的一切言行都只是印证了我的恐惧。英国可能真的要出一个自己的黑魔王了。</p><p>我知道你并没有什么理由听我的建议，但我还是想建议你跟他停止联系。伏地魔也许比你要稚嫩很多，但他行事冲动，野心勃勃，而且就像你推断的那样，迷恋死亡。他也许会成为你的问题。</p><p>至于说其它的——我没法解开你心中的纠结，盖勒特。我连自己的都做不到。</p><p>谢谢你的帮助</p><h2 id="1957-3-15"><a href="#1957-3-15" class="headerlink" title="1957. 3. 15."></a>1957. 3. 15.</h2><p>阿不思——</p><p>看起来你给自己在阿巴岛上找到了个婴儿黑魔王？那么，你得在三月中小心一点了。</p><p>我很好奇——你会在现在就作为一个义警，在魔法部意识到发生了什么之前十年，提前去追捕伏地魔吗？还是等到你目睹了第一起命案以后？我很肯定，不管是哪一种，都会让你的良心备受煎熬。</p><p>那个男孩魔力充沛但想象匮乏，而你和我，至少从不缺乏后者，那是为什么我们曾做得不错的部分原因。</p><p>你给我的那些麻瓜书，我读得越多，越感到很迷惑。这些麻瓜花了很多很多的时间，在他们的文化议题上，在文学、艺术、社会细节，在他们以局限的眼光（或者用他们的词，科学的眼光）对世界的理解上。是他们在没有魔法的情况下，就无事可做到只能做这个了吗？但没有魔法，这么做又有什么意义？一个巫师拿着一把小提琴能改变现实，而一个麻瓜拿着一把小提琴只能简单地感动他的同类。两个麻瓜争论语法结构什么也改变不了，但两个巫师改进咒语结构能改变世界。</p><p>阿不思，你寄给我这些书，是想要教会我同情这些活在他们小小世界里的无力物种吗？</p><p>我心中在纠结着——它。现在我的手中没有了它，没有了魔法——</p><p>该怎么办呢？</p><p>一个人要怎么在没有魔法的情况下生活呢？</p><p>我窗外的地貌在十二年间变了，尽管我很难说变了多少。很多想法涌现在我的脑海里，然后又从我指间溜走。当墙壁中布满了像妖精的铁笼一样坚固的防护咒语时，人会觉得自己无路可走。你过去常说你一定要给自己找个冥想盆——</p><p>我的纽蒙迦德没法打碎我，阿不思，你也不能。去处理你稚嫩的黑魔王吧。我只是一个腐烂着的老头子——我真的已经是一个老头了吗？我想是的。好吧，在我的时间里，我们仿佛还停留在那个得登上雪山征服欧陆的时候。</p><p>你纠结的，<br>知名不具。</p><h2 id="1957-5-17"><a href="#1957-5-17" class="headerlink" title="1957. 5. 17."></a>1957. 5. 17.</h2><p>盖勒特，</p><p>我恐怕他已经脱离了婴儿黑魔王的阶段了。我们可能得先暂避锋芒，因为他已经进入到黑魔王喜怒无常的青春期，而我曾经在你身上学到过不少这个阶段的危险。但很不幸的是，他没有朋友来帮他度过这段困难的时期。</p><p>关于你提到的选择——是的，它让我备受煎熬。冥想盆已经成为对我来说不可缺少的东西，但即使在有它的情况下，有时我的心仍然无可避免地纠结成一团乱麻。</p><p>关于麻瓜这个问题，一旦思考起来就简直没有尽头。尽管他们自己已经回答过了一些你我提出的问题——当你读了更多麻瓜的文艺批评理论以后，你会意识到他们形成了一些评价创造的有效准则，而这在魔法实践以外的领域是有实用性的。我随信附上了一篇格外能说明这一点的文章。我发现对于我们巫师来说，理解麻瓜的思想确实能以一种不像魔法那么直接的方式改变现实，是比较困难的。不过其实选择这样的人生的麻瓜也不是全部，有更多人选择战斗或是选择劳作，他们会用他们原生态的方式改变物理意义上的现实，而在麻瓜的世界中，这些人并不处于社会结构的顶层。我听到过一些关于麻瓜们在无意识地模仿巫师社会的观点，而我觉得，也许我们弄反了因果。</p><p>但，聊了这么多漫无边际的话题（它是我最近的闲暇爱好），就像你指出那样，我有个黑魔王需要对付。</p><p>[附：《文艺批评剖析》，诺斯洛普·弗莱著]</p><p>-tbc-</p><head><meta name="generator" content="Hexo 3.9.0">     <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script>     <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js"></script> <link rel="alternate" href="/atom.xml" title="Brielley" type="application/atom+xml"></head> <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css">]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;无授权翻译练习，一切权利属于罗琳和Letterblade&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原文链接戳&lt;a href=&quot;https://archiveofourown.org/chapters/16135093?view_adult=true&quot; targe</summary>
      
    
    
    
    <category term="Life" scheme="https://brielley.github.io/categories/Life/"/>
    
    <category term="Translation" scheme="https://brielley.github.io/categories/Life/Translation/"/>
    
    
    <category term="Translation" scheme="https://brielley.github.io/tags/Translation/"/>
    
    <category term="HP" scheme="https://brielley.github.io/tags/HP/"/>
    
    <category term="GGAD" scheme="https://brielley.github.io/tags/GGAD/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Study Notes</title>
    <link href="https://brielley.github.io/2020/01/10/tech-study-notes-database-mysql/"/>
    <id>https://brielley.github.io/2020/01/10/tech-study-notes-database-mysql/</id>
    <published>2020-01-10T07:14:00.717Z</published>
    <updated>2021-03-23T08:13:59.078Z</updated>
    
    <content type="html"><![CDATA[<p>在Leetcode刷完了database下的所有免费题，尝试把这些题目按问题进行了分类，并梳理出每种问题的所涉MySQL知识点与解决思路。</p><h4 id="数据提取与分析"><a href="#数据提取与分析" class="headerlink" title="数据提取与分析"></a>数据提取与分析</h4><h5 id="问题1-前几"><a href="#问题1-前几" class="headerlink" title="问题1 前几"></a>问题1 前几</h5><p>【涉及知识点】<br>最值：单列最大<code>max(column)</code>，单列最小<code>min(column)</code>；多列最大<code>greatest(column1,column2)</code>，多列最小<code>least(column1,column2)</code>，注意greatest和least里不能有值为null否则会返回null<br>剔重：<code>distinct</code><br>排序：按某column列从小到大<code>order by column</code>，从大到小<code>order by column desc</code><br>选取：<code>limit m offset n</code> 取第n+1至n+1+(m-1)=n+m名<br>没有结果时返回null：嵌套一层，内层没有结果什么也不会返回，外层在内层没有结果的情况下会返回null，也可以外层用<code>ifnull</code>更直观</p><p>【例题】#176 <a href="https://leetcode.com/problems/second-highest-salary/" target="_blank" rel="noopener">Second Highest Salary</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Write a SQL query to get the second highest salary from the Employee table.</span><br><span class="line"></span><br><span class="line">+----+--------+</span><br><span class="line">| Id | Salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+----+--------+</span><br><span class="line">For example, given the above Employee table, the query should <span class="built_in">return</span> 200 as the second highest salary. </span><br><span class="line">If there is no second highest salary, <span class="keyword">then</span> the query should <span class="built_in">return</span> null.</span><br><span class="line"></span><br><span class="line">+---------------------+</span><br><span class="line">| SecondHighestSalary |</span><br><span class="line">+---------------------+</span><br><span class="line">| 200                 |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><p>【解析】<br>两种思路：一种是从高到低排序，然后取第二个，这种是如果要取的不是第二，而是第五或者第八到十都会比较适用的；另一种是先求最高的，然后求小于最高的那个，这种方法只在求第二的时候好使。</p><p>第二种思路的核心函数是max，求次高的时候可以用&lt;，也可以用not in，分别如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select max(salary) as <span class="string">'SecondHighestSalary'</span></span><br><span class="line">from employee</span><br><span class="line"><span class="built_in">where</span> salary &lt; (select max(salary) from employee)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select max(salary) as <span class="string">'SecondHighestSalary'</span></span><br><span class="line">from employee</span><br><span class="line"><span class="built_in">where</span> salary not <span class="keyword">in</span> (select max(salary) from employee)</span><br></pre></td></tr></table></figure><p>备注:<br>1）其中前者运行时间是473ms，后者是229ms，后者比前者要快一些，事实上，大部分时候用where in都会更快。<br>2）虽然有函数，但没有group by，所以用where而不是having。<br>3）不用group by是因为是算的所有salary的top2，而不是按照某标准比如部门分组后计算每一组的salary的top2。</p><p>第一种思路的核心语句是order by desc和limit offset，无取值时返回null可以嵌套一层select也可以用ifnull，分别如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">   (</span><br><span class="line">    select distinct salary</span><br><span class="line">    from employee</span><br><span class="line">    order by salary desc</span><br><span class="line">    <span class="built_in">limit</span> 1 offset 1</span><br><span class="line">    )</span><br><span class="line">    as <span class="string">'SecondHighestSalary'</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select ifnull(</span><br><span class="line">               (select distinct salary</span><br><span class="line">                from employee</span><br><span class="line">                order by salary desc</span><br><span class="line">                <span class="built_in">limit</span> 1 offset 1)</span><br><span class="line">               ,null</span><br><span class="line">              )  </span><br><span class="line">              as <span class="string">'SecondHighestSalary'</span></span><br></pre></td></tr></table></figure><p>备注：<br>1）其中前者运行时间是430ms，后者运行时间是181ms，后者更快。<br>2）嵌套的外层是<code>select () as XXX</code>, 而不是<code>select xxx as XXX from () as t</code>，因为如果是后者的话，可以看到它的结构和内层一样，在没有值的时候返回的还是<code>[]</code>而不是<code>[null]</code>。</p><p>【例题】#184 <a href="https://leetcode.com/problems/department-highest-salary/" target="_blank" rel="noopener">Department Highest Salary</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">The Employee table holds all employees. Every employee has an Id, a salary, </span><br><span class="line">and there is also a column <span class="keyword">for</span> the department Id.</span><br><span class="line"></span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| 1  | Joe   | 70000  | 1            |</span><br><span class="line">| 2  | Jim   | 90000  | 1            |</span><br><span class="line">| 3  | Henry | 80000  | 2            |</span><br><span class="line">| 4  | Sam   | 60000  | 2            |</span><br><span class="line">| 5  | Max   | 90000  | 1            |</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">The Department table holds all departments of the company.</span><br><span class="line"></span><br><span class="line">+----+----------+</span><br><span class="line">| Id | Name     |</span><br><span class="line">+----+----------+</span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line">+----+----------+</span><br><span class="line">Write a SQL query to find employees who have the highest salary <span class="keyword">in</span> each of the departments. </span><br><span class="line">For the above tables, your SQL query should <span class="built_in">return</span> the following rows (order of rows does not matter).</span><br><span class="line"></span><br><span class="line">+------------+----------+--------+</span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line">| IT         | Jim      | 90000  |</span><br><span class="line">| Sales      | Henry    | 80000  |</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">Max and Jim both have the highest salary <span class="keyword">in</span> the IT department </span><br><span class="line">and Henry has the highest salary <span class="keyword">in</span> the Sales department.</span><br></pre></td></tr></table></figure><p>【解析】<br>由于需要把所有并列部门第一的信息全部罗列出来，因此不能简单地group by部门以后倒序排列然后limit 1，而是需要嵌套一层，选出所有数值等于前者的，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select d.name as <span class="string">'Department'</span>,</span><br><span class="line">       e.name as <span class="string">'Employee'</span>,</span><br><span class="line">       e.Salary</span><br><span class="line">from employee e</span><br><span class="line">join department d</span><br><span class="line">on d.id=e.departmentid</span><br><span class="line">join (select max(salary) as mxsalary, departmentid from employee group by departmentid) mx</span><br><span class="line">on mx.mxsalary=e.salary and mx.departmentid=e.departmentid</span><br></pre></td></tr></table></figure><p>【例题】#185 <a href="https://leetcode.com/problems/department-top-three-salaries/" target="_blank" rel="noopener">Department Top Three Salaries</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">The Employee table holds all employees. Every employee has an Id, </span><br><span class="line">and there is also a column <span class="keyword">for</span> the department Id.</span><br><span class="line"></span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| 1  | Joe   | 85000  | 1            |</span><br><span class="line">| 2  | Henry | 80000  | 2            |</span><br><span class="line">| 3  | Sam   | 60000  | 2            |</span><br><span class="line">| 4  | Max   | 90000  | 1            |</span><br><span class="line">| 5  | Janet | 69000  | 1            |</span><br><span class="line">| 6  | Randy | 85000  | 1            |</span><br><span class="line">| 7  | Will  | 70000  | 1            |</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">The Department table holds all departments of the company.</span><br><span class="line"></span><br><span class="line">+----+----------+</span><br><span class="line">| Id | Name     |</span><br><span class="line">+----+----------+</span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line">+----+----------+</span><br><span class="line">Write a SQL query to find employees who earn the top three salaries <span class="keyword">in</span> each of the department. </span><br><span class="line">For the above tables, your SQL query should <span class="built_in">return</span> the following rows (order of rows does not matter).</span><br><span class="line"></span><br><span class="line">+------------+----------+--------+</span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line">| IT         | Randy    | 85000  |</span><br><span class="line">| IT         | Joe      | 85000  |</span><br><span class="line">| IT         | Will     | 70000  |</span><br><span class="line">| Sales      | Henry    | 80000  |</span><br><span class="line">| Sales      | Sam      | 60000  |</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">In IT department, Max earns the highest salary, both Randy and Joe earn the second highest salary, </span><br><span class="line">and Will earns the third highest salary. There are only two employees <span class="keyword">in</span> the Sales department, </span><br><span class="line">Henry earns the highest salary <span class="keyword">while</span> Sam earns the second highest salary.</span><br></pre></td></tr></table></figure><p>【解析】<br>由于需要把满足条件的都列出来，而其中有并列的，因此需要把employee自己并表对比。核心思路是，每类比自己小的最多只有3个。具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select d.name as <span class="string">'Department'</span>,</span><br><span class="line">       e1.name as <span class="string">'Employee'</span>,</span><br><span class="line">       e1.Salary</span><br><span class="line">from employee e1</span><br><span class="line">join department d</span><br><span class="line">on e1.departmentid=d.id </span><br><span class="line">join employee e2</span><br><span class="line">on e1.departmentid=e2.departmentid </span><br><span class="line"><span class="built_in">where</span> e1.salary&lt;=e2.salary</span><br><span class="line">group by e1.id</span><br><span class="line">having count(distinct(e2.salary))&lt;=3</span><br></pre></td></tr></table></figure><p>注意:<br>group by的是id，而不是departmentid，这是因为e1和e2已经按照同departmentid来比较了，group by主要是为了后面的having count()，而不是为了区分部门。后面可以用e1.id或者e1.name，但不能用e2的id或name，也不能用departmentid或者salary。</p><h5 id="问题2-对比"><a href="#问题2-对比" class="headerlink" title="问题2 对比"></a>问题2 对比</h5><p>【涉及知识点】<br>核心思路：先拆表再并表，把表按照一个参数一个表拆为多个表，再对比或用join连接各表进行数值对比<br>并表：<code>select xxx from table1 join table2 join table3 on table1.column1=table2.column2 and table1.column3=table3.column4</code><br>拆表：<code>select xxx from table as t1, table as t2 where</code></p><p>【例题】#181 <a href="https://leetcode.com/problems/employees-earning-more-than-their-managers/solution/" target="_blank" rel="noopener">Employees Earning More Than Their Managers</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">The Employee table holds all employees including their managers. Every employee has an Id, </span><br><span class="line">and there is also a column <span class="keyword">for</span> the manager Id.</span><br><span class="line"></span><br><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| Id | Name  | Salary | ManagerId |</span><br><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| 1  | Joe   | 70000  | 3         |</span><br><span class="line">| 2  | Henry | 80000  | 4         |</span><br><span class="line">| 3  | Sam   | 60000  | NULL      |</span><br><span class="line">| 4  | Max   | 90000  | NULL      |</span><br><span class="line">+----+-------+--------+-----------+</span><br><span class="line">Given the Employee table, write a SQL query that finds out employees who earn more than their managers. </span><br><span class="line">For the above table, Joe is the only employee who earns more than his manager.</span><br><span class="line"></span><br><span class="line">+----------+</span><br><span class="line">| Employee |</span><br><span class="line">+----------+</span><br><span class="line">| Joe      |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p>【解析】<br>两种思路，一种是两个表直接对比，一种是并表对比，后者比前者用得更多，因为这个例题是只有两个参数，如果参数多了，并表更直观。</p><p>第一种思路直接对比，核心语句是where，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select e1.name as <span class="string">'Employee'</span></span><br><span class="line">from employee as e1,</span><br><span class="line">     employee as e2</span><br><span class="line"><span class="built_in">where</span> e1.managerid = e2.id</span><br><span class="line">and e1.salary &gt; e2.salary</span><br></pre></td></tr></table></figure><p>这种方法的运算时间是881ms，但不太常用，更常用的还是第二种思路join。</p><p>第二种思路先拆表再并表，核心语句是join，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select e1.name as <span class="string">'Employee'</span></span><br><span class="line">from employee as e1</span><br><span class="line">left join employee as e2</span><br><span class="line">on e1.managerid=e2.id</span><br><span class="line"><span class="built_in">where</span> e1.salary &gt; e2.salary</span><br></pre></td></tr></table></figure><p>这种方法的运算时间是792ms，比较常用，先拆表再并表是一种sql基本思路。</p><p>【例题】#601 <a href="https://leetcode.com/problems/human-traffic-of-stadium/" target="_blank" rel="noopener">Human Traffic of Stadium</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">X city built a new stadium, each day many people visit it and the stats are saved as these columns: </span><br><span class="line">id, visit_date, people</span><br><span class="line"></span><br><span class="line">Please write a query to display the records <span class="built_in">which</span> have 3 or more consecutive rows </span><br><span class="line">and the amount of people more than 100(inclusive).</span><br><span class="line"></span><br><span class="line">For example, the table stadium:</span><br><span class="line">+------+------------+-----------+</span><br><span class="line">| id   | visit_date | people    |</span><br><span class="line">+------+------------+-----------+</span><br><span class="line">| 1    | 2017-01-01 | 10        |</span><br><span class="line">| 2    | 2017-01-02 | 109       |</span><br><span class="line">| 3    | 2017-01-03 | 150       |</span><br><span class="line">| 4    | 2017-01-04 | 99        |</span><br><span class="line">| 5    | 2017-01-05 | 145       |</span><br><span class="line">| 6    | 2017-01-06 | 1455      |</span><br><span class="line">| 7    | 2017-01-07 | 199       |</span><br><span class="line">| 8    | 2017-01-08 | 188       |</span><br><span class="line">+------+------------+-----------+</span><br><span class="line">For the sample data above, the output is:</span><br><span class="line"></span><br><span class="line">+------+------------+-----------+</span><br><span class="line">| id   | visit_date | people    |</span><br><span class="line">+------+------------+-----------+</span><br><span class="line">| 5    | 2017-01-05 | 145       |</span><br><span class="line">| 6    | 2017-01-06 | 1455      |</span><br><span class="line">| 7    | 2017-01-07 | 199       |</span><br><span class="line">| 8    | 2017-01-08 | 188       |</span><br><span class="line">+------+------------+-----------+</span><br><span class="line">Note:</span><br><span class="line">Each day only have one row record, and the dates are increasing with id increasing.</span><br></pre></td></tr></table></figure><p>【解析】<br>拆成3个表来对比即可，注意符合条件的id可能在连续3个100以上访问记录的第1/2/3个中的任何一个位置，需用or来连接条件，并用（）来表示优先级，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select distinct s1.*</span><br><span class="line">from stadium s1, stadium s2, stadium s3</span><br><span class="line"><span class="built_in">where</span> s1.people&gt;=100 and s2.people&gt;=100 and s3.people&gt;=100</span><br><span class="line">and ((s1.id+1=s2.id and s2.id+1=s3.id) </span><br><span class="line">     or </span><br><span class="line">     (s2.id+1=s1.id and s1.id+1=s3.id) </span><br><span class="line">     or </span><br><span class="line">     (s3.id+1=s2.id and s2.id+1=s1.id))</span><br><span class="line">order by id</span><br></pre></td></tr></table></figure><p>注意：由于很多id同时满足or连接的不同条件，因此<code>distinct</code>和<code>order by</code>是必须的。</p><h5 id="问题3-查重"><a href="#问题3-查重" class="headerlink" title="问题3 查重"></a>问题3 查重</h5><p>【涉及知识点】<br>分类：<code>group by</code><br>计数：<code>count()</code><br>先拆再比</p><p>【例题】#182 <a href="https://leetcode.com/problems/duplicate-emails/" target="_blank" rel="noopener">Duplicate Emails</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Write a SQL query to find all duplicate emails <span class="keyword">in</span> a table named Person.</span><br><span class="line"></span><br><span class="line">+----+---------+</span><br><span class="line">| Id | Email   |</span><br><span class="line">+----+---------+</span><br><span class="line">| 1  | a@b.com |</span><br><span class="line">| 2  | c@d.com |</span><br><span class="line">| 3  | a@b.com |</span><br><span class="line">+----+---------+</span><br><span class="line">For example, your query should <span class="built_in">return</span> the following <span class="keyword">for</span> the above table:</span><br><span class="line"></span><br><span class="line">+---------+</span><br><span class="line">| Email   |</span><br><span class="line">+---------+</span><br><span class="line">| a@b.com |</span><br><span class="line">+---------+</span><br><span class="line">Note: All emails are <span class="keyword">in</span> lowercase.</span><br></pre></td></tr></table></figure><p>【解析】<br>两种思路，一种思路是转化为对比问题，用上面问题2对比中所用的先拆再比的办法，另一种思路是每个email分个类，选出分类计数大于1的。</p><p>第一种思路，拆成两个表，求那些id不同但email值相同的，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select distinct p1.Email</span><br><span class="line">from person p1,</span><br><span class="line">     person p2</span><br><span class="line"><span class="built_in">where</span> p1.id &lt;&gt; p2.id</span><br><span class="line">and p1.email = p2.email</span><br></pre></td></tr></table></figure><p>备注：<br>1）这种方法的运算速度是513ms<br>2）注意要用distinct，这样如果重复次数多于2次的时候，只会返回一个值。</p><p>另一种思路，按email进行分类，求类别下的id数大于1的，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select Email</span><br><span class="line">from person</span><br><span class="line">group by email</span><br><span class="line">having count(email) &gt; 1</span><br></pre></td></tr></table></figure><p>备注：<br>1）这种方法的运算速度是436ms<br>2）注意因为有分类<code>group by</code>，求每个类别的计数条件要用<code>having</code>，而不是求所有的计数所用的<code>where</code>。<br>3）计数这种方式比起前一种拆表对比的方式而言，适用性更强，在有多个参数有要求时更方便直观。</p><p>【例题】#596 <a href="https://leetcode.com/problems/classes-more-than-5-students/" target="_blank" rel="noopener">Classes More Than 5 Students</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">There is a table courses with columns: student and class</span><br><span class="line"></span><br><span class="line">Please list out all classes <span class="built_in">which</span> have more than or equal to 5 students.</span><br><span class="line"></span><br><span class="line">For example, the table:</span><br><span class="line"></span><br><span class="line">+---------+------------+</span><br><span class="line">| student | class      |</span><br><span class="line">+---------+------------+</span><br><span class="line">| A       | Math       |</span><br><span class="line">| B       | English    |</span><br><span class="line">| C       | Math       |</span><br><span class="line">| D       | Biology    |</span><br><span class="line">| E       | Math       |</span><br><span class="line">| F       | Computer   |</span><br><span class="line">| G       | Math       |</span><br><span class="line">| H       | Math       |</span><br><span class="line">| I       | Math       |</span><br><span class="line">+---------+------------+</span><br><span class="line">Should output:</span><br><span class="line"></span><br><span class="line">+---------+</span><br><span class="line">| class   |</span><br><span class="line">+---------+</span><br><span class="line">| Math    |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">The students should not be counted duplicate <span class="keyword">in</span> each course.</span><br></pre></td></tr></table></figure><p>【解析】<br>这样计数超过2的情况用对比就不好使了，用group by再count则非常方便。具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select class</span><br><span class="line">from courses</span><br><span class="line">group by class</span><br><span class="line">having count(distinct student)&gt;=5</span><br></pre></td></tr></table></figure><p>备注：<br>1）同上例，因为有<code>group by</code>，所以不能用<code>where</code>，而应该用<code>having</code>来求每组的数字<br>2）考虑到表中有可能有不同口径重复写入的情况，因此需要<code>distinct</code>剔除重复的记录，最好养成加distinct的习惯，因为如果没有重复记录，加一个distinct也不会影响结果。</p><h5 id="问题4-日期"><a href="#问题4-日期" class="headerlink" title="问题4 日期"></a>问题4 日期</h5><p>【涉及知识点】<br><strong>返回当前日期和时间</strong>：<br><code>now()</code>会返回当前YYYY-MM-DD HH:MM:SS，<br><code>curdate()</code>会返回当前YYYY-MM-DD，<br><code>curtime()</code>会返回当前HH:MM:SS<br><strong>截取时间中的某个值</strong>：<br><code>date(column)</code>会返回column中的YYYY-MM-DD，<br><code>extract(year/quarter/month/week/day/hour/minute/second/microsecond/hour_minute/day_minute/year_month from column)</code>会返回column中的YYYY/Q/MM/WW/DD/HH/MM/SS/MS/HHMM/DDHHMM/YYYYMM 注，Q是从1开始计，WW是在第一个周日前计为0，第一个周日开始到第一个周六计为1，以此类推<br><strong>增减求日期间隔</strong>：<br><code>date_add(date, interval 1 day/week/month/quarter/year/hour/minute/second)</code>返回date之后1天/周/月/季/年/小时/分钟/秒钟后的那个日期，<br><code>date_sub(date, interval 2 day/...)</code>返回date之前1天/…后的那个日期，<br><code>datediff(date1,date2)</code>返回两个日期中间的间隔<strong>天</strong>数。</p><p>【例题】#197 <a href="https://leetcode.com/problems/rising-temperature/" target="_blank" rel="noopener">Rising Temperature</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Given a Weather table, write a SQL query to find all dates<span class="string">' Ids </span></span><br><span class="line"><span class="string">with higher temperature compared to its previous (yesterday'</span>s) dates.</span><br><span class="line"></span><br><span class="line">+---------+------------------+------------------+</span><br><span class="line">| Id(INT) | RecordDate(DATE) | Temperature(INT) |</span><br><span class="line">+---------+------------------+------------------+</span><br><span class="line">|       1 |       2015-01-01 |               10 |</span><br><span class="line">|       2 |       2015-01-02 |               25 |</span><br><span class="line">|       3 |       2015-01-03 |               20 |</span><br><span class="line">|       4 |       2015-01-04 |               30 |</span><br><span class="line">+---------+------------------+------------------+</span><br><span class="line">For example, <span class="built_in">return</span> the following Ids <span class="keyword">for</span> the above Weather table:</span><br><span class="line"></span><br><span class="line">+----+</span><br><span class="line">| Id |</span><br><span class="line">+----+</span><br><span class="line">|  2 |</span><br><span class="line">|  4 |</span><br><span class="line">+----+</span><br></pre></td></tr></table></figure><p>【解析】<br>主体是一个非常简单的先拆表再比较或并表，容易错的点在于：由于记录不一定是连续的，所以不能用id而应该用recorddate来表达previous dates的概念，用到<code>date_add</code>或<code>datediff</code>函数，具体如下：<br>date_add+拆表比较（运算时间1025ms）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select w2.Id </span><br><span class="line">from weather w1, </span><br><span class="line">     weather w2</span><br><span class="line"><span class="built_in">where</span> date_add(w1.recorddate, interval 1 day)=w2.recorddate </span><br><span class="line">and w1.temperature&lt;w2.temperature</span><br></pre></td></tr></table></figure><p>datediff+拆表比较（运算时间641ms）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select w2.Id </span><br><span class="line">from weather w1, </span><br><span class="line">     weather w2</span><br><span class="line"><span class="built_in">where</span> datediff(w1.recorddate, w2.recorddate)=-1 </span><br><span class="line">and w1.temperature&lt;w2.temperature</span><br></pre></td></tr></table></figure><p>date_add+拆表并表（运算时间679ms)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select w2.Id </span><br><span class="line">from weather w1</span><br><span class="line">right join weather w2</span><br><span class="line">on date_add(w1.recorddate,interval 1 day)=w2.recorddate</span><br><span class="line"><span class="built_in">where</span> w1.temperature&lt;w2.temperature</span><br></pre></td></tr></table></figure><p>datediff+拆表并表（运算时间791ms）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select w2.Id </span><br><span class="line">from weather w1</span><br><span class="line">right join weather w2</span><br><span class="line">on datediff(w1.recorddate, w2.recorddate)=-1 </span><br><span class="line"><span class="built_in">where</span> w1.temperature&lt;w2.temperature</span><br></pre></td></tr></table></figure><p>从运算时间看，其中如果采用并表join，用date_add更快一点；如果采用比较，用datediff要快很多。<br>考虑到大部分情况下用join会比直接比较更适合多参数拆分为多表时，因此在date_add和datediff都能用的情况下可考虑优先选用date_add。</p><h5 id="问题5-数字"><a href="#问题5-数字" class="headerlink" title="问题5 数字"></a>问题5 数字</h5><p>【涉及知识点】<br><strong>一些常用符号</strong>：<br>不等于可以用<code>&lt;&gt;</code>也可以用<code>!=</code>；<br>余数可以用<code>mod(被除数,除数)=余数</code>也可以用<code>被除数%除数=余数</code>；<br><strong>截取数字</strong>：<br><code>round(3.1415, 3)</code>=3.142，<br><code>truncate(3.1415, 3)</code>=3.141，<br><code>floor(3.1415)</code>=3，<br><code>ceil(3.1415)</code>=4</p><p>【例题】#620 <a href="https://leetcode.com/problems/not-boring-movies/" target="_blank" rel="noopener">Not Boring Movies</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">X city opened a new cinema, many people would like to go to this cinema. </span><br><span class="line">The cinema also gives out a poster indicating the movies’ ratings and descriptions.</span><br><span class="line">Please write a SQL query to output movies with an odd numbered ID and a description </span><br><span class="line">that is not <span class="string">'boring'</span>. Order the result by rating.</span><br><span class="line"></span><br><span class="line">For example, table cinema:</span><br><span class="line"></span><br><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   id    | movie     |  description |  rating   |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   1     | War       |   great 3D   |   8.9     |</span><br><span class="line">|   2     | Science   |   fiction    |   8.5     |</span><br><span class="line">|   3     | irish     |   boring     |   6.2     |</span><br><span class="line">|   4     | Ice song  |   Fantacy    |   8.6     |</span><br><span class="line">|   5     | House card|   Interesting|   9.1     |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">For the example above, the output should be:</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   id    | movie     |  description |  rating   |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   5     | House card|   Interesting|   9.1     |</span><br><span class="line">|   1     | War       |   great 3D   |   8.9     |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br></pre></td></tr></table></figure><p>【解析】 这道题非常简单，仅需知道余数的表达方式即可，余数用<code>%</code>则只有mysql支持，用<code>mod()</code>则其它如oracle等也支持，这道题的description里的boring是精确的，可以直接用<code>=</code>，但考虑到大部分时候描述和评价会是一小段话而非一个词，因此用了字符串模糊匹配的<code>not like &#39;%xxx%&#39;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * </span><br><span class="line">from cinema</span><br><span class="line"><span class="built_in">where</span> id%2=1</span><br><span class="line">and description not like <span class="string">'%boring%'</span></span><br><span class="line">order by rating desc</span><br></pre></td></tr></table></figure><h5 id="问题6-字符"><a href="#问题6-字符" class="headerlink" title="问题6 字符"></a>问题6 字符</h5><p>【涉及知识点】<br><strong>字符串匹配</strong>：<br>精确匹配用<code>=</code>，模糊匹配用<code>like</code>或<code>not like</code>，<br>模糊匹配不确定前后有多少字符的时候用<code>&#39;%word%&#39;</code>，模糊匹配确定前后有多少个字符的时候用<code>&#39;w_rd&#39;</code>，<br>模糊匹配多个可以包含的字符时用<code>&#39;where city like [ANL]%&#39;</code>，即返回所有以A或N或L字母打头的城市名，<br>模糊匹配多个需要排除的字符时用<code>&#39;where city like [!ANL]&#39;</code>，即返回所有<strong>不</strong>以A或N或L字母打头的城市名。<br><strong>字符串长度</strong>：<br><code>len(column)</code>，返回这列每个值的字符串长度<br><strong>字符串定位</strong>：<br><code>locate(abc, column)</code>，返回这列每个值中，字符abc出现的位置，如无返回0<br><strong>截取字符串</strong>：<br><code>mid(column, x, n)</code>，返回这列每个值中，从第x个字符开始一直截取n个字符的这一串子字符串</p><p>【例题】<br>问题5的例题262、问题11的例题620解析中有涉及到字符串处理，不赘述。</p><h5 id="问题7-替换"><a href="#问题7-替换" class="headerlink" title="问题7 替换"></a>问题7 替换</h5><p>【涉及知识点】<br>替换问题的核心其实是多条件赋值，如果只有较少条件的时候可以用<code>if()</code>，如果条件多时需要用<code>case when</code><br><strong>if的基本用法</strong>：<code>if(条件, 符合条件时的赋值1, 不符合条件时的赋值2)</code><br><strong>case when的基本用法</strong>：<code>case when 条件1 then 赋值1 when 条件2 then 赋值2 else 赋值3 end</code></p><p>【例题】#627 <a href="https://leetcode.com/problems/swap-salary/" target="_blank" rel="noopener">Swap Salary</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Given a table salary, such as the one below, that has m=male and f=female values. </span><br><span class="line">Swap all f and m values (i.e., change all f values to m and vice versa) with a single update statement </span><br><span class="line">and no intermediate temp table.</span><br><span class="line"></span><br><span class="line">Note that you must write a single update statement, DO NOT write any select statement <span class="keyword">for</span> this problem.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">| id | name | sex | salary |</span><br><span class="line">|----|------|-----|--------|</span><br><span class="line">| 1  | A    | m   | 2500   |</span><br><span class="line">| 2  | B    | f   | 1500   |</span><br><span class="line">| 3  | C    | m   | 5500   |</span><br><span class="line">| 4  | D    | f   | 500    |</span><br><span class="line"></span><br><span class="line">After running your update statement, the above salary table should have the following rows:</span><br><span class="line"></span><br><span class="line">| id | name | sex | salary |</span><br><span class="line">|----|------|-----|--------|</span><br><span class="line">| 1  | A    | f   | 2500   |</span><br><span class="line">| 2  | B    | m   | 1500   |</span><br><span class="line">| 3  | C    | f   | 5500   |</span><br><span class="line">| 4  | D    | m   | 500    |</span><br></pre></td></tr></table></figure><p>【解析】<br>解题思路有两种，一种是用if，因为这里只有两个赋值，一种是用更具普遍性的case when。<br>需要额外提到的是，这是一个更新数据库而非通常的提取数据用于分析的场景，需要用到<code>update</code>而非日常的select，更新数据update的基本用法是：<code>update 表格名 set 需修改参数列名 = 修改内容</code></p><p>第一种思路，case when，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">update salary </span><br><span class="line"><span class="built_in">set</span> sex = <span class="keyword">case</span> sex when <span class="string">'f'</span> <span class="keyword">then</span> <span class="string">'m'</span></span><br><span class="line">                   <span class="keyword">else</span> <span class="string">'f'</span></span><br><span class="line">          end</span><br></pre></td></tr></table></figure><p>需要注意的是，修改的列和条件的列都是sex，如果不是同一列的话比如修改的是name，用于判断的条件是id，那么会写作<code>update salary set name= case id when 1 then &#39;aaa&#39; when 2 then &#39;bbb&#39; else &#39;ccc&#39; end</code><br>另，如果不写作case sex when，而是直接用case when，把sex放到后面去也是可以的，具体写作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">update salary</span><br><span class="line"><span class="built_in">set</span> sex = <span class="keyword">case</span> when sex=<span class="string">'f'</span></span><br><span class="line">               <span class="keyword">then</span> <span class="string">'m'</span></span><br><span class="line">               <span class="keyword">else</span> <span class="string">'f'</span></span><br><span class="line">          end</span><br></pre></td></tr></table></figure><p>第二种思路，if，因为这里sex只有两个取值，所以用if是足够的，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update salary </span><br><span class="line"><span class="built_in">set</span> sex = <span class="keyword">if</span>(sex=<span class="string">'f'</span>,<span class="string">'m'</span>,<span class="string">'f'</span>)</span><br></pre></td></tr></table></figure><p>需要注意的是，if后面的条件必须完整的写为sex=xxx，而不能因为前面已经有sex=了就省掉，因为这里的条件和要赋值的列都是sex，但可能存在不是同一个列的情况，比如按照上面的栗子会写作<code>update salary set name = if(id=1,&#39;aaa&#39;,&#39;bbb&#39;)</code></p><p>这里用if的运算时间是518ms，用case when的运算时间是337ms，尽管if的代码要短一些，但case when的运算速度更快，考虑到case when的适用场景也更多，因此在替换与赋值问题中尽量优先选择使用case when。</p><p>【例题】#626 <a href="https://leetcode.com/problems/exchange-seats/" target="_blank" rel="noopener">Exchange Seats</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Mary is a teacher <span class="keyword">in</span> a middle school and she has a table seat storing students<span class="string">' names </span></span><br><span class="line"><span class="string">and their corresponding seat ids.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The column id is continuous increment.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Mary wants to change seats for the adjacent students.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Can you write a SQL query to output the result for Mary?</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">+---------+---------+</span></span><br><span class="line"><span class="string">|    id   | student |</span></span><br><span class="line"><span class="string">+---------+---------+</span></span><br><span class="line"><span class="string">|    1    | Abbot   |</span></span><br><span class="line"><span class="string">|    2    | Doris   |</span></span><br><span class="line"><span class="string">|    3    | Emerson |</span></span><br><span class="line"><span class="string">|    4    | Green   |</span></span><br><span class="line"><span class="string">|    5    | Jeames  |</span></span><br><span class="line"><span class="string">+---------+---------+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For the sample input, the output is:</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">+---------+---------+</span></span><br><span class="line"><span class="string">|    id   | student |</span></span><br><span class="line"><span class="string">+---------+---------+</span></span><br><span class="line"><span class="string">|    1    | Doris   |</span></span><br><span class="line"><span class="string">|    2    | Abbot   |</span></span><br><span class="line"><span class="string">|    3    | Green   |</span></span><br><span class="line"><span class="string">|    4    | Emerson |</span></span><br><span class="line"><span class="string">|    5    | Jeames  |</span></span><br><span class="line"><span class="string">+---------+---------+</span></span><br><span class="line"><span class="string">Note:</span></span><br><span class="line"><span class="string">If the number of students is odd, there is no need to change the last one'</span>s seat.</span><br></pre></td></tr></table></figure><p>【解析】<br>由于涉及到3个情景：奇数且不为最大值，奇数且为最大值，偶数。因此无法用if，需用case when，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      (<span class="keyword">case</span> when id%2=0 <span class="keyword">then</span> id-1</span><br><span class="line">            when id%2=1 and id&lt;&gt;maxid <span class="keyword">then</span> id+1</span><br><span class="line">            <span class="keyword">else</span> id</span><br><span class="line">       end</span><br><span class="line">       ) as id,</span><br><span class="line">       student</span><br><span class="line">from seat,</span><br><span class="line">     (select max(id) as maxid from seat) mx</span><br><span class="line">order by id</span><br></pre></td></tr></table></figure><p>注意：<br>不能在case when的其中一个枝干里直接用<code>case when id%2=1 and id not in (select max(id) from seat) mx then id+1</code>，而须按照上面的写法把mx放到from之后，否则会报错。</p><h5 id="问题8-扩表"><a href="#问题8-扩表" class="headerlink" title="问题8 扩表"></a>问题8 扩表</h5><p>【涉及知识点】<br>扩表是把记录不连续的表格扩大成包含一系列参数的大表，通常包含两类操作：列转行或行转列、对无记录的条目进行赋值<br>列转行通常有三种做法：<code>if</code>；<code>case when</code>；<code>pivot</code><br>行转列通常做法为：<code>union</code>/<code>union all</code><br>if和case when的用法在问题7替换中已经讲过了，不赘述。<br>pivot的基本用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select column2value1,column2value2,column2value3</span><br><span class="line">from (select * from originaltable) as base</span><br><span class="line">pivot(max/min/sum(column1) <span class="keyword">for</span> column2 <span class="keyword">in</span> (column2value1,column2value2,column2value3)) as pvt</span><br></pre></td></tr></table></figure><p>union /union all基本用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select column from table</span><br><span class="line">union (all)</span><br><span class="line">select column from table</span><br></pre></td></tr></table></figure><p>需注意的是，1）如果用union会自动剃重，union all则不会 2）被连接各表的colomn项目顺序格式必须完全一样 3）union除了用作行转列外，也可用作纵向并表（join为横向并表）</p><p>【例题】#1179 <a href="https://leetcode.com/problems/reformat-department-table/" target="_blank" rel="noopener">Reformat Department Table</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Table: Department</span><br><span class="line"></span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| revenue       | int     |</span><br><span class="line">| month         | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(id, month) is the primary key of this table.</span><br><span class="line">The table has information about the revenue of each department per month.</span><br><span class="line">The month has values <span class="keyword">in</span> [<span class="string">"Jan"</span>,<span class="string">"Feb"</span>,<span class="string">"Mar"</span>,<span class="string">"Apr"</span>,<span class="string">"May"</span>,<span class="string">"Jun"</span>,<span class="string">"Jul"</span>,<span class="string">"Aug"</span>,<span class="string">"Sep"</span>,<span class="string">"Oct"</span>,<span class="string">"Nov"</span>,<span class="string">"Dec"</span>].</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query to reformat the table such that there is a department id column </span><br><span class="line">and a revenue column <span class="keyword">for</span> each month.</span><br><span class="line"></span><br><span class="line">The query result format is <span class="keyword">in</span> the following example:</span><br><span class="line"></span><br><span class="line">Department table:</span><br><span class="line">+------+---------+-------+</span><br><span class="line">| id   | revenue | month |</span><br><span class="line">+------+---------+-------+</span><br><span class="line">| 1    | 8000    | Jan   |</span><br><span class="line">| 2    | 9000    | Jan   |</span><br><span class="line">| 3    | 10000   | Feb   |</span><br><span class="line">| 1    | 7000    | Feb   |</span><br><span class="line">| 1    | 6000    | Mar   |</span><br><span class="line">+------+---------+-------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------+-------------+-------------+-------------+-----+-------------+</span><br><span class="line">| id   | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |</span><br><span class="line">+------+-------------+-------------+-------------+-----+-------------+</span><br><span class="line">| 1    | 8000        | 7000        | 6000        | ... | null        |</span><br><span class="line">| 2    | 9000        | null        | null        | ... | null        |</span><br><span class="line">| 3    | null        | 10000       | null        | ... | null        |</span><br><span class="line">+------+-------------+-------------+-------------+-----+-------------+</span><br><span class="line"></span><br><span class="line">Note that the result table has 13 columns (1 <span class="keyword">for</span> the department id + 12 <span class="keyword">for</span> the months).</span><br></pre></td></tr></table></figure><p>【解析】<br>这是一个典型的扩表问题，需要的工作包含列转行和对没有记录的取值赋值为null，下面分别用case when；if；pivot来实现。<br>第一种方法，case when，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select distinct id,</span><br><span class="line">       sum(CASE when month=<span class="string">'jan'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> null END) as <span class="string">'Jan_Revenue'</span>,</span><br><span class="line">       sum(CASE when month=<span class="string">'feb'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> null END) as <span class="string">'Feb_Revenue'</span>,</span><br><span class="line">       sum(CASE when month=<span class="string">'mar'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> null END) as <span class="string">'Mar_Revenue'</span>,</span><br><span class="line">       sum(CASE when month=<span class="string">'apr'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> null END) as <span class="string">'Apr_Revenue'</span>,</span><br><span class="line">       sum(CASE when month=<span class="string">'may'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> null END) as <span class="string">'May_Revenue'</span>,</span><br><span class="line">       sum(CASE when month=<span class="string">'jun'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> null END) as <span class="string">'Jun_Revenue'</span>,</span><br><span class="line">       sum(CASE when month=<span class="string">'jul'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> null END) as <span class="string">'Jul_Revenue'</span>,</span><br><span class="line">       sum(CASE when month=<span class="string">'aug'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> null END) as <span class="string">'Aug_Revenue'</span>,</span><br><span class="line">       sum(CASE when month=<span class="string">'sep'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> null END) as <span class="string">'Sep_Revenue'</span>,</span><br><span class="line">       sum(CASE when month=<span class="string">'oct'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> null END) as <span class="string">'Oct_Revenue'</span>,</span><br><span class="line">       sum(CASE when month=<span class="string">'nov'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> null END) as <span class="string">'Nov_Revenue'</span>,</span><br><span class="line">       sum(CASE when month=<span class="string">'dec'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> null END) as <span class="string">'Dec_Revenue'</span></span><br><span class="line">from department</span><br><span class="line">group by id</span><br></pre></td></tr></table></figure><p>备注：<br>1）需要注意的是用到了<code>sum()</code>和<code>group by id</code>，因为如果不用sum的话，就会出现每条记录对应的别的记录其实是有数值的会在这条记录中显示为null，因此需要用sum()或者max()来在多个取值中选择有数值的而非null，这道题目因为每个月每个部门只有一条记录，所以用max或者sum都可以，但如果是有多条记录的话，用sum()会更合适<br>2) 注意是<code>group by id</code>而不是<code>group by month</code>，因为已经把每个月给单独写出来了，不需要通过group by month来为不同月份分组计算，使用group by的目的是为了sum，因此需用id这种不会因group而汇总的参数。<br>3）distinct只是写作习惯，不写也可以，但实测发现写distinct的运算时间为690m，不写distinct会更慢运算时间要1116ms</p><p>第二种方法，if()函数，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select id,</span><br><span class="line">       sum(<span class="keyword">if</span>(month=<span class="string">'jan'</span>, revenue, null)) as <span class="string">'Jan_Revenue'</span>,</span><br><span class="line">       sum(<span class="keyword">if</span>(month=<span class="string">'feb'</span>, revenue, null)) as <span class="string">'Feb_Revenue'</span>,</span><br><span class="line">       sum(<span class="keyword">if</span>(month=<span class="string">'mar'</span>, revenue, null)) as <span class="string">'Mar_Revenue'</span>,</span><br><span class="line">       sum(<span class="keyword">if</span>(month=<span class="string">'apr'</span>, revenue, null)) as <span class="string">'Apr_Revenue'</span>,</span><br><span class="line">       sum(<span class="keyword">if</span>(month=<span class="string">'may'</span>, revenue, null)) as <span class="string">'May_Revenue'</span>,</span><br><span class="line">       sum(<span class="keyword">if</span>(month=<span class="string">'jun'</span>, revenue, null)) as <span class="string">'Jun_Revenue'</span>,</span><br><span class="line">       sum(<span class="keyword">if</span>(month=<span class="string">'jul'</span>, revenue, null)) as <span class="string">'Jul_Revenue'</span>,</span><br><span class="line">       sum(<span class="keyword">if</span>(month=<span class="string">'aug'</span>, revenue, null)) as <span class="string">'Aug_Revenue'</span>,</span><br><span class="line">       sum(<span class="keyword">if</span>(month=<span class="string">'sep'</span>, revenue, null)) as <span class="string">'Sep_Revenue'</span>,</span><br><span class="line">       sum(<span class="keyword">if</span>(month=<span class="string">'oct'</span>, revenue, null)) as <span class="string">'Oct_Revenue'</span>,</span><br><span class="line">       sum(<span class="keyword">if</span>(month=<span class="string">'nov'</span>, revenue, null)) as <span class="string">'Nov_Revenue'</span>,</span><br><span class="line">       sum(<span class="keyword">if</span>(month=<span class="string">'dec'</span>, revenue, null)) as <span class="string">'Dec_Revenue'</span></span><br><span class="line">from department</span><br><span class="line">group by id</span><br></pre></td></tr></table></figure><p>备注：<br>1）仍是用到了sum()和group by<br>2）这种方法运算时间为734ms，很有趣的是如果加distinct，运算时间为774ms，相差不大</p><p>第三种方法，pivot，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select id,</span><br><span class="line">       jan as Jan_revenue,</span><br><span class="line">       feb as Feb_revenue,</span><br><span class="line">       mar as Mar_revenue,</span><br><span class="line">       apr as Apr_revenue,</span><br><span class="line">       may as May_revenue,</span><br><span class="line">       jun as Jun_revenue,</span><br><span class="line">       jul as Jul_revenue,</span><br><span class="line">       aug as Aug_revenue,</span><br><span class="line">       sep as Sep_revenue,</span><br><span class="line">       oct as Oct_revenue,</span><br><span class="line">       nov as Nov_revenue,</span><br><span class="line">       dec as Dec_revenue</span><br><span class="line">from (select id,revenue,month from department) as base</span><br><span class="line">pivot (sum(revenue) <span class="keyword">for</span> month <span class="keyword">in</span>(jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec)) as pvt</span><br></pre></td></tr></table></figure><p>备注：<br>1）大部分版本的mysql不支持pivot，以上是在ms sql server中的写法<br>2）运算时间1315ms<br>3）考虑兼容性，列转行尽量使用case when/if而非pivot，行转列尽量使用union all而非unpivot</p><h5 id="问题9-定义函数"><a href="#问题9-定义函数" class="headerlink" title="问题9 定义函数"></a>问题9 定义函数</h5><p>【涉及知识点】<br>有时需要返回的内容并非一个固定参数，而是会需要根据情况调整输入参数的，这时需要定义函数。<br>定义函数的基本格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION functionname(n int/varchar) RETURNS int/varchar <span class="comment">#定义functionname函数，参数n，参数格式是数字/字符，返回值是数字/字符</span></span><br><span class="line">BEGIN <span class="comment">#定义的参数不能表达为数学式，如有计算需要需设定其它参数并定义其与参数n的关系</span></span><br><span class="line">      DECLARE 参数名m 参数格式int; <span class="comment">#与定义函数名和参数格式时一样中间用空格隔开，注意结尾需:</span></span><br><span class="line">      SET m=n+1; <span class="comment">#set后面是declare的参数与函数参数n的关系，注意需;结尾</span></span><br><span class="line">  RETURN (  select... ); <span class="comment">#中间是正常的查询分析语句，把平时固定的某数值替换为函数参数n即可，</span></span><br><span class="line">                         <span class="comment">#注意需打括号，括号后有;，注意是return而不是前面定义函数名时用的returns</span></span><br><span class="line">END; <span class="comment">#注意有begin就要有end，end后面有没有;都可以</span></span><br></pre></td></tr></table></figure><p>【例题】#177 <a href="https://leetcode.com/problems/nth-highest-salary/" target="_blank" rel="noopener">Nth Highest Salary</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Write a SQL query to get the nth highest salary from the Employee table.</span><br><span class="line"></span><br><span class="line">+----+--------+</span><br><span class="line">| Id | Salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+----+--------+</span><br><span class="line">For example, given the above Employee table, the nth highest salary <span class="built_in">where</span> n = 2 is 200.</span><br><span class="line"> If there is no nth highest salary, <span class="keyword">then</span> the query should <span class="built_in">return</span> null.</span><br><span class="line"></span><br><span class="line">+------------------------+</span><br><span class="line">| getNthHighestSalary(2) |</span><br><span class="line">+------------------------+</span><br><span class="line">| 200                    |</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><p>【解析】<br>本身是一个非常简单的前几问题，但由于需要定义一个函数来方便输入第几的数字，因此需要把简单的前几查询略作修改变成函数定义。具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION getNthHighestSalary(N int) RETURNS int</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line"> DECLARE M int;</span><br><span class="line"> SET M=N-1;</span><br><span class="line"></span><br><span class="line"> RETURN</span><br><span class="line"> (</span><br><span class="line">      select distinct salary</span><br><span class="line">      from employee</span><br><span class="line">      order by salary desc</span><br><span class="line">      <span class="built_in">limit</span> 1 offset M</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p>格式中需要注意的点包括：<br>1）函数名的名字就是需要返回的列名，下面写函数时就无需as了<br>2）函数名后面括号内的参数名和参数格式中间的是空格，而不是逗号<br>3）定义函数名时用的returns有个s，后面接的是返回值的格式<br>4）create function returns这句后面无需使用符号<br>5）begin后如果没什么要设定的可以直接接return<br>6）如果在查询语句中不能直接使用参数而需要参数的计算后变形，那么需要在begin后先declare另一个辅助参数，然后set辅助参数与函数参数之间的关系，注意declare句后和set句后均有;分号<br>7）return后面的如果是整个查询语句的话，需要把查询语句括号起来，注意括号后有;分号<br>8）最后别忘了有begin就会有end，而end后面有没有;都可以的</p><h5 id="问题10-排名"><a href="#问题10-排名" class="headerlink" title="问题10 排名"></a>问题10 排名</h5><p>【涉及知识点】<br>需要注意的是，这里所说的排名与排序不同，重点是需要为每行返回一个代表其名次的数字，这涉及到的核心功能仍是自定义函数，但不同于create function，这里的自定义函数是在查询语句中间实现的，也并不需要面向不同的输入参数。<br>通过自定义函数创建一列新的行序数字的基本格式是：<br><code>select table.*, @rownum:=@rownum+1 from table, (select @rownum:=0) as r</code></p><p>【例题】#178 <a href="https://leetcode.com/problems/rank-scores/" target="_blank" rel="noopener">Rank Scores</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. </span><br><span class="line">Note that after a tie, the next ranking number should be the next consecutive <span class="built_in">integer</span> value. </span><br><span class="line">In other words, there should be no <span class="string">"holes"</span> between ranks.</span><br><span class="line"></span><br><span class="line">+----+-------+</span><br><span class="line">| Id | Score |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | 3.50  |</span><br><span class="line">| 2  | 3.65  |</span><br><span class="line">| 3  | 4.00  |</span><br><span class="line">| 4  | 3.85  |</span><br><span class="line">| 5  | 4.00  |</span><br><span class="line">| 6  | 3.65  |</span><br><span class="line">+----+-------+</span><br><span class="line">For example, given the above Scores table, your query should generate the following report (order </span><br><span class="line">  by highest score):</span><br><span class="line"></span><br><span class="line">+-------+------+</span><br><span class="line">| Score | Rank |</span><br><span class="line">+-------+------+</span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 3.85  | 2    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line">| 3.50  | 4    |</span><br><span class="line">+-------+------+</span><br></pre></td></tr></table></figure><p>【解析】<br>可以想到输出结果是由两个表并成的，一个表是每个分数对应的排名，这需要将分数剔重以后排序再通过自定义函数得出每行的行数数值，第二个表是包含相同分数的原始表格，需要按照分数从高到低排列。具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select s1.Score, s3.Rank</span><br><span class="line">from scores s1</span><br><span class="line">left join</span><br><span class="line">(</span><br><span class="line"> select s2.score, @rownum:=@rownum+1 as Rank </span><br><span class="line"> from (select distinct score from scores order by score desc) s2, (select @rownum:=0) r</span><br><span class="line">) s3</span><br><span class="line">on s1.score=s3.score</span><br><span class="line">order by rank</span><br></pre></td></tr></table></figure><p>需注意的是，对获取排名值的表需要嵌套一次，因为需要剔除重复的和排序，而如果不嵌套而是把distinct，order by，自定义rownum函数全放在同一层的话会报错。</p><h5 id="问题11-比率"><a href="#问题11-比率" class="headerlink" title="问题11 比率"></a>问题11 比率</h5><p>【涉及知识点】<br>拆表再并表<br>用case when将符合条件的赋值1，不符合条件的赋值0，使用sum计算出所有符合条件的，除以count全部。</p><p>【例题】#262 <a href="https://leetcode.com/problems/trips-and-users/" target="_blank" rel="noopener">Trips and Users</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">The Trips table holds all taxi trips. Each trip has a unique Id, <span class="keyword">while</span> Client_Id and Driver_Id </span><br><span class="line">are both foreign keys to the Users_Id at the Users table. Status is an ENUM <span class="built_in">type</span> of (‘completed’, </span><br><span class="line">  ‘cancelled_by_driver’, ‘cancelled_by_client’).</span><br><span class="line"></span><br><span class="line">+----+-----------+-----------+---------+--------------------+----------+</span><br><span class="line">| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|</span><br><span class="line">+----+-----------+-----------+---------+--------------------+----------+</span><br><span class="line">| 1  |     1     |    10     |    1    |     completed      |2013-10-01|</span><br><span class="line">| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|</span><br><span class="line">| 3  |     3     |    12     |    6    |     completed      |2013-10-01|</span><br><span class="line">| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|</span><br><span class="line">| 5  |     1     |    10     |    1    |     completed      |2013-10-02|</span><br><span class="line">| 6  |     2     |    11     |    6    |     completed      |2013-10-02|</span><br><span class="line">| 7  |     3     |    12     |    6    |     completed      |2013-10-02|</span><br><span class="line">| 8  |     2     |    12     |    12   |     completed      |2013-10-03|</span><br><span class="line">| 9  |     3     |    10     |    12   |     completed      |2013-10-03| </span><br><span class="line">| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|</span><br><span class="line">+----+-----------+-----------+---------+--------------------+----------+</span><br><span class="line">The Users table holds all users. Each user has an unique Users_Id, and Role is an ENUM </span><br><span class="line"> <span class="built_in">type</span> of (‘client’, ‘driver’, ‘partner’).</span><br><span class="line"></span><br><span class="line">+----------+--------+--------+</span><br><span class="line">| Users_Id | Banned |  Role  |</span><br><span class="line">+----------+--------+--------+</span><br><span class="line">|    1     |   No   | client |</span><br><span class="line">|    2     |   Yes  | client |</span><br><span class="line">|    3     |   No   | client |</span><br><span class="line">|    4     |   No   | client |</span><br><span class="line">|    10    |   No   | driver |</span><br><span class="line">|    11    |   No   | driver |</span><br><span class="line">|    12    |   No   | driver |</span><br><span class="line">|    13    |   No   | driver |</span><br><span class="line">+----------+--------+--------+</span><br><span class="line">Write a SQL query to find the cancellation rate of requests made by unbanned users (both client and </span><br><span class="line">driver must be unbanned) between Oct 1, 2013 and Oct 3, 2013. </span><br><span class="line">The cancellation rate is computed by dividing the number of canceled (by client or driver) requests </span><br><span class="line">made by unbanned users by the total number of requests made by unbanned users.</span><br><span class="line"></span><br><span class="line">For the above tables, your SQL query should <span class="built_in">return</span> the following rows with the cancellation rate </span><br><span class="line"> being rounded to two decimal places.</span><br><span class="line"></span><br><span class="line">+------------+-------------------+</span><br><span class="line">|     Day    | Cancellation Rate |</span><br><span class="line">+------------+-------------------+</span><br><span class="line">| 2013-10-01 |       0.33        |</span><br><span class="line">| 2013-10-02 |       0.00        |</span><br><span class="line">| 2013-10-03 |       0.50        |</span><br><span class="line">+------------+-------------------+</span><br></pre></td></tr></table></figure><p>【解析】<br>先并表，在并表过程中通过<code>where</code>把被禁用户和不符合日期的记录给直接剔除掉。<br>然后在求取消率时，分母可以直接用<code>count()</code>，分子如果用count就不能再设条件，因此用<code>sum()</code>，把符合条件带cancelled的条目赋值1其它赋值0，注意根据要求是精确到小数点后两位，因此需要用<code>round(num,2)</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select distinct t.request_at as <span class="string">'Day'</span>, </span><br><span class="line">       round(sum(<span class="keyword">case</span> when t.status like <span class="string">'%cancelled%'</span> <span class="keyword">then</span> 1 <span class="keyword">else</span> 0 end)/count(t.id), 2) as <span class="string">'Cancellation Rate'</span></span><br><span class="line">from trips t</span><br><span class="line">join users u1</span><br><span class="line">join users u2</span><br><span class="line">on t.client_id=u1.users_id and t.driver_id=u2.users_id</span><br><span class="line"><span class="built_in">where</span> u1.banned=<span class="string">'no'</span>and u2.banned=<span class="string">'no'</span> </span><br><span class="line">and t.request_at&gt;=<span class="string">'2013-10-01'</span> and t.request_at&lt;=<span class="string">'2013-10-03'</span></span><br><span class="line">group by request_at</span><br><span class="line">order by request_at</span><br></pre></td></tr></table></figure><p>注意：<br>1）<code>like</code>前面没有<code>is</code>，后面的模糊字符串需要用<code>&#39;&#39;</code>框起来。<br>2）三个表可以一起连，直接<code>join join on</code>，而无需<code>join on join on</code><br>3）日期可以直接用大于小于这样的符号，但需注意，日期也需用<code>&#39;&#39;</code>框起来，否则会报错。</p><h4 id="数据库维护相关"><a href="#数据库维护相关" class="headerlink" title="数据库维护相关"></a>数据库维护相关</h4><h5 id="问题1-删重"><a href="#问题1-删重" class="headerlink" title="问题1 删重"></a>问题1 删重</h5><p>【涉及知识点】<br>删除某行的格式：<code>delete * from table where</code>，和select的格式是一样的，只是换成delete，且因为是删整行，所以一般是<code>*</code>或者<code>table.*</code>而不像select需要写明选出来的是行里的哪些列参数。<br>删重还是剔重：一般原则上是不要删数据，用的时候选出不重复的就行了，也即是用distinct，但不排除有时确有删除数据库中的冗余数据的维护数据库而非从数据库中调用数据进行分析的情况。</p><p>【例题】#196 <a href="https://leetcode.com/problems/delete-duplicate-emails/" target="_blank" rel="noopener">Delete Duplicate Emails</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Write a SQL query to delete all duplicate email entries <span class="keyword">in</span> a table named Person, </span><br><span class="line">keeping only unique emails based on its smallest Id.</span><br><span class="line"></span><br><span class="line">+----+------------------+</span><br><span class="line">| Id | Email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">| 3  | john@example.com |</span><br><span class="line">+----+------------------+</span><br><span class="line">Id is the primary key column <span class="keyword">for</span> this table.</span><br><span class="line">For example, after running your query, the above Person table should have the following rows:</span><br><span class="line"></span><br><span class="line">+----+------------------+</span><br><span class="line">| Id | Email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">+----+------------------+</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">Your output is the whole Person table after executing your sql. Use delete statement.</span><br></pre></td></tr></table></figure><p>【解析】<br>和查重的思路很相似，也是要么先拆表再转化成比较问题，要么计算每个值有多少个。</p><p>第一种方法，拆表再对比，把查重时的select改为删除时的delete就行了，注意因为要求保留较小的一个id，因此比较的时候不是不等于而是大于。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">delete p1.*</span><br><span class="line">from person p1,</span><br><span class="line">     person p2</span><br><span class="line"><span class="built_in">where</span> p1.id &gt; p2.id</span><br><span class="line">and p1.email = p2.email</span><br></pre></td></tr></table></figure><p>备注：<br>1）这种方法的运算时间是1110ms<br>2）这里的delete后面有<code>*</code>，是因为删除表格的依据是整表，而不是某个指标。</p><p>第二种方法，把表格按每个email来group by，然后这里我们不需要计数，只需要求出id最小的需要保留的是哪些，然后删除那些不属于这些id的就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">delete </span><br><span class="line">from person</span><br><span class="line"><span class="built_in">where</span> id not <span class="keyword">in</span> (</span><br><span class="line">                select id from</span><br><span class="line">                (select min(id) as <span class="string">'id'</span>,email</span><br><span class="line">                 from person</span><br><span class="line">                 group by email) minid</span><br></pre></td></tr></table></figure><p>备注：<br>1）这种方法的运算时间是1846ms<br>2）这里的delete后面没有<code>*</code>，而是直接接from，因为后面是where所限定的一个指标id<br>3）id not in的括号内必须嵌套一次，而不能直接一次，否则会报错，原因不明。</p><h5 id="问题2-更新数据"><a href="#问题2-更新数据" class="headerlink" title="问题2 更新数据"></a>问题2 更新数据</h5><p>【涉及知识点】<br>更新数据的基本格式：<br><code>update table set column-need-to-be-update=xxx where column-condition=mmm</code></p><p>【例题】 前面分析互换问题时在例题627中已经讲过，不赘述。</p><p>Credit: 以上所有例题题目均来自Leetcode免费题库，可点击每道例题的标题链接进入Leetcode练习。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Leetcode刷完了database下的所有免费题，尝试把这些题目按问题进行了分类，并梳理出每种问题的所涉MySQL知识点与解决思路。&lt;/p&gt;
&lt;h4 id=&quot;数据提取与分析&quot;&gt;&lt;a href=&quot;#数据提取与分析&quot; class=&quot;headerlink&quot; title=&quot;数</summary>
      
    
    
    
    <category term="Tech" scheme="https://brielley.github.io/categories/Tech/"/>
    
    <category term="Study Notes" scheme="https://brielley.github.io/categories/Tech/Study-Notes/"/>
    
    
    <category term="Database" scheme="https://brielley.github.io/tags/Database/"/>
    
    <category term="MySQL" scheme="https://brielley.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>2019 Annual Reading Repo</title>
    <link href="https://brielley.github.io/2020/01/09/life-diary-reading-repo-2019/"/>
    <id>https://brielley.github.io/2020/01/09/life-diary-reading-repo-2019/</id>
    <published>2020-01-09T05:35:36.814Z</published>
    <updated>2021-03-24T09:11:29.616Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TOP-3-BOOKS-OF-THE-YEAR"><a href="#TOP-3-BOOKS-OF-THE-YEAR" class="headerlink" title="TOP 3 BOOKS OF THE YEAR"></a>TOP 3 BOOKS OF THE YEAR</h4><h5 id="金字塔原理-by-芭芭拉·明托"><a href="#金字塔原理-by-芭芭拉·明托" class="headerlink" title="金字塔原理 by 芭芭拉·明托"></a><a href="https://book.douban.com/subject/4882120/" target="_blank" rel="noopener">金字塔原理 by 芭芭拉·明托</a></h5><hr><p><em>个人评分：★★★★</em><br><em>再刷概率：中</em></p><hr><p>有段时间发现自己在表达观点时遇到一些问题，不止一个具备话题相应前置信息与知识的人会弄错我所表达的观点，或是尽管观点最终被准确表达了，但那是交流过程中伴随着的大量复述与纠正的结果，发现问题后找了不少书，而这是里面对我帮助最大也是我觉得最值得安利的一本。</p><p>这本书本身的知名度很高，但知名度很大程度上阻碍了它的传播，至少对我来说是这样的。会有很多溢美之词把原本这本书没有涉及也不打算涉及的东西赋予它，然后被吃了虚假安利的读者打差评，事实上，这是一本非常有针对性的书，它的应用场景非常窄：<br>这本书仅适用于表达者与听众的已知信息与知识结构对称的情况下，表达者如何系统地表达自己的观点能更清晰准确并调动听众兴趣。在所表达的观点与对方观点或普遍观点不同的时候尤为适用。</p><p>需要说明的是，尽管作者出身咨询行业，所举栗子大多是咨询案例，且书商往往把这当作卖点，但这本书所写表达技巧的应用场景并不局限于咨询，咨询仅仅是这种双方已知信息是对称的表达的重点在独有观点上的一个典型应用场景。书中对于这种技巧的文字描述还蛮清晰的，不看栗子并不影响理解，并且由于翻译的缘故，栗子的可读性其实非常差。带着自己表达（无论是书面还是口头）中所遇到的问题作为栗子去思考，收获反而更大。<br>另一需要说明的是，别信那些对这本书的一句话或是一段话总结，也不要采用只读小标题和总结句的速读方式，因为这本书真正让人有收获的不是那个所有人都知道的大框架。我从高中课堂上学到这个框架后用了十几年，但逐字读完这本书后，才发现之前这么多年一直仅是形似而已。</p><p>此外，澄清一些被天花乱坠的书商广告或自己也没看就靠着脑补瞎推一气的快餐号所误导的：<br>这本书不适用于科普场景，也就是表达者比听众得知更多的信息或知识且准备系统地向无基础的听众深入浅出地传达这些信息和知识并让读者读得兴趣盎然的情况。科普场景可以参考各领域的经典入门书，正面栗子有：曼昆的经济学原理、罗斯的公司金融、索罗门的大问题简明哲学导论、戴维迈尔斯的社会心理学、费恩曼的物理学讲义，反面栗子有：乔纳森卡勒的文学理论入门，深入了但没浅出，虽然叫入门但其实是一本中级书，有基础会看得噢噢噢噢，零基础会看得啥啥啥啥；另一个反面栗子是机械工业出版社的深入浅出系列，我只看了一本深入浅出统计学，浅出了但没深入，行文风格感觉预设读者十二岁，但其实书是面向已经高中毕业的人群的。<br>这本书不适用于学习逻辑，尽管里面有章节涉及到了写作中对逻辑的应用，也因此被许多乱七八糟的推介词列为卖点，但这本书实际上是假设读者已经具备逻辑基础了，于是仅仅谈到了应用，如果希望了解逻辑基础，可以参考索罗门的大问题中导言里的逻辑准备一节，那几页纸是我读到过的面向零基础人群在基础逻辑知识上表达得最清晰最简洁的。<br>这本书不适用于提高沟通能力，尽管它谈到了非常有用的表达清楚复杂观点的方法，但一方面并不是所有的沟通都涉及到复杂观点的表达，另一方面即使是复杂观点表达的情景，这本书致力于解决的仅仅是基于文本的纯粹观点上的准确表达与接收，而不涉及人类学上对文本中作者无意识表达的提取与分析和心理学层面的对文本外信息的表达与理解，如果希望了解人类学方面，可以参考下面的帝国之眼，如果希望了解心理学方面，可以参考马歇尔卢森堡的非暴力沟通。</p><h5 id="帝国之眼-by-玛丽·路易斯·普拉特"><a href="#帝国之眼-by-玛丽·路易斯·普拉特" class="headerlink" title="帝国之眼 by 玛丽·路易斯·普拉特"></a><a href="https://book.douban.com/subject/26974733/" target="_blank" rel="noopener">帝国之眼 by 玛丽·路易斯·普拉特</a></h5><hr><p><em>个人评分：★★★☆</em><br><em>再刷概率：中低</em></p><hr><p>起因是发现我尽管在大部分时候都具备语境意识，但似乎对文本中的作者无意识敏感度极差，在日常生活中尤为明显，于是被安利了这本书。</p><p>先说说这本书的缺点：<br>一是翻译非常晦涩。不是说它用了多少艰深的专有名词或是在以其昏昏使人昭昭，事实上这本书的翻译在信息上总体还挺准确的，主要问题是几乎全是一段话一个大从句的长难句，让人有一种在做GRE中文阅读的错觉。当然，我自己如果不刻意改短句，一行就一个句号的事儿也没少干，似乎也没啥理由挑剔这个。<br>二是文本对大部分人来说比较陌生。这本书所用的文本主要是近代欧洲人在非洲和南美的旅游文学，在前八章里，尽管我能感觉到作者在表达一种和过去研究这些文本完全不同的视角，但显然本书预设的读者是对此有基础的人群，对于既不了解这些文本，也不了解之前的分析视角（除了少数章节有简短说明）的我来说，阅读中的参与感就很低了。唯一的例外是涉及到我有一丢丢基础的前现代女性书写的第七章。</p><p>但读到最后两章的时候，因为更多地涉及到的是观点，并且这些观点所涉及的不熟悉材料大部分在前面的八章中已经给出过了，于是易读性和获得感立刻暴增。<br>尤其我个人非常喜欢第十章，无论是从前八章到第九章的顺理成章到第十章的超预期但又合情理的飞跃，还是它提出的一些非常有启发性的观点本身。或许以后会写一下由第十章的一个观点想到的，模模糊糊感觉到这是一个值得挖下去的问题，或许结合美蠢会更有意思，找个时间看看能不能写出什么有趣的东西。<br>同时，这本书实现了我最初的阅读初衷，它确实是一个不错的训练感知文本中的作者无意识的素材，尽管这并非它的写作初衷。<br>如果对这本书的阅读预期也是如此，那么推荐阅读第3、4、9、10章。<br>如果对书中涉及的文本有兴趣，全文阅读也是一个不错的选择，里面也涉及到一些非常有趣的文本，比如读这本书之前，我万万没想到其实两百年前的欧洲女性非常羡慕现在被我们时不时就拎出来做典型的阿拉伯女性的服装，认为那可以使她们隐藏起来，没人知道她们是夫人还是女仆，她们可以更自由地去更多的地方，并且不用时刻面对无处不在的凝视目光。</p><h5 id="闺塾师-by-高彦颐"><a href="#闺塾师-by-高彦颐" class="headerlink" title="闺塾师 by 高彦颐"></a><a href="https://book.douban.com/subject/1227981/" target="_blank" rel="noopener">闺塾师 by 高彦颐</a></h5><hr><p><em>个人评分：★★★☆</em><br><em>再刷概率：低</em></p><hr><p>起因是二刷脂批版石头记的时候产生了一些关于明末清初女性的社会角色的疑问，然后被安利了这本书。这本书所提及的史料解答了我的困惑，并且它们本身非常inspiring，但如果仅仅如此，我会给它一个三星，但在未来不太会有再刷的可能。<br>我可能会再刷它并在这个安利向的reading repo中放入这本书，是因为作者所用的表述自己观点的方式非常有启发性。如果说芭芭拉的金字塔框架是一个能让作者准确表达清楚自己观点的及格的方法，那么这本书作者所用的这种通过材料的选取、材料编排的顺序、材料的陈述方式来阐述自身观点，并且这些娓娓道来仿若creative writing的阐述能让读者准确清晰无歧义地get到她的观点的方法则值一个优秀了。比起前者，它或许不适用于一些对时间效率非常敏感的商业领域，但对于读者群较为确定且他们原本就预留了相当足的一块时间来读它的专著写作，这种方法的优势是显而易见的。</p><a id="more"></a><h4 id="OVERALL-BOOK-READING"><a href="#OVERALL-BOOK-READING" class="headerlink" title="OVERALL BOOK READING"></a>OVERALL BOOK READING</h4><hr><p><em>总计阅读：6本</em><br><em>比例分布： 理论：技能=2：4，入门：进阶=3：3</em></p><hr><p>安利向repo之后，也对今年的阅读做个personal的总结。</p><p>阅读量是总体下降的，即使加上两本读到一半的今年也仅读了8本书，而去年的总计阅读是13本，前年是32本。行动力的下降虽然在今年总体表现得较为显著，但在阅读上并不是主要原因。今年阅读量锐减最主要的原因是阅读意愿的下降，缺乏前两年那样强烈的motivation。前年的阅读动力主要来源于对思维模式固化需要从新的学科领域中汲取养分升级模型的需求和习惯于碎片阅读后无法专注进行长时间系统阅读的复健需求。后者在前年的强制一坐四小时以上断网阅读中已基本完成，前者因为工程大持续到了去年，成为去年阅读的两大动力之一，另一大动力是补短板。到了今年，前两年的这三个需求已经基本完成，而短期内没有出现其它的促使阅读的强动力。同时，另一个因素开始凸显并对阅读量进行了极大制约，即我个人有兴趣或有需求的学科或领域的入门级经典书籍都已经在前两年被我刷完了，而我遇到了各个学科都非常显著的中级经典书籍缺乏的困境，不仅仅是获取靠谱的书单困难，而是这样的书籍本身就极为稀缺。于是今年我仅阅读了少量有靠谱安利的领域，而另一些我感兴趣但无法获得靠谱安利的领域则尽管有阅读意愿但却无法找到靠谱的书籍，或许明年应该考虑扩大感兴趣领域的社交。</p><p>尽管理论类书籍阅读遇到了瓶颈，但其实我今年的技能类阅读需求倒是比往年更旺盛。但很有趣的是，技能类的最佳获取渠道其实并不是书籍，至少对入门领域是这样，相对而言，网课、视频、技术博客、刷题网站、乃至自己随便做个练习project遇到不知道该怎么实现的搜一搜，也比看书来得有效得多。比较有效的技能类书籍主要集中在一些传统技术、中级、理论性强的领域。尽管它们很有用，但一方面它们的获取成本很高，因为有海量的垃圾书和它们在同一块书店的区域、同一个书单、差不多的评分、一样乱七八糟的评价，很多时候遇到它们需要运气和巧合。另一方面，似乎人们很少互相安利技能类书籍，这或许是因为喜欢读书的都去搞理论去了，搞技术的原本就更喜欢实践出真知而不是看书；又或许是因为觉得阅读技能类书籍会某种意义上显示出自己在这方面技能上有所欠缺，于是在相当一部分社交语境下被小心地掩藏了起来；再又或者是因为它们常常被与许多乱七八糟的畅销书放在一起，甚至有时候出版社为了它们的销量也会在靠谱的内容外加上乱七八糟的简介或是它们因为靠谱的内容出名后被知名而不靠谱的人加上了乱七八糟的推介，于是大部分时候为了避免他人不明就里以为自己在安利垃圾不如轻易不提为妙。不过我注意到，尽管人们很少主动安利，但如果在聊天中坦诚自己遇到了某方面的问题，需要一些相关的靠谱安利的时候，却往往能得到我也遇到了这个问题我觉得某本书对我帮助很大的回馈，大约是因为在这种语境下第二种和第三种顾虑消失了。</p><p>除了阅读量下降与更偏技能类和进阶类的变化以外，另一个对比前两年的新特征是评分变低了。上两年的前三都在四星半以上，而今年的年度最佳也仅仅四星，再刷概率也从之前的最低也是中，到今年的最高也仅是中。这其中最主要原因大概仍是入门经典的评分无可避免的会偏高，毕竟前两年读到的进阶书籍和技能书籍的评分也和今年差不多。</p><p><strong>附：BOOK READING IN RECENT 3 YEARS</strong></p><table><thead><tr><th align="center">年份</th><th align="center">TOP 1</th><th align="center">TOP 2</th><th align="center">TOP 3</th><th align="center">年总阅读</th><th align="center">理论：技能</th><th align="center">入门：进阶</th></tr></thead><tbody><tr><td align="center">2019</td><td align="center"><a href="(https://book.douban.com/subject/4882120/)">金字塔原理</a> ★★★★ 再刷率中</td><td align="center"><a href="https://book.douban.com/subject/26974733/" target="_blank" rel="noopener">帝国之眼</a> ★★★☆ 再刷率中低</td><td align="center"><a href="https://book.douban.com/subject/1227981/" target="_blank" rel="noopener">闺塾师</a> ★★★☆ 再刷率低</td><td align="center">6</td><td align="center">1:2</td><td align="center">1:1</td></tr><tr><td align="center">2018</td><td align="center"><a href="https://book.douban.com/subject/25982198/" target="_blank" rel="noopener">社会心理学</a> ★★★★★ 再刷率中高</td><td align="center"><a href="https://book.douban.com/subject/5952488/" target="_blank" rel="noopener">亲密关系</a> ★★★★☆ 再刷率中</td><td align="center"><a href="https://book.douban.com/subject/1364847/" target="_blank" rel="noopener">Literary Theory</a> ★★★★☆ 再刷率中</td><td align="center">13</td><td align="center">12:1</td><td align="center">11:2</td></tr><tr><td align="center">2017</td><td align="center"><a href="https://book.douban.com/subject/25961458/" target="_blank" rel="noopener">大问题</a> ★★★★★ 再刷率高</td><td align="center"><a href="http://ishare.iask.sina.com.cn/f/24761150.html" target="_blank" rel="noopener">脂批版石头记</a> ★★★★☆ 再刷率中高</td><td align="center"><a href="https://book.douban.com/subject/1795079/" target="_blank" rel="noopener">乡土中国</a>/<a href="https://book.douban.com/subject/1048712/" target="_blank" rel="noopener">柏拉图选集</a> ★★★★☆ 再刷率中</td><td align="center">32</td><td align="center">31:1</td><td align="center">31:1</td></tr></tbody></table><p><strong>附2：统计标准</strong></p><p>1.纯娱乐式阅读不纳入统计，判别标准为是否有获得input或对output有inspiration。<br>2.对于多周目阅读，按一刷时间计入当年阅读，再刷不计入统计。<br>3.入选年度TOP3的标准为当年阅读、评分在3星以上、未来再刷几率不为零；评分低于3星或未来不可能再刷即使排名前三也不计入TOP3。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;TOP-3-BOOKS-OF-THE-YEAR&quot;&gt;&lt;a href=&quot;#TOP-3-BOOKS-OF-THE-YEAR&quot; class=&quot;headerlink&quot; title=&quot;TOP 3 BOOKS OF THE YEAR&quot;&gt;&lt;/a&gt;TOP 3 BOOKS OF THE YEAR&lt;/h4&gt;&lt;h5 id=&quot;金字塔原理-by-芭芭拉·明托&quot;&gt;&lt;a href=&quot;#金字塔原理-by-芭芭拉·明托&quot; class=&quot;headerlink&quot; title=&quot;金字塔原理 by 芭芭拉·明托&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/4882120/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;金字塔原理 by 芭芭拉·明托&lt;/a&gt;&lt;/h5&gt;&lt;hr&gt;
&lt;p&gt;&lt;em&gt;个人评分：★★★★&lt;/em&gt;&lt;br&gt;&lt;em&gt;再刷概率：中&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;有段时间发现自己在表达观点时遇到一些问题，不止一个具备话题相应前置信息与知识的人会弄错我所表达的观点，或是尽管观点最终被准确表达了，但那是交流过程中伴随着的大量复述与纠正的结果，发现问题后找了不少书，而这是里面对我帮助最大也是我觉得最值得安利的一本。&lt;/p&gt;
&lt;p&gt;这本书本身的知名度很高，但知名度很大程度上阻碍了它的传播，至少对我来说是这样的。会有很多溢美之词把原本这本书没有涉及也不打算涉及的东西赋予它，然后被吃了虚假安利的读者打差评，事实上，这是一本非常有针对性的书，它的应用场景非常窄：&lt;br&gt;这本书仅适用于表达者与听众的已知信息与知识结构对称的情况下，表达者如何系统地表达自己的观点能更清晰准确并调动听众兴趣。在所表达的观点与对方观点或普遍观点不同的时候尤为适用。&lt;/p&gt;
&lt;p&gt;需要说明的是，尽管作者出身咨询行业，所举栗子大多是咨询案例，且书商往往把这当作卖点，但这本书所写表达技巧的应用场景并不局限于咨询，咨询仅仅是这种双方已知信息是对称的表达的重点在独有观点上的一个典型应用场景。书中对于这种技巧的文字描述还蛮清晰的，不看栗子并不影响理解，并且由于翻译的缘故，栗子的可读性其实非常差。带着自己表达（无论是书面还是口头）中所遇到的问题作为栗子去思考，收获反而更大。&lt;br&gt;另一需要说明的是，别信那些对这本书的一句话或是一段话总结，也不要采用只读小标题和总结句的速读方式，因为这本书真正让人有收获的不是那个所有人都知道的大框架。我从高中课堂上学到这个框架后用了十几年，但逐字读完这本书后，才发现之前这么多年一直仅是形似而已。&lt;/p&gt;
&lt;p&gt;此外，澄清一些被天花乱坠的书商广告或自己也没看就靠着脑补瞎推一气的快餐号所误导的：&lt;br&gt;这本书不适用于科普场景，也就是表达者比听众得知更多的信息或知识且准备系统地向无基础的听众深入浅出地传达这些信息和知识并让读者读得兴趣盎然的情况。科普场景可以参考各领域的经典入门书，正面栗子有：曼昆的经济学原理、罗斯的公司金融、索罗门的大问题简明哲学导论、戴维迈尔斯的社会心理学、费恩曼的物理学讲义，反面栗子有：乔纳森卡勒的文学理论入门，深入了但没浅出，虽然叫入门但其实是一本中级书，有基础会看得噢噢噢噢，零基础会看得啥啥啥啥；另一个反面栗子是机械工业出版社的深入浅出系列，我只看了一本深入浅出统计学，浅出了但没深入，行文风格感觉预设读者十二岁，但其实书是面向已经高中毕业的人群的。&lt;br&gt;这本书不适用于学习逻辑，尽管里面有章节涉及到了写作中对逻辑的应用，也因此被许多乱七八糟的推介词列为卖点，但这本书实际上是假设读者已经具备逻辑基础了，于是仅仅谈到了应用，如果希望了解逻辑基础，可以参考索罗门的大问题中导言里的逻辑准备一节，那几页纸是我读到过的面向零基础人群在基础逻辑知识上表达得最清晰最简洁的。&lt;br&gt;这本书不适用于提高沟通能力，尽管它谈到了非常有用的表达清楚复杂观点的方法，但一方面并不是所有的沟通都涉及到复杂观点的表达，另一方面即使是复杂观点表达的情景，这本书致力于解决的仅仅是基于文本的纯粹观点上的准确表达与接收，而不涉及人类学上对文本中作者无意识表达的提取与分析和心理学层面的对文本外信息的表达与理解，如果希望了解人类学方面，可以参考下面的帝国之眼，如果希望了解心理学方面，可以参考马歇尔卢森堡的非暴力沟通。&lt;/p&gt;
&lt;h5 id=&quot;帝国之眼-by-玛丽·路易斯·普拉特&quot;&gt;&lt;a href=&quot;#帝国之眼-by-玛丽·路易斯·普拉特&quot; class=&quot;headerlink&quot; title=&quot;帝国之眼 by 玛丽·路易斯·普拉特&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/26974733/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;帝国之眼 by 玛丽·路易斯·普拉特&lt;/a&gt;&lt;/h5&gt;&lt;hr&gt;
&lt;p&gt;&lt;em&gt;个人评分：★★★☆&lt;/em&gt;&lt;br&gt;&lt;em&gt;再刷概率：中低&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;起因是发现我尽管在大部分时候都具备语境意识，但似乎对文本中的作者无意识敏感度极差，在日常生活中尤为明显，于是被安利了这本书。&lt;/p&gt;
&lt;p&gt;先说说这本书的缺点：&lt;br&gt;一是翻译非常晦涩。不是说它用了多少艰深的专有名词或是在以其昏昏使人昭昭，事实上这本书的翻译在信息上总体还挺准确的，主要问题是几乎全是一段话一个大从句的长难句，让人有一种在做GRE中文阅读的错觉。当然，我自己如果不刻意改短句，一行就一个句号的事儿也没少干，似乎也没啥理由挑剔这个。&lt;br&gt;二是文本对大部分人来说比较陌生。这本书所用的文本主要是近代欧洲人在非洲和南美的旅游文学，在前八章里，尽管我能感觉到作者在表达一种和过去研究这些文本完全不同的视角，但显然本书预设的读者是对此有基础的人群，对于既不了解这些文本，也不了解之前的分析视角（除了少数章节有简短说明）的我来说，阅读中的参与感就很低了。唯一的例外是涉及到我有一丢丢基础的前现代女性书写的第七章。&lt;/p&gt;
&lt;p&gt;但读到最后两章的时候，因为更多地涉及到的是观点，并且这些观点所涉及的不熟悉材料大部分在前面的八章中已经给出过了，于是易读性和获得感立刻暴增。&lt;br&gt;尤其我个人非常喜欢第十章，无论是从前八章到第九章的顺理成章到第十章的超预期但又合情理的飞跃，还是它提出的一些非常有启发性的观点本身。或许以后会写一下由第十章的一个观点想到的，模模糊糊感觉到这是一个值得挖下去的问题，或许结合美蠢会更有意思，找个时间看看能不能写出什么有趣的东西。&lt;br&gt;同时，这本书实现了我最初的阅读初衷，它确实是一个不错的训练感知文本中的作者无意识的素材，尽管这并非它的写作初衷。&lt;br&gt;如果对这本书的阅读预期也是如此，那么推荐阅读第3、4、9、10章。&lt;br&gt;如果对书中涉及的文本有兴趣，全文阅读也是一个不错的选择，里面也涉及到一些非常有趣的文本，比如读这本书之前，我万万没想到其实两百年前的欧洲女性非常羡慕现在被我们时不时就拎出来做典型的阿拉伯女性的服装，认为那可以使她们隐藏起来，没人知道她们是夫人还是女仆，她们可以更自由地去更多的地方，并且不用时刻面对无处不在的凝视目光。&lt;/p&gt;
&lt;h5 id=&quot;闺塾师-by-高彦颐&quot;&gt;&lt;a href=&quot;#闺塾师-by-高彦颐&quot; class=&quot;headerlink&quot; title=&quot;闺塾师 by 高彦颐&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/1227981/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;闺塾师 by 高彦颐&lt;/a&gt;&lt;/h5&gt;&lt;hr&gt;
&lt;p&gt;&lt;em&gt;个人评分：★★★☆&lt;/em&gt;&lt;br&gt;&lt;em&gt;再刷概率：低&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;起因是二刷脂批版石头记的时候产生了一些关于明末清初女性的社会角色的疑问，然后被安利了这本书。这本书所提及的史料解答了我的困惑，并且它们本身非常inspiring，但如果仅仅如此，我会给它一个三星，但在未来不太会有再刷的可能。&lt;br&gt;我可能会再刷它并在这个安利向的reading repo中放入这本书，是因为作者所用的表述自己观点的方式非常有启发性。如果说芭芭拉的金字塔框架是一个能让作者准确表达清楚自己观点的及格的方法，那么这本书作者所用的这种通过材料的选取、材料编排的顺序、材料的陈述方式来阐述自身观点，并且这些娓娓道来仿若creative writing的阐述能让读者准确清晰无歧义地get到她的观点的方法则值一个优秀了。比起前者，它或许不适用于一些对时间效率非常敏感的商业领域，但对于读者群较为确定且他们原本就预留了相当足的一块时间来读它的专著写作，这种方法的优势是显而易见的。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>This War Of Mine三周目通关纪念&amp;那些新手时踩过的坑</title>
    <link href="https://brielley.github.io/2019/12/29/game-this-war-of-mine/"/>
    <id>https://brielley.github.io/2019/12/29/game-this-war-of-mine/</id>
    <published>2019-12-29T15:35:57.000Z</published>
    <updated>2021-03-26T12:26:19.317Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一周目通关"><a href="#一周目通关" class="headerlink" title="一周目通关"></a>一周目通关</h3><p>罗曼受了致命伤，崩溃状态没法去医院，扎拉塔带着仅剩3块肉出去换了绷带回来的时候，发现他离开了避难所，家里少了一颗子弹，只少了一颗子弹，没有少枪，我以为他死了。最后看到结局他在战争中活了下来但因离开后的罪行被判十五年时松了口气，至少还活着。<br>两个妹子战后一个开始了新学业，一个开始了新家庭。大厨找到了他的朋友，她也幸存了下来。如果罗曼转致命伤那晚我让他出门拾荒他没和大厨打架就好了…… </p><h3 id="二周目通关"><a href="#二周目通关" class="headerlink" title="二周目通关"></a>二周目通关</h3><p>原本想弥补一周目罗曼的缺憾，没想这次随机到的角色没他。<br>开局冬天，连续二十来天地图上只有一个半有效资源点，到后头没处可去只好全员留家睡觉……第二十四天忽然刷出好多新地点，让鲍里斯去医院拾满了他的超大背包正准备接下来几天酿酒换粮的时候，战争突兀地在第二十五天结束了，这次全员HE</p><h3 id="三周目通关"><a href="#三周目通关" class="headerlink" title="三周目通关"></a>三周目通关</h3><p>随机到二老组，开局犯罪高峰，陷入因伤致贫因贫致伤死循环，校长死后两天犯罪高峰结束了，教授靠SL一路撑了下来，但因在战争中受到不可逆转的伤害，尽管余生醉心学术但再没能取得任何成就……</p><p>和大部分玩儿我的战争的人是在一周目受到最大触动不同，由于之前零零散散看过一些含剧透的安利，我全程没去任何标记为危险或不愿交易的地方，因此一周目并没遇到太多两难选择，更多的是感慨这游戏容错率真低，而三周目给我的感觉则和前两周目完全不一样。如果说一周目给我更多的是如果早知道xxx就好了，二周目给我的更多的是我知道我需要什么但可惜资源太少如果再刷给我一个xxx就好了，但这些“早知道”或者“如果就”其实很奢侈，因为它们是基于未来的，某一刻关于未来计划的落空要在若干天后才会看到结果，而在这中间的许多天里，也许转机就出现了，而在三周目，根本没有办法去奢侈地顾及未来，因为眼下都已经不一定能过得去了……<br>两个老人，开局就每晚遇抢劫，为了减轻被抢劫的伤害必须出去捡木头来封上房屋的破洞，但只剩一个人守家的必然结果是这个人会一天天不断受伤，然后绷带的库存耗尽，守家的这个人伤势已经重到晚上没办法再做任何睡在床上以外的事情，另一个人也只能守家没法再外出补充补给，坐吃山空的同时另一个人也开始不断受伤，黑市商人上门的时候为了换绷带，几乎用尽了所有象征着未来的材料。准备做集水器的材料卖掉了，没水做饭就吃生肉吧，至于这会耗更多的肉也顾不上了，反正不吃也是被抢；准备造壁炉的材料也卖掉了，反正如果伤治不好即使没死等冬天来了也没法出门捡柴火；最后是电子元件……木头塑料齿轮卖了还可能在未来伤好以后出去捡到或者买到，但电子元件在地图上是有限的，这张地图没有车库没有心灵手巧能造出它卖的汽修店儿子，电子元件用一个就少一个，卖完了将来就做不出防盗门，做不出防盗门再遇抢劫就必然会继续受伤，受伤了又必须要打绷带，自制绷带需要纯酒精，而蒸馏出纯酒精的机器没有电子元件就造不出来，造不出来就又只能倾家荡产去买绷带，从此陷入因贫致伤因伤致贫的死循环，任何一个有一丁点理智去想一想未来的人都不会卖掉它们，但已经致命伤了，再没有绷带都不一定还有明天，还说什么以后呢？于是这个曾经入选过菲尔兹奖提名的数学家做出了卖掉家里所有电子元件这种完全不像是他可能会做出的决定。再后来他熬过了战争，但由于战争创伤再也没能在学术上取得什么新的建树。而从之前看过的剧透里，他的HE是战后意志愈发坚定研究出现重大突破最终获得了菲尔兹奖的……</p><h3 id="事后诸葛那些新手时踩过的坑"><a href="#事后诸葛那些新手时踩过的坑" class="headerlink" title="事后诸葛那些新手时踩过的坑"></a>事后诸葛那些新手时踩过的坑</h3><p>1.奇观误国。蔬菜园的搭建会消耗非常非常非常多的材料，搭成以后由于种菜需要的原料也不少因此使用率并不高，如果把所有蔬菜园的材料用来直接交易蔬菜，那么很可能材料换的比种出来的还多一点。</p><p>2.标记为谨慎的地图不等于不偷不抢就没危险。即使以前去过交易过没出问题的地图，也不等于下一次去交易的时候不会冷不防吃枪子，如果地图描述看起来不大对劲，即使安全值标注为谨慎，每次去的时候也最好带上头盔或防弹背心之类的护具。</p><p>3.守家时工具也计入武器。铲子斧子撬棍放在家里都算，如果它们的总数大于等于家里人数就会显示为全员都有武器了，这样在被袭击的时候能够很大程度减轻受伤的可能。冷兵器和热兵器在守家效果上并没有感觉出明显差别，修好破洞安上防盗门的情况下有两个人用普通工具守家也可以无伤度过犯罪高峰期。如果遇上资源匮乏的地图，捡到的子弹修复的枪支卖掉换其它更有用的物资是一个相对划算的选择。</p><p>4.大部分爱抽烟爱喝咖啡的角色在没烟草咖啡的情况下并不会影响心情，但布鲁诺没烟抽会非常容易悲伤，罗曼除了要保证他的烟还千万不能让他处于非常饥饿状态，否则晚上大概率会打人，是真打，会把队友打成轻伤或把他自己打成重伤。</p><p>5.最好要有的建造品：2个床，3个房屋漏洞，防盗门（需把工作台升到3级），2个捕鼠笼，1个二级灶台，1个水过滤器，1个二级金属工具台，1套工具（铲子、撬棍、斧头、菜刀），1个壁炉，1个制烟台或1个酿酒台，1个收音机。</p><p>可有可无的建造品：第3个床，第2个水过滤器，第2个壁炉或升二级壁炉，热兵器。</p><p>谨慎决定要不要建的建造品：草药园、蔬菜园。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一周目通关&quot;&gt;&lt;a href=&quot;#一周目通关&quot; class=&quot;headerlink&quot; title=&quot;一周目通关&quot;&gt;&lt;/a&gt;一周目通关&lt;/h3&gt;&lt;p&gt;罗曼受了致命伤，崩溃状态没法去医院，扎拉塔带着仅剩3块肉出去换了绷带回来的时候，发现他离开了避难所，家里少了一颗子弹</summary>
      
    
    
    
    <category term="Game" scheme="https://brielley.github.io/categories/Game/"/>
    
    <category term="Indie" scheme="https://brielley.github.io/categories/Game/Indie/"/>
    
    
    <category term="Gamer" scheme="https://brielley.github.io/tags/Gamer/"/>
    
    <category term="This War Of Mine" scheme="https://brielley.github.io/tags/This-War-Of-Mine/"/>
    
  </entry>
  
  <entry>
    <title>Dec2, 2019</title>
    <link href="https://brielley.github.io/2019/12/02/life-diary-late-night-cave-191202/"/>
    <id>https://brielley.github.io/2019/12/02/life-diary-late-night-cave-191202/</id>
    <published>2019-12-02T15:52:59.403Z</published>
    <updated>2021-03-23T08:31:27.673Z</updated>
    
    <content type="html"><![CDATA[<p>这两天忽然发现，狗子似乎并不是像我以为那样我睡着了她就跑到我枕头上睡觉，而是在我醒的时候跑到枕头上的……连续两天都是我朦朦胧胧快睁眼的时候感觉到狗子从我脚边跑到了枕头上，然后我一睁开眼睛她就用脖子蹭我脸……好想知道她到底在想啥……看我最近都用刷子刷脸于是身体力行地表示要用毛刷脸找她呀她脖子上的毛比我刷子上那一小撮毛扎实多了？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这两天忽然发现，狗子似乎并不是像我以为那样我睡着了她就跑到我枕头上睡觉，而是在我醒的时候跑到枕头上的……连续两天都是我朦朦胧胧快睁眼的时候感觉到狗子从我脚边跑到了枕头上，然后我一睁开眼睛她就用脖子蹭我脸……好想知道她到底在想啥……看我最近都用刷子刷脸于是身体力行地表示要用毛</summary>
      
    
    
    
    
  </entry>
  
</feed>
